package gov.nih.nci.cagrid.cabio.client;

import gov.nih.nci.cabio.domain.Gene;
import gov.nih.nci.cagrid.cabio.common.CaBIOI;
import gov.nih.nci.cagrid.cabio.stubs.CaBIOPortType;
import gov.nih.nci.cagrid.cabio.stubs.service.CaBIOServiceAddressingLocator;
import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.common.domain.DatabaseCrossReference;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.StringWriter;
import java.rmi.RemoteException;

import javax.xml.XMLConstants;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;
import org.globus.gsi.GlobusCredential;
import org.w3c.dom.Document;

/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * On construction the class instance will contact the remote service and
 * retrieve it's security metadata description which it will use to configure
 * the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class CaBIOClient extends ServiceSecurityClient implements CaBIOI {
    protected CaBIOPortType portType;

    private Object portTypeMutex;

    public CaBIOClient(String url) throws MalformedURIException,
	    RemoteException {
	this(url, null);
    }

    public CaBIOClient(String url, GlobusCredential proxy)
	    throws MalformedURIException, RemoteException {
	super(url, proxy);
	initialize();
    }

    public CaBIOClient(EndpointReferenceType epr) throws MalformedURIException,
	    RemoteException {
	this(epr, null);
    }

    public CaBIOClient(EndpointReferenceType epr, GlobusCredential proxy)
	    throws MalformedURIException, RemoteException {
	super(epr, proxy);
	initialize();
    }

    private void initialize() throws RemoteException {
	this.portTypeMutex = new Object();
	this.portType = createPortType();
    }

    private CaBIOPortType createPortType() throws RemoteException {

	CaBIOServiceAddressingLocator locator = new CaBIOServiceAddressingLocator();
	// attempt to load our context sensitive wsdd file
	InputStream resourceAsStream = ClassUtils.getResourceAsStream(
		getClass(), "client-config.wsdd");
	if (resourceAsStream != null) {
	    // we found it, so tell axis to configure an engine to use it
	    EngineConfiguration engineConfig = new FileProvider(
		    resourceAsStream);
	    // set the engine of the locator
	    locator.setEngine(new AxisClient(engineConfig));
	}
	CaBIOPortType port = null;
	try {
	    port = locator.getCaBIOPortTypePort(getEndpointReference());
	} catch (Exception e) {
	    throw new RemoteException("Unable to locate portType:"
		    + e.getMessage(), e);
	}

	return port;
    }

    public static void usage() {
	System.out.println(CaBIOClient.class.getName() + " -url <service url>");
    }

    public static void main(String[] args) {
	System.out.println("Running the Grid Service Client");
	try {
	    if (!(args.length < 2)) {
		if (args[0].equals("-url")) {
		    CaBIOClient client = new CaBIOClient(args[1]);
//		    CQLQuery query = deserializeQuery("test/resources/query_1.xml");
		    CQLQuery query = deserializeQuery("test/resources/query_2.xml");
		    CQLQueryResults results = client.query(query);
		    StringWriter w = new StringWriter();
		    Utils.serializeObject(results, new QName("http://CQL.caBIG/1/gov.nih.nci.cagrid.CQLResultSet", "CQLResultSet"), w);
		    System.out.println(w.getBuffer());
		    
		    CQLQueryResultsIterator iterator = new CQLQueryResultsIterator(
			    results,
			    new FileInputStream(
				    "src/gov/nih/nci/cagrid/cabio/client/client-config.wsdd"));
		    //XMLUtility util = new XMLUtility();
		    
		    while (iterator.hasNext()) {
//			Gene gene = (Gene) iterator.next();
//			System.out.println(gene.getId());
			DatabaseCrossReference ref = (DatabaseCrossReference)iterator.next();
//			FileWriter w2 = new FileWriter("out.xml");
//			Utils.serializeObject(ref, new QName("gme://caCORE.caBIG/3.0/gov.nih.nci.cabio.domain", "DatabaseCrossReference"), w2, new FileInputStream(
//			    "src/gov/nih/nci/cagrid/cabio/client/client-config.wsdd"));
			DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
			Document document = parser.parse("out.xml");
			SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
			Source schemaFile = new StreamSource(new File("schema/CaBIO/gov.nih.nci.cabio.domain.xsd"));
			Schema schema = factory.newSchema(schemaFile);
			Validator validator = schema.newValidator();
			validator.validate(new DOMSource(document));
		    }
		    
		} else {
		    usage();
		    System.exit(1);
		}
	    } else {
		usage();
		System.exit(1);
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	    System.exit(1);
	}
    }

    public static CQLQuery deserializeQuery(String filename) {
	CQLQuery query = null;
	try {
	    query = (CQLQuery) Utils.deserializeDocument(filename,
		    CQLQuery.class);
	} catch (Exception ex) {
	    throw new RuntimeException("Error deserializing query: "
		    + ex.getMessage(), ex);
	}
	return query;
    }

    public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata()
	    throws RemoteException {
	synchronized (portTypeMutex) {
	    configureStubSecurity((Stub) portType, "getServiceSecurityMetadata");
	    gov.nih.nci.cagrid.introduce.security.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.GetServiceSecurityMetadataRequest();
	    gov.nih.nci.cagrid.introduce.security.GetServiceSecurityMetadataResponse boxedResult = portType
		    .getServiceSecurityMetadata(params);
	    return boxedResult.getServiceSecurityMetadata();
	}
    }

    public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(
	    gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery)
	    throws RemoteException,
	    gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType,
	    gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
	synchronized (portTypeMutex) {
	    configureStubSecurity((Stub) portType, "query");
	    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
	    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
	    cqlQueryContainer.setCQLQuery(cqlQuery);
	    params.setCqlQuery(cqlQueryContainer);
	    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType
		    .query(params);
	    return boxedResult.getCQLQueryResultCollection();
	}
    }

}
