<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         version="2.4">

    <display-name>caGrid Portlets</display-name>

    <description>caGrid Portlets</description>

    <!--
       - Key of the system property that should specify the root directory of this
       - web app. Applied by WebAppRootListener or Log4jConfigListener.
       -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>cagridportlets.root</param-value>
    </context-param>

    <!--
       - Location of the Log4J config file, for initialization and refresh checks.
       - Applied by Log4jConfigListener.
       -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/log4j.properties</param-value>
    </context-param>

    <!--
       - Location of the XML file that defines the root application context.
       - Applied by ContextLoaderServlet.
       -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:applicationContext-*.xml
            /WEB-INF/context/common.xml
            /WEB-INF/context/facades.xml
            /WEB-INF/context/dwr-applicationContext.xml
        </param-value>
    </context-param>

    <!--
       - Configures Log4J for this web app.
       - As this context specifies a context-param "log4jConfigLocation", its file path
       - is used to load the Log4J configuration, including periodic refresh checks.
       -
       - Would fall back to default Log4J initialization (non-refreshing) if no special
       - context-params are given.
       -
       - Exports a "web app root key", i.e. a system property that specifies the root
       - directory of this web app, for usage in log file paths.
       - This web app specifies "petportal.root" (see log4j.properties file).
       -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!--
       - Loads the root application context of this web app at startup,
       - by default from "/WEB-INF/applicationContext.xml".
         - Note that you need to fall back to Spring's ContextLoaderServlet for
         - J2EE servers that do not follow the Servlet 2.4 initialization order.
         -
       - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
       - to access it anywhere in the web application, outside of the framework.
       -
       - The root context is the parent of all servlet-specific contexts.
       - This means that its beans are automatically available in these child contexts,
       - both for getBean(name) calls and (external) bean references.
       -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <filter>
        <filter-name>sessionFilter</filter-name>
        <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
    </filter>
    <!--apply OSIV to dwr requests-->
    <filter-mapping>
        <filter-name>sessionFilter</filter-name>
        <url-pattern>/dwr/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>dwr-invoker</servlet-name>
        <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
        <init-param>
            <param-name>debug</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>activeReverseAjaxEnabled</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>org.directwebremoting.extend.ServerLoadMonitor</param-name>
            <param-value>org.directwebremoting.impl.PollingServerLoadMonitor</param-value>
        </init-param>
        <init-param>
            <param-name>disconnectedTime</param-name>
            <param-value>5000</param-value>
        </init-param>

    </servlet>

    <servlet-mapping>
        <servlet-name>dwr-invoker</servlet-name>
        <url-pattern>/dwr/*</url-pattern>
    </servlet-mapping>


    <servlet>
        <servlet-name>tree</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>tree</servlet-name>
        <url-pattern>/tree/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>rss</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>rss</servlet-name>
        <url-pattern>*.rss</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>directlogin</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>directlogin</servlet-name>
        <url-pattern>/directlogin/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>content</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>content</servlet-name>
        <url-pattern>/content/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>export</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>export</servlet-name>
        <url-pattern>/export/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>view-servlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.ViewRendererServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>view-servlet</servlet-name>
        <url-pattern>/WEB-INF/servlet/view</url-pattern>
    </servlet-mapping>



</web-app>