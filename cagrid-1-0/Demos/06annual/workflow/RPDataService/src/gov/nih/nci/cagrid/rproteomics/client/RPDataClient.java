package gov.nih.nci.cagrid.rproteomics.client;

import java.io.StringWriter;
import java.net.URL;
import java.rmi.RemoteException;

import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.axis.message.MessageElement;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.rproteomics.stubs.RPDataPortType;
import gov.nih.nci.cagrid.rproteomics.stubs.service.RPDataServiceAddressingLocator;
import gov.nih.nci.cagrid.rproteomics.common.RPDataI;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class RPDataClient implements RPDataI {

	private RPDataServiceAddressingLocator locator;
	private GlobusCredential proxy;
	private String url;


	public RPDataClient(String url) {
		this(url, null);
	}


	public RPDataClient(String url, GlobusCredential proxy) {
		this.proxy = proxy;
		this.url = url;
	}


	private RPDataPortType getPortType() {
		try {
			RPDataServiceAddressingLocator locator = new RPDataServiceAddressingLocator();
			EndpointReferenceType endpoint = new EndpointReferenceType();
			endpoint.setAddress(new Address(url));
			RPDataPortType port = locator.getRPDataPortTypePort(endpoint);
			return port;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}


	public static void usage() {
		System.out.println(RPDataClient.class.getName() + " -gsh [gsh]");
	}


	public static void main(String[] args) {
		try {
			args = new String[] {
				"-gsh", "http://ccis1716.duhs.duke.edu/wsrf/services/cagrid/RPData",
			};
			if (!(args.length < 2)) {
				if (args[0].equals("-gsh")) {
					RPDataClient client = new RPDataClient(args[1]);

					gov.nih.nci.cagrid.cql.CQLQueryType query = new gov.nih.nci.cagrid.cql.CQLQueryType();
					query.setName("test");
					gov.nih.nci.cagrid.cql.CQLQueryResultsType results = client.query(query);
					gov.nih.nci.cagrid.cql.CQLQueryResultType[] resultsArray = results.getCQLQueryResult();
					if (resultsArray != null) {
						for (int i = 0; i < resultsArray.length; i++) {
							gov.nih.nci.cagrid.cql.CQLQueryResultType result = resultsArray[i];
							// Deserialize and print out each element........
							MessageElement[] msgs = result.get_any();
							for (int j = 0; j < msgs.length; j++) {
								StringWriter output = new StringWriter();
								TransformerFactory.newInstance().newTransformer().transform(new DOMSource(msgs[j]), new StreamResult(output));
								System.out.println(output.toString());
							}
						}
					}

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}













	     public gov.nih.nci.cagrid.cql.CQLQueryResultsType query(gov.nih.nci.cagrid.cql.CQLQueryType query) throws RemoteException, gov.nih.nci.cagrid.rproteomics.stubs.MalformedQueryException {
		RPDataPortType port = this.getPortType();
org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

               gov.nih.nci.cagrid.rproteomics.stubs.Query params = new gov.nih.nci.cagrid.rproteomics.stubs.Query();
               params.setQuery(query);
               gov.nih.nci.cagrid.rproteomics.stubs.QueryResponse boxedResult = port.query(params);
               return boxedResult.getResponse();

	}


}
