<?xml version="1.0" encoding="UTF-8"?>
<!--
BPEL Process Definition
Edited using ActiveBPEL(tm) Designer Version 2.0.0 (http://www.active-endpoints.com)
-->
<process name="AnnualDemo" suppressJoinFailure="yes" targetNamespace="http://AnnualDemo" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:ns1="http://rproteomics.cagrid.nci.nih.gov/RPData" xmlns:ns2="http://annualdemo.cagrid.nci.nih.gov/bpel" xmlns:ns3="http://www.globus.org/namespaces/cagrid/RProteomics/RProteomics" xmlns:ns4="http://CQL.caBIG/1/gov.nih.nci.cagrid.CQL" xmlns:ns5="rproteomics.cabig.duke.edu/1/scanFeatures" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   <partnerLinks>
      <!-- Declare all partnerLinks used in this workflow:                                      -->
      <!-- 1. client is a service to take input from the user                                   -->
      <!-- 2. DukeOSURproteomicsPartnerLinkType is partnerLink to Rproteomcis Analytic Service at Duke -->
      <!-- 3. RproteomicsDataLinkType is partnerLink to Rproteomcis Data Service                -->
      <partnerLink myRole="client" name="WorkFlowClientPartnerLinkType" partnerLinkType="ns2:WorkFlowClientPartnerLinkType"/>
      <partnerLink name="RproteomicsDataLinkType" partnerLinkType="ns2:RproteomicsDataLinkType" partnerRole="data"/>
      <partnerLink name="DukeRproteomicsPartnerLinkType" partnerLinkType="ns2:DukeRproteomicsPartnerLinkType" partnerRole="dukeservice"/>
      <partnerLink name="OSURproteomicsPartnerLinkType" partnerLinkType="ns2:OSURproteomicsPartnerLinkType" partnerRole="osuservice"/>
   </partnerLinks>
   <variables>
      <!-- Declare all the variables here -->
      <variable messageType="ns1:workFlowInputMessage" name="workFlowInputMessage"/>
      <variable messageType="ns1:workFlowOutputMessage" name="workFlowOutputMessage"/>
      <variable messageType="ns1:queryInputMessage" name="queryInputMessage"/>
      <variable messageType="ns1:queryOutputMessage" name="queryOutputMessage"/>
      <variable messageType="ns3:echoByValueInputMessage" name="echoByValueInputMessage"/>
      <variable messageType="ns3:echoByValueOutputMessage" name="echoByValueOutputMessage"/>
      <!-- For Loops -->
      <variable name="indexCounter" type="xsd:integer"/>
      <variable name="count" type="xsd:integer"/>
      <variable messageType="ns3:general_interpolateByValueInputMessage" name="general_interpolateByValueInputMessage"/>
      <variable messageType="ns3:general_interpolateByValueOutputMessage" name="general_interpolateByValueOutputMessage"/>
      <variable messageType="ns3:removeBackground_runningQuantileByValueInputMessage" name="removeBackground_runningQuantileByValueInputMessage"/>
      <variable messageType="ns3:removeBackground_runningQuantileByValueOutputMessage" name="removeBackground_runningQuantileByValueOutputMessage"/>
      <variable messageType="ns3:removeBackground_minusByValueInputMessage" name="removeBackground_minusByValueInputMessage"/>
      <variable messageType="ns3:removeBackground_minusByValueOutputMessage" name="removeBackground_minusByValueOutputMessage"/>
      <variable messageType="ns3:denoise_waveletUDWTWByValueInputMessage" name="denoise_waveletUDWTWByValueInputMessage"/>
      <variable messageType="ns3:denoise_waveletUDWTWByValueOutputMessage" name="denoise_waveletUDWTWByValueOutputMessage"/>
      <variable messageType="ns3:align_alignxByValueInputMessage" name="align_alignxByValueInputMessage"/>
      <variable messageType="ns3:align_alignxByValueOutputMessage" name="align_alignxByValueOutputMessage"/>
      <variable messageType="ns3:normalize_quantileByValueInputMessage" name="normalize_quantileByValueInputMessage"/>
      <variable messageType="ns3:normalize_quantileByValueOutputMessage" name="normalize_quantileByValueOutputMessage"/>
      <variable messageType="ns3:plot_2DStackedByValueInputMessage" name="plot_2DStackedByValueInputMessage"/>
      <variable messageType="ns3:plot_2DStackedByValueOutputMessage" name="plot_2DStackedByValueOutputMessage"/>
   </variables>
   <sequence>
      <!-- This is used to get input from the user. -->
      <receive createInstance="yes" operation="startWorkFlow" partnerLink="WorkFlowClientPartnerLinkType" portType="ns2:startWorkFlowPortType" variable="workFlowInputMessage"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from part="parameters" query="/ns1:WorkFlowInputType/query" variable="workFlowInputMessage"/>
            <to part="parameters" query="/ns1:query" variable="queryInputMessage"/>
         </copy>
      </assign>
      <!-- Invoking query operation on data service -->
      <invoke inputVariable="queryInputMessage" operation="query" outputVariable="queryOutputMessage" partnerLink="RproteomicsDataLinkType" portType="ns1:RPDataPortType"/>
      <assign>
         <copy>
            <from expression="count(bpws:getVariableData('queryOutputMessage', 'parameters', '/ns1:queryResponse')/response/ns4:CQLQueryResult)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('queryOutputMessage', 'parameters', '/ns1:queryResponse')/response/ns4:CQLQueryResult[bpws:getVariableData('indexCounter')]/ns5:scanFeatures"/>
               <to part="parameters" query="/ns3:echoByValue/scanFeaturesXml[bpws:getVariableData('indexCounter')]" variable="echoByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <!-- Invoking echoByValue operation on Rproteomics analytical service -->
      <invoke inputVariable="echoByValueInputMessage" operation="echoByValue" outputVariable="echoByValueOutputMessage" partnerLink="DukeRproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('echoByValueOutputMessage', 'parameters', '/ns3:echoByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('echoByValueOutputMessage', 'parameters','/ns3:echoByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
               <to part="parameters" query="/ns3:general_interpolateByValue/scanFeaturesXml[bpws:getVariableData('indexCounter')]" variable="general_interpolateByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <!-- Invoking general_interpolateByValue operation on Rproteomics Analytic service -->
      <invoke inputVariable="general_interpolateByValueInputMessage" operation="general_interpolateByValue" outputVariable="general_interpolateByValueOutputMessage" partnerLink="DukeRproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('general_interpolateByValueOutputMessage', 'parameters', '/ns3:general_interpolateByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('general_interpolateByValueOutputMessage', 'parameters','/ns3:general_interpolateByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
               <to part="parameters" query="/ns3:removeBackground_runningQuantileByValue/scanFeaturesXml[bpws:getVariableData('indexCounter')]" variable="removeBackground_runningQuantileByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <assign>
         <copy>
            <from part="parameters" query="/ns1:WorkFlowInputType/windowType" variable="workFlowInputMessage"/>
            <to part="parameters" query="/ns3:removeBackground_runningQuantileByValue/windowSize" variable="removeBackground_runningQuantileByValueInputMessage"/>
         </copy>
         <copy>
            <from part="parameters" query="/ns1:WorkFlowInputType/percentileType" variable="workFlowInputMessage"/>
            <to part="parameters" query="/ns3:removeBackground_runningQuantileByValue/percentile" variable="removeBackground_runningQuantileByValueInputMessage"/>
         </copy>
      </assign>
      <invoke inputVariable="removeBackground_runningQuantileByValueInputMessage" operation="removeBackground_runningQuantileByValue" outputVariable="removeBackground_runningQuantileByValueOutputMessage" partnerLink="OSURproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('general_interpolateByValueOutputMessage', 'parameters', '/ns3:general_interpolateByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('general_interpolateByValueOutputMessage', 'parameters', '/ns3:general_interpolateByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
               <to part="parameters" query="/ns3:removeBackground_minusByValue/scanFeaturesXml1[bpws:getVariableData('indexCounter')]" variable="removeBackground_minusByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('general_interpolateByValueOutputMessage', 'parameters', '/ns3:general_interpolateByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('removeBackground_runningQuantileByValueOutputMessage', 'parameters', '/ns3:removeBackground_runningQuantileByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
               <to part="parameters" query="/ns3:removeBackground_minusByValue/scanFeaturesXml2[bpws:getVariableData('indexCounter')]" variable="removeBackground_minusByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <invoke inputVariable="removeBackground_minusByValueInputMessage" operation="removeBackground_minusByValue" outputVariable="removeBackground_minusByValueOutputMessage" partnerLink="DukeRproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('removeBackground_minusByValueOutputMessage', 'parameters', '/ns3:removeBackground_minusByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('removeBackground_minusByValueOutputMessage', 'parameters','/ns3:removeBackground_minusByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
               <to part="parameters" query="/ns3:denoise_waveletUDWTWByValue/scanFeaturesXml[bpws:getVariableData('indexCounter')]" variable="denoise_waveletUDWTWByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <assign>
         <copy>
            <from part="parameters" query="/ns1:WorkFlowInputType/windowType" variable="workFlowInputMessage"/>
            <to part="parameters" query="/ns3:denoise_waveletUDWTWByValue/windowSize" variable="denoise_waveletUDWTWByValueInputMessage"/>
         </copy>
         <copy>
            <from part="parameters" query="/ns1:WorkFlowInputType/thresholdType" variable="workFlowInputMessage"/>
            <to part="parameters" query="/ns3:denoise_waveletUDWTWByValue/thresholdMultiplier" variable="denoise_waveletUDWTWByValueInputMessage"/>
         </copy>
      </assign>
      <invoke inputVariable="denoise_waveletUDWTWByValueInputMessage" operation="denoise_waveletUDWTWByValue" outputVariable="denoise_waveletUDWTWByValueOutputMessage" partnerLink="OSURproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('denoise_waveletUDWTWByValueOutputMessage', 'parameters', '/ns3:denoise_waveletUDWTWByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('denoise_waveletUDWTWByValueOutputMessage','parameters', '/ns3:denoise_waveletUDWTWByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
               <to part="parameters" query="/ns3:align_alignxByValue/scanFeaturesXml[bpws:getVariableData('indexCounter')]" variable="align_alignxByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <invoke inputVariable="align_alignxByValueInputMessage" operation="align_alignxByValue" outputVariable="align_alignxByValueOutputMessage" partnerLink="DukeRproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('align_alignxByValueOutputMessage', 'parameters', '/ns3:align_alignxByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('align_alignxByValueOutputMessage','parameters', '/ns3:align_alignxByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
               <to part="parameters" query="/ns3:normalize_quantileByValue/scanFeaturesXml[bpws:getVariableData('indexCounter')]" variable="normalize_quantileByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <invoke inputVariable="normalize_quantileByValueInputMessage" operation="normalize_quantileByValue" outputVariable="normalize_quantileByValueOutputMessage" partnerLink="OSURproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('normalize_quantileByValueOutputMessage', 'parameters', '/ns3:normalize_quantileByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('normalize_quantileByValueOutputMessage','parameters','/ns3:normalize_quantileByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
               <to part="parameters" query="/ns3:plot_2DStackedByValue/scanFeaturesXmlTop[bpws:getVariableData('indexCounter')]" variable="plot_2DStackedByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('general_interpolateByValueOutputMessage', 'parameters', '/ns3:general_interpolateByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
         <assign>
            <copy>
               <from expression="bpws:getVariableData('general_interpolateByValueOutputMessage','parameters','/ns3:general_interpolateByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
               <to part="parameters" query="/ns3:plot_2DStackedByValue/scanFeaturesXmlBottom[bpws:getVariableData('indexCounter')]" variable="plot_2DStackedByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
      </while>
      <invoke inputVariable="plot_2DStackedByValueInputMessage" operation="plot_2DStackedByValue" outputVariable="plot_2DStackedByValueOutputMessage" partnerLink="DukeRproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from part="parameters" query="/ns3:plot_2DStackedByValueResponse/response" variable="plot_2DStackedByValueOutputMessage"/>
            <to part="parameters" query="/ns1:WorkFlowOutputType/jpegImage" variable="workFlowOutputMessage"/>
         </copy>
      </assign>
      <reply operation="startWorkFlow" partnerLink="WorkFlowClientPartnerLinkType" portType="ns2:startWorkFlowPortType" variable="workFlowOutputMessage"/>
   </sequence>
</process>
