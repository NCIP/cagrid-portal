<?xml version="1.0" encoding="UTF-8"?>
<!--
BPEL Process Definition
Edited using ActiveBPEL(tm) Designer Version 2.0.0 (http://www.active-endpoints.com)
-->
<process name="AnnualDemo" suppressJoinFailure="yes" targetNamespace="http://AnnualDemo" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:ns1="http://rproteomics.cagrid.nci.nih.gov/RPData" xmlns:ns2="http://annualdemo.cagrid.nci.nih.gov/bpel" xmlns:ns3="http://www.globus.org/namespaces/cagrid/RProteomics/RProteomics" xmlns:ns4="http://CQL.caBIG/1/gov.nih.nci.cagrid.CQL" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   <partnerLinks>
      <!-- Declare all partnerLinks used in this workflow:                                      -->
      <!-- 1. client is a service to take input from the user                                   -->
      <!-- 2. RproteomicsPartnerLinkType is partnerLink to Rproteomcis Analytic Service at Duke -->
      <!-- 3. RproteomicsDataLinkType is partnerLink to Rproteomcis Data Service                -->
      <partnerLink myRole="client" name="WorkFlowClientPartnerLinkType" partnerLinkType="ns2:WorkFlowClientPartnerLinkType"/>
      <partnerLink name="RproteomicsDataLinkType" partnerLinkType="ns2:RproteomicsDataLinkType" partnerRole="data"/>
      <partnerLink name="RproteomicsPartnerLinkType" partnerLinkType="ns2:RproteomicsPartnerLinkType" partnerRole="service"/>
   </partnerLinks>
   <variables>
      <!-- Declare all the variables here -->
      <variable messageType="ns1:workFlowInputMessage" name="workFlowInputMessage"/>
      <variable messageType="ns1:workFlowOutputMessage" name="workFlowOutputMessage"/>
      <variable messageType="ns1:queryInputMessage" name="queryInputMessage"/>
      <variable messageType="ns1:queryOutputMessage" name="queryOutputMessage"/>
      <variable messageType="ns3:echoByValueInputMessage" name="echoByValueInputMessage"/>
      <variable messageType="ns3:echoByValueOutputMessage" name="echoByValueOutputMessage"/>
      <!-- For Loops -->
      <variable name="indexCounter" type="xsd:integer"/>
      <variable name="count" type="xsd:integer"/>
      <variable messageType="ns3:general_interpolateByValueInputMessage" name="general_interpolateByValueInputMessage"/>
      <variable messageType="ns3:general_interpolateByValueOutputMessage" name="general_interpolateByValueOutputMessage"/>
      <variable messageType="ns3:removeBackground_runningQuantileByValueInputMessage" name="removeBackground_runningQuantileByValueInputMessage"/>
      <variable messageType="ns3:removeBackground_runningQuantileByValueOutputMessage" name="removeBackground_runningQuantileByValueOutputMessage"/>
   </variables>
   <sequence>
      <!-- This is used to get input from the user. -->
      <receive createInstance="yes" operation="startWorkFlow" partnerLink="WorkFlowClientPartnerLinkType" portType="ns2:startWorkFlowPortType" variable="workFlowInputMessage"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from part="parameters" query="/ns1:WorkFlowInputType/queryType" variable="workFlowInputMessage"/>
            <to part="parameters" query="/ns1:query/query" variable="queryInputMessage"/>
         </copy>
      </assign>
      <invoke inputVariable="queryInputMessage" operation="query" outputVariable="queryOutputMessage" partnerLink="RproteomicsDataLinkType" portType="ns1:RPDataPortType"/>
      <assign>
         <copy>
            <from expression="count(bpws:getVariableData('queryOutputMessage', 'parameters', '/ns1:queryResponse')/*[1]/ns4:CQLQueryResult/scanFeaturesXml)"/>
            <to variable="count"/>
         </copy>
      </assign>
      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
        <flow>
         <assign>
            <copy>
               <from expression="bpws:getVariableData('queryOutputMessage', 'parameters', '/ns1:queryResponse')/response/ns4:CQLQueryResult[bpws:getVariableData('indexCounter')]/scanFeaturesXml"/>
               <to part="parameters" query="/ns3:echoByValue/scanFeaturesXml[bpws:getVariableData('indexCounter')]" variable="echoByValueInputMessage"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>
         </assign>
         </flow>
      </while>
      <invoke inputVariable="echoByValueInputMessage" operation="echoByValue" outputVariable="echoByValueOutputMessage" partnerLink="RproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from expression="&quot;1&quot;"/>
            <to variable="indexCounter"/>
         </copy>
         <copy>
            <from expression="count(bpws:getVariableData('echoByValueOutputMessage', 'parameters', '/ns3:echoByValueResponse')/response)"/>
            <to variable="count"/>
         </copy>
      </assign>

      <while condition="bpws:getVariableData('indexCounter') &lt;= bpws:getVariableData('count')">
        <flow>
        <assign>
            <copy>
                <from expression="bpws:getVariableData('echoByValueOutputMessage', 'parameters','/ns3:echoByValueResponse')/response[bpws:getVariableData('indexCounter')]"/>
                <to variable="general_interpolateByValueInputMessage" part="parameters" query="/ns3:general_interpolateByValue/scanFeaturesXml[bpws:getVariableData('indexCounter')]"/>
            </copy>
            <copy>
               <from expression="bpws:getVariableData('indexCounter') + 1"/>
               <to variable="indexCounter"/>
            </copy>

        </assign>
        </flow>
    </while>

      <invoke inputVariable="general_interpolateByValueInputMessage" operation="general_interpolateByValue" outputVariable="general_interpolateByValueOutputMessage" partnerLink="RproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <assign>
         <copy>
            <from part="parameters" query="/ns3:general_interpolateByValueResponse/response" variable="general_interpolateByValueOutputMessage"/>
            <to part="parameters" query="/ns3:removeBackground_runningQuantileByValue/scanFeaturesXml" variable="removeBackground_runningQuantileByValueInputMessage"/>
         </copy>
      </assign>
      <invoke inputVariable="removeBackground_runningQuantileByValueInputMessage" operation="removeBackground_runningQuantileByValue" outputVariable="removeBackground_runningQuantileByValueOutputMessage" partnerLink="RproteomicsPartnerLinkType" portType="ns3:RProteomicsPortType"/>
      <reply operation="startWorkFlow" partnerLink="WorkFlowClientPartnerLinkType" portType="ns2:startWorkFlowPortType" variable="workFlowOutputMessage"/>
   </sequence>
</process>
