package gov.nih.nci.cagrid.annualdemo.service;

import edu.columbia.geworkbench.cagrid.cluster.hierarchical.TreeViewInput;
import gov.nih.nci.cagrid.annualdemo.util.GeWorkbenchParser;
import gov.nih.nci.cagrid.annualdemo.util.GenePatternParser;
import gov.nih.nci.cagrid.annualdemo.util.MageParser;
import gov.nih.nci.cagrid.annualdemo.util.MageToStatml;
import gov.nih.nci.cagrid.annualdemo.util.TreeViewHelper;
import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.data.utilities.CQLObjectResultIterator;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gridextensions.Cluster;
import gridextensions.Data;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

/** 
 * TODO:I am the service side implementation class.  IMPLEMENT AND DOCUMENT ME
 * 
 * @created by Introduce Toolkit version 1.0
 * 
 */
public class MageTranslationServicesImpl extends MageTranslationServicesImplBase {

	
	public MageTranslationServicesImpl() throws RemoteException {
		super();
	}
	

	public gridextensions.Data mageToStatML(gov.nih.nci.cagrid.cqlresultset.CQLQueryResults cQLQueryResultCollection) throws RemoteException {
		int count = cQLQueryResultCollection.getObjectResult().length;
		System.out.println("Got " + count + " Results from caArray");
		
		// hack - Dave: fix this
		cQLQueryResultCollection.setTargetClassname("java.lang.Object");
		
		// get mage
		CQLQueryResultsIterator iter = new CQLQueryResultsIterator(cQLQueryResultCollection, true);
		String mage = (String) iter.next();
		
		//System.out.println(mage);
		try {
			MageParser mageParser = new MageParser();
			mageParser.parseMicroarray(mage);
			GenePatternParser gpParser = new GenePatternParser();
			gpParser.setMicroarrayData(mageParser.getMicroarrayData());
			return gpParser.convertToStatml();
		} catch (Exception e) {
			e.printStackTrace();
			throw new RemoteException(e.getMessage());
		}
	}

	public edu.columbia.geworkbench.cagrid.microarray.MicroarraySet mageToMicroArray(gov.nih.nci.cagrid.cqlresultset.CQLQueryResults cQLQueryResultCollection) throws RemoteException {
		int count = cQLQueryResultCollection.getObjectResult().length;
		System.out.println("Got " + count + " Results from caArray");
		
		// hack - Dave: fix this
		cQLQueryResultCollection.setTargetClassname("java.lang.Object");
		
		// get mage
		CQLQueryResultsIterator iter = new CQLQueryResultsIterator(cQLQueryResultCollection, true);
		String mage = (String) iter.next();
		
		//System.out.println(mage);
		try {
			MageParser mageParser = new MageParser();
			mageParser.parseMicroarray(mage);
			GeWorkbenchParser gwParser = new GeWorkbenchParser();
			gwParser.setMicroarrayData(mageParser.getMicroarrayData());
			return gwParser.convertToMicroarraySet();
		} catch (Exception e) {
			e.printStackTrace();
			throw new RemoteException(e.getMessage());
		}
	}

	public edu.columbia.geworkbench.cagrid.cluster.hierarchical.TreeViewInput clusterToTreeView(edu.columbia.geworkbench.cagrid.cluster.hierarchical.HierarchicalCluster hierarchicalCluster,edu.columbia.geworkbench.cagrid.microarray.MicroarraySet microarraySet) throws RemoteException {
		GeWorkbenchParser parser = new GeWorkbenchParser();

		try {
			// get XML
			StringWriter microarraySw = new StringWriter();
			Utils.serializeObject(microarraySet, new QName("MicroarraySet"), microarraySw);
	
			StringWriter clusterSw = new StringWriter();
			Utils.serializeObject(hierarchicalClusteringParameter, new QName("HierarchicalCluster"), clusterSw);
			
			// parse xml
			parser.parseCluster(microarraySw.toString());
			parser.parseCluster(clusterSw.toString());
		} catch (Exception e) {
			e.printStackTrace();
			throw new RemoteException(e.getMessage());
		}
		
		// translate
		TreeViewHelper helper = new TreeViewHelper(parser.getMicroarrayData(), parser.getClusterData());

		StringWriter cdtSw = new StringWriter();
		PrintWriter cdtOut = new PrintWriter(cdtSw);
		StringWriter atrSw = new StringWriter();
		PrintWriter atrOut = new PrintWriter(atrSw);
		StringWriter gtrSw = new StringWriter();
		PrintWriter gtrOut = new PrintWriter(gtrSw);
		
		try {
			helper.writeTreeView(cdtOut, atrOut, gtrOut);
		} catch (Exception e) {
			e.printStackTrace();
			throw new RemoteException(e.getMessage());
		}
		
		cdtOut.flush();
		atrOut.flush();
		gtrOut.flush();
		
		// return
		TreeViewInput ret = new TreeViewInput(); 
		ret.setCdt(cdtSw.toString());
		ret.setAtr(atrSw.toString());
		ret.setGtr(gtrSw.toString());
		
		return null;
	}

	public edu.columbia.geworkbench.cagrid.cluster.hierarchical.HierarchicalCluster gwClusterToGpCluster(gridextensions.ConsensusClusterResultCollection consensusClusterResultCollection) throws RemoteException {
		//TODO: Implement this autogenerated method
		throw new RemoteException("Not yet implemented");
	}

	public edu.columbia.geworkbench.cagrid.microarray.MicroarraySet statmlToMicroarraySet(gridextensions.Data data) throws RemoteException {
		//TODO: Implement this autogenerated method
		throw new RemoteException("Not yet implemented");
	}

}

