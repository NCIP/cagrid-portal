package gov.nih.nci.cagrid.portal2.webauthn.client;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.cagrid.portal2.webauthn.common.WebAuthnSvcI;
import gov.nih.nci.cagrid.portal2.webauthn.stubs.WebAuthnSvcPortType;
import gov.nih.nci.cagrid.portal2.webauthn.stubs.service.WebAuthnSvcServiceAddressingLocator;
import gov.nih.nci.cagrid.portal2.webauthn.types.UserInfoType;
import gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.BasicAuthenticationCredential;
import gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.Credential;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;
import org.globus.gsi.GlobusCredential;
import org.oasis.wsrf.properties.GetResourcePropertyResponse;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class WebAuthnSvcClient extends ServiceSecurityClient implements WebAuthnSvcI {	
	protected WebAuthnSvcPortType portType;
	private Object portTypeMutex;

	public WebAuthnSvcClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WebAuthnSvcClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	   	initialize();
	}
	
	public WebAuthnSvcClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public WebAuthnSvcClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
		initialize();
	}
	
	private void initialize() throws RemoteException {
	    this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private WebAuthnSvcPortType createPortType() throws RemoteException {

		WebAuthnSvcServiceAddressingLocator locator = new WebAuthnSvcServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		WebAuthnSvcPortType port = null;
		try {
			port = locator.getWebAuthnSvcPortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}
	
	public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
		return portType.getResourceProperty(resourcePropertyQName);
	}

	public static void usage(){
		System.out.println(WebAuthnSvcClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  WebAuthnSvcClient client = new WebAuthnSvcClient(args[1]);
			  Credential credential = new Credential();
			  BasicAuthenticationCredential bac = new BasicAuthenticationCredential();
			  bac.setUserId("grid_mgr");
			  bac.setPassword("Gr!d_mgr123");
			  credential.setBasicAuthenticationCredential(bac);
			  String idpUrl = "https://cbiovdev5035.nci.nih.gov:8443/wsrf/services/cagrid/Dorian";
			  String loginKey = client.createLoginKeyForGridUser(idpUrl, credential);
			  UserInfoType userInfo = client.getUserInfo(loginKey);
			  System.out.println("SAML: " + userInfo.getSaml().getXml());
			  
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public gov.nih.nci.cagrid.portal2.webauthn.types.UserInfoType getUserInfo(java.lang.String loginKey) throws RemoteException, gov.nih.nci.cagrid.portal2.webauthn.types.faults.InvalidKeyFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getUserInfo");
    gov.nih.nci.cagrid.portal2.webauthn.stubs.GetUserInfoRequest params = new gov.nih.nci.cagrid.portal2.webauthn.stubs.GetUserInfoRequest();
    params.setLoginKey(loginKey);
    gov.nih.nci.cagrid.portal2.webauthn.stubs.GetUserInfoResponse boxedResult = portType.getUserInfo(params);
    return boxedResult.getUserInfo();
    }
  }

  public java.lang.String createLoginKeyForLocalUser(gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.Credential credential) throws RemoteException, gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.faults.InvalidCredentialFault, gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.faults.InsufficientAttributeFault, gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.faults.AuthenticationProviderFault, gov.nih.nci.cagrid.portal2.webauthn.types.faults.WebAuthnSvcFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createLoginKeyForLocalUser");
    gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForLocalUserRequest params = new gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForLocalUserRequest();
    gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForLocalUserRequestCredential credentialContainer = new gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForLocalUserRequestCredential();
    credentialContainer.setCredential(credential);
    params.setCredential(credentialContainer);
    gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForLocalUserResponse boxedResult = portType.createLoginKeyForLocalUser(params);
    return boxedResult.getResponse();
    }
  }

  public java.lang.String createLoginKeyForGridUser(java.lang.String idpUrl,gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.Credential credential) throws RemoteException, gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.faults.InvalidCredentialFault, gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.faults.InsufficientAttributeFault, gov.nih.nci.cagrid.portal2.webauthn.types.authenticationservice.faults.AuthenticationProviderFault, gov.nih.nci.cagrid.portal2.webauthn.types.faults.WebAuthnSvcFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createLoginKeyForGridUser");
    gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForGridUserRequest params = new gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForGridUserRequest();
    params.setIdpUrl(idpUrl);
    gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForGridUserRequestCredential credentialContainer = new gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForGridUserRequestCredential();
    credentialContainer.setCredential(credential);
    params.setCredential(credentialContainer);
    gov.nih.nci.cagrid.portal2.webauthn.stubs.CreateLoginKeyForGridUserResponse boxedResult = portType.createLoginKeyForGridUser(params);
    return boxedResult.getResponse();
    }
  }

}
