<?xml version="1.0"?>
<!-- adopted from GTBS and modified -->
<project default="help" name="Introduce Build File" basedir=".">

	<!-- Define the environment variable -->
	<property environment="env" />

	<!-- 
		Properties in these files will override the properties defined in this file.
    -->
	<property name="introduce.ns.excludes" value="-x gme://caGrid.caBIG/1.0/gov.nih.nci.cagrid.metadata.security" />
	<property name="service.name" value="ServiceSecurity" />
	<property name="schema.path" value="${service.name}" />

	<!-- Important directories and files -->
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="ext.lib.dir" value="ext/lib" />
	<property name="schema.dir" value="schema" />
	<property name="mappings.file" value="${basedir}/namespace2package.mappings" />

	<!--these are overriden from introduce -->
	<property name="project.name" value="caGrid-1.0-ServiceSecurityProvider" />

	<property name="jar.name" value="${project.name}" />
	<property name="common.jar.name" value="${jar.name}-common.jar" />
	<property name="client.jar.name" value="${jar.name}-client.jar" />
	<property name="service.jar.name" value="${jar.name}-service.jar" />
	<property name="stubs.jar.name" value="${jar.name}-stubs.jar" />


	<!-- Basic Build directories -->

	<!-- Auxiliary directory where all the intermediate files will be placed -->
	<property name="build.dir" location="build" />
	<!-- Directory for compiled service classes -->
	<property name="build.dest" location="${build.dir}/classes" />
	<!-- Directory for compiled JAR files (additional library files required by
	     the service will also be placed here) -->
	<property name="build.lib.dir" location="${build.dir}/lib" />
	<!-- Directory where stub source and class files are placed -->
	<property name="stubs.dir" location="${build.dir}/stubs-${service.name}" />
	<!-- Stub source files -->
	<property name="stubs.src" location="${stubs.dir}/src" />
	<!-- Compiled stub classes -->
	<property name="stubs.dest" location="${stubs.dir}/classes" />

	<!-- Where we have to copy schema files inside the build directory -->
	<property name="schema.dest" location="${build.dir}/schema" />


	<!-- We want detailed error messages -->
	<property name="java.debug" value="on" />

	<!-- ============================================================== -->
	<!-- Globus properties                                              -->
	<!-- ============================================================== -->
	<target name="checkGlobus" depends="setGlobus">
		<condition property="globus.not.found">
			<or>
				<not>
					<isset property="ext.globus.dir" />
				</not>
				<equals arg1="${ext.globus.dir}" arg2="" />
			</or>
		</condition>
		<fail message="Globus installation is not set in either GLOBUS_LOCATION or ext.globus.dir" if="globus.not.found" />
		<echo message="Globus: ${ext.globus.dir}" />
	</target>
	<target name="setGlobus" if="env.GLOBUS_LOCATION">
		<!-- GT4 build files and directories-->
		<property name="ext.globus.dir" value="${env.GLOBUS_LOCATION}" />
		<property name="build.stubs" location="${ext.globus.dir}/share/globus_wsrf_tools/build-stubs.xml" />
		<property name="schema.src" location="${ext.globus.dir}/share/schema" />
		<property name="build.packages" location="${ext.globus.dir}/share/globus_wsrf_common/build-packages.xml" />
		<!-- Copied from build.stubs file, as there is no way to "append" to the value in the remote file -->
		<property name="GT4.ns.excludes" value="-x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.wsdl -x http://schemas.xmlsoap.org/ws/2004/04/trust -x http://schemas.xmlsoap.org/ws/2002/12/policy -x http://schemas.xmlsoap.org/ws/2002/07/utility -x http://schemas.xmlsoap.org/ws/2004/04/sc -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd -x http://www.w3.org/2000/09/xmldsig# -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" />
	</target>


	<!-- Sets up the build directory structure -->
	<target name="init" depends="checkGlobus, defineClasspaths">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dest}" />
		<mkdir dir="${build.lib.dir}" />

		<mkdir dir="${stubs.dir}" />
		<mkdir dir="${stubs.src}" />
		<mkdir dir="${stubs.dest}" />

		<mkdir dir="${schema.dest}" />
		<copy toDir="${schema.dest}">
			<fileset dir="${schema.src}" casesensitive="yes">
				<include name="wsrf/**/*" />
				<include name="ws/**/*" />
			</fileset>
			<fileset dir="${schema.dir}" casesensitive="yes">
				<include name="**" />
			</fileset>
		</copy>
	</target>

	<target name="defineClasspaths">
		<path id="base.classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${ext.globus.dir}/lib">
				<include name="*.jar" />
				<exclude name="${stubs.jar.name}" />
				<exclude name="${common.jar.name}" />
				<exclude name="${client.jar.name}" />
				<exclude name="${service.jar.name}" />
			</fileset>
		</path>
		<path id="service.build.classpath">
			<pathelement location="${stubs.dest}" />
			<path refid="base.classpath" />
		</path>
		<path id="service.run.classpath">
			<pathelement location="${build.dest}" />
			<path refid="service.build.classpath" />
		</path>
	</target>


	<!-- Generate bindings for our WSDL file -->
	<!-- This is done with a GT4 tool -->
	<target name="serviceGenerateBindings" depends="init">
		<ant antfile="${build.stubs}" target="generateBinding">
			<property name="source.binding.dir" value="${schema.dest}/${schema.path}" />
			<property name="target.binding.dir" value="${schema.dest}/${schema.path}" />
			<property name="porttype.wsdl" value="${interface.name}.wsdl" />
			<property name="binding.root" value="${interface.name}" />
		</ant>
	</target>

	<target name="merge" depends="init">
		<!-- Merge our namespace mappings file with the GT4 mappins file -->
		<ant antfile="${build.stubs}" target="mergePackageMapping">
			<property name="mapping.src" location="${mappings.file}" />
			<property name="mapping.dst" location="${build.dir}/namespace2package.mappings" />
		</ant>
	</target>

	<!-- Generate the stub source files -->
	<!-- This is done with a GT4 tool -->
	<target name="serviceStubs" depends="serviceGenerateBindings,merge">
		<!-- Invoke the stub generator -->
		<ant antfile="${build.stubs}" target="generateStubs">
			<property name="mapping.file" location="${build.dir}/namespace2package.mappings" />
			<property name="source.stubs.dir" location="${schema.dest}/${schema.path}" />
			<property name="target.stubs.dir" location="${stubs.src}" />
			<property name="wsdl.file" value="${interface.name}_service.wsdl" />
			<property name="ns.excludes" value="${GT4.ns.excludes} ${introduce.ns.excludes}" />
		</ant>
	</target>

	<!-- Generate the stub source files -->
	<!-- This is done with a GT4 tool -->
	<target name="stubs" depends="init">
		<echo message="Generating stubs for ${service.name}." />
		<antcall target="serviceStubs">
			<param name="interface.name" value="${service.name}" />
		</antcall>
	</target>


	<!-- Compile the stubs generated in the previous step -->
	<target name="compileStubs" depends="stubs">
		<javac srcdir="${stubs.src}" destdir="${stubs.dest}" debug="${java.debug}" classpathref="base.classpath">
			<include name="**/*.java" />
		</javac>
	</target>


	<!-- Compile the implementation classes (service, resource, etc.) -->
	<target name="compile" depends="compileStubs" description="Compiles the service.">
		<javac srcdir="${src.dir}" classpathref="service.build.classpath" includes="**" destdir="${build.dest}" debug="${java.debug}" deprecation="${deprecation}" />

		<!-- Copy the source code, wsdd, properties, etc to the build dir for include in the jar -->
		<copy toDir="${build.dest}">
			<fileset dir="${src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>



	<!-- Create a JAR file with the implementation classes -->
	<target name="jar" depends="compile">
		<jar jarfile="${build.lib.dir}/${client.jar.name}" basedir="${build.dest}">
			<include name="**/client/**" />
		</jar>
		<jar jarfile="${build.lib.dir}/${service.jar.name}" basedir="${build.dest}">
			<include name="**/service/**" />
		</jar>
		<jar jarfile="${build.lib.dir}/${common.jar.name}" basedir="${build.dest}">
			<include name="**/*" />
			<exclude name="**/client/**" />
			<exclude name="**/service/**" />
		</jar>
	</target>

	<!-- Create a JAR file with the stub classes -->
	<target name="jarStubs" depends="compileStubs">
		<jar destfile="${build.lib.dir}/${stubs.jar.name}" basedir="${stubs.dest}" />
	</target>


	<!-- Empty target, in case we simply want to generate the JAR files -->
	<target name="jars" depends="jarStubs, jar" />


	<!-- Clean up all the intermediate files -->
	<target name="clean" description="Removes all generated build artifacts.">
		<delete dir="tmp" />
		<delete dir="${build.dir}" />
		<delete file="${gar.name}" />
	</target>

	<!-- Default target "all" builds and jars everything ....does not make a GAR-->
	<target name="all" depends="jars" description="Builds the entire service." />

	<target name="help" description="Prints usage information.">
		<echo message="================================================================================" />
		<echo message="|    Introduce Created Grid Service                                            |" />
		<echo message="          Service: ${service.name}" />
		<echo message="--------------------------------------------------------------------------------" />
		<echo message="|  USAGE:                                                                      |" />
		<echo message="|    Type 'ant -h' for general help with Ant                                   |" />
		<echo message="|    Type 'ant -p' for a description of this service's build targets.          |" />
		<echo message="================================================================================" />
	</target>
</project>