<project name="installer-scripts">

	<property name="cagrid.home" value="../../.." />
	<property name="selected.services" value="dorian,gts" />
	<property name="service.dest.dir" value="service-temp" />
	<property name="lib.dir" value="../lib" />

	<path id="xmltaskdef.cp">
		<fileset dir="${lib.dir}">
			<include name="xmltask-v1.14.jar" />
		</fileset>
	</path>

	<taskdef name="xmltask"
		classname="com.oopsconsultancy.xmltask.ant.XmlTask"
		classpathref="xmltaskdef.cp" />

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<fileset dir="${cagrid.home}/share/lib">
				<include name="ant-contrib*.jar" />
			</fileset>
		</classpath>
	</taskdef>

	<target name="copy-selected-services">

		<mkdir dir="${service.dest.dir}" />

		<for list="${selected.services}" param="serviceName"
			parallel="false">
			<sequential>
				<copy todir="${service.dest.dir}" overwrite="false">
					<fileset dir="${cagrid.home}/projects">
						<include name="@{serviceName}/**" />
					</fileset>
				</copy>
			</sequential>
		</for>

	</target>

	<target name="copy-browser">
		<mkdir dir="${service.dest.dir}/cagrid-browser" />
		<copy todir="${service.dest.dir}/cagrid-browser"
			overwrite="false">
			<fileset dir="${browser.home}" />
		</copy>
	</target>

	<target name="configure-dorian-conf">

		<property name="dorian.config.ns"
			value="http://cagrid.nci.nih.gov/dorian/conf" />

		<property name="config.file"
			value="${service.dest.dir}/dorian/etc/dorian-conf.xml" />
		<xmltask source="${config.file}" dest="${config.file}">
			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianInternalId']">
				<![CDATA[
						<DorianInternalId xmlns="${dorian.config.ns}">${dorian.db.id}</DorianInternalId>
					]]>

			</replace>
			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='database']/*[local-name()='host']">
				<![CDATA[
					<host xmlns="${dorian.config.ns}">${dorian.db.host}</host>
				]]>

			</replace>
			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='database']/*[local-name()='port']">
				<![CDATA[
					<port xmlns="${dorian.config.ns}">${dorian.db.port}</port>
				]]>

			</replace>
			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='database']/*[local-name()='username']">
				<![CDATA[
					<username xmlns="${dorian.config.ns}">${dorian.db.username}</username>
				]]>

			</replace>
			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='database']/*[local-name()='password']">
				<![CDATA[
					<password xmlns="${dorian.config.ns}">${dorian.db.password}</password>
				]]>

			</replace>

			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='IdentityProviderName']">
				<![CDATA[
						<IdentityProviderName xmlns="${dorian.config.ns}">${dorian.idp.name}</IdentityProviderName>
					]]>

			</replace>

			<attr attr="min"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='UIDLength']"
				value="${dorian.idp.uid.min}" />

			<attr attr="max"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='UIDLength']"
				value="${dorian.idp.uid.max}" />

			<attr attr="min"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='PasswordLength']"
				value="${dorian.idp.pwd.min}" />

			<attr attr="max"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='PasswordLength']"
				value="${dorian.idp.pwd.max}" />
				
			<attr attr="hours"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='PasswordSecurityPolicy']/*[local-name()='LockoutTime']"
				value="${dorian.idp.pwd.lockout.hours}" />
			<attr attr="minutes"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='PasswordSecurityPolicy']/*[local-name()='LockoutTime']"
				value="${dorian.idp.pwd.lockout.minutes}" />
			<attr attr="seconds"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='PasswordSecurityPolicy']/*[local-name()='LockoutTime']"
				value="${dorian.idp.pwd.lockout.seconds}" />
				
			<replace path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='PasswordSecurityPolicy']/*[local-name()='MaxConsecutiveInvalidLogins']/text()" withText="${dorian.idp.max.consec.invalid.logins}"/>
			<replace path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='PasswordSecurityPolicy']/*[local-name()='MaxTotalInvalidLogins']/text()" withText="${dorian.idp.max.total.invalid.logins}"/>
				
		</xmltask>

		<if>
			<equals arg1="${dorian.idp.regpolicy}"
				arg2="Manual Registration" trim="true" />
			<then>
				<xmltask source="${config.file}"
					dest="${config.file}">
					<replace
						path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='RegistrationPolicy']">
						<![CDATA[
						<RegistrationPolicy xmlns="${dorian.config.ns}">gov.nih.nci.cagrid.dorian.service.idp.ManualRegistrationPolicy</RegistrationPolicy>
						]]>
					</replace>
				</xmltask>
			</then>
			<else>
				<xmltask source="${config.file}"
					dest="${config.file}">
					<replace
						path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='RegistrationPolicy']">
						<![CDATA[
						<RegistrationPolicy xmlns="${dorian.config.ns}">gov.nih.nci.cagrid.dorian.service.idp.AutomaticRegistrationPolicy</RegistrationPolicy>
						]]>
					</replace>
				</xmltask>
			</else>
		</if>

		<xmltask source="${config.file}" dest="${config.file}">
			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='AssertingCredentials']/*[local-name()='AutoRenew']">
				<![CDATA[
						<AutoRenew xmlns="${dorian.config.ns}">${dorian.idp.saml.autorenew}</AutoRenew>
					]]>
			</replace>

			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityProviderConfiguration']/*[local-name()='AssertingCredentials']/*[local-name()='KeyPassword']">
				<![CDATA[
						<KeyPassword xmlns="${dorian.config.ns}">${dorian.idp.saml.keypwd}</KeyPassword>
					]]>
			</replace>

			<attr attr="min"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='IdentityProviderNameLength']"
				value="${dorian.ifs.idpname.min}" />

			<attr attr="max"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='IdentityProviderNameLength']"
				value="${dorian.ifs.idpname.max}" />
		</xmltask>

		<if>
			<equals arg1="${dorian.ifs.idpolicy}" arg2="Name"
				trim="true" />
			<then>
				<xmltask source="${config.file}"
					dest="${config.file}">
					<replace
						path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='IdentityAssignmentPolicy']">
						<![CDATA[
						<IdentityAssignmentPolicy xmlns="${dorian.config.ns}">name</IdentityAssignmentPolicy>
					]]>
					</replace>
				</xmltask>
			</then>
			<else>
				<xmltask source="${config.file}"
					dest="${config.file}">
					<replace
						path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='IdentityAssignmentPolicy']">
						<![CDATA[
						<IdentityAssignmentPolicy xmlns="${dorian.config.ns}">id</IdentityAssignmentPolicy>
					]]>
					</replace>
				</xmltask>
			</else>
		</if>

		<xmltask source="${config.file}" dest="${config.file}">
			<attr attr="years"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='CredentialPolicy']/*[local-name()='CredentialLifetime']"
				value="${dorian.ifs.credlifetime.years}" />
			<attr attr="months"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='CredentialPolicy']/*[local-name()='CredentialLifetime']"
				value="${dorian.ifs.credlifetime.months}" />
			<attr attr="days"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='CredentialPolicy']/*[local-name()='CredentialLifetime']"
				value="${dorian.ifs.credlifetime.days}" />
			<attr attr="hours"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='CredentialPolicy']/*[local-name()='CredentialLifetime']"
				value="${dorian.ifs.credlifetime.hours}" />
			<attr attr="minutes"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='CredentialPolicy']/*[local-name()='CredentialLifetime']"
				value="${dorian.ifs.credlifetime.minutes}" />
			<attr attr="seconds"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='CredentialPolicy']/*[local-name()='CredentialLifetime']"
				value="${dorian.ifs.credlifetime.seconds}" />

			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='CredentialPolicy']/*[local-name()='HostCertificateAutoApproval']">
				<![CDATA[
						<HostCertificateAutoApproval xmlns="${dorian.config.ns}">${dorian.ifs.hostcert.autoapprove}</HostCertificateAutoApproval>
					]]>
			</replace>

			<attr attr="hours"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='ProxyPolicy']/*[local-name()='ProxyLifetime']"
				value="${dorian.ifs.proxylifetime.hours}" />
			<attr attr="minutes"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='ProxyPolicy']/*[local-name()='ProxyLifetime']"
				value="${dorian.ifs.proxylifetime.minutes}" />
			<attr attr="seconds"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='ProxyPolicy']/*[local-name()='ProxyLifetime']"
				value="${dorian.ifs.proxylifetime.seconds}" />

			<remove
				path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']/*[local-name()='CRLPublish']" />

		</xmltask>



		<if>
			<not>
				<equals arg1="${dorian.ifs.gts.url}" arg2=""
					trim="true" />
			</not>
			<then>
				<xmltask source="${config.file}"
					dest="${config.file}">
					<insert
						path="/*[local-name()='DorianConfiguration']/*[local-name()='IdentityFederationConfiguration']">
						<![CDATA[
				<CRLPublish xmlns="${dorian.config.ns}">
					<gts xmlns="${dorian.config.ns}">${dorian.ifs.gts.url}</gts>
				</CRLPublish>
						]]>
					</insert>
				</xmltask>
			</then>
		</if>


		<xmltask source="${config.file}" dest="${config.file}">
			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='CertificateAuthorityType']">
				<![CDATA[
						<CertificateAuthorityType xmlns="${dorian.config.ns}">${dorian.ca.type}</CertificateAuthorityType>
					]]>
			</replace>

			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='CertificateAuthorityPassword']">
				<![CDATA[
						<CertificateAuthorityPassword xmlns="${dorian.config.ns}">${dorian.ca.key.pwd}</CertificateAuthorityPassword>
					]]>
			</replace>


			<remove
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='CertificatePolicyOID']" />
		</xmltask>
		<if>
			<not>
				<equals arg1="${dorian.ca.oid}" arg2="" trim="true" />
			</not>
			<then>
				<xmltask source="${config.file}"
					dest="${config.file}">

					<insert
						path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='CertificateAuthorityPassword']"
						position="after">
						<![CDATA[
							<CertificatePolicyOID xmlns="${dorian.config.ns}">${dorian.ca.oid}</CertificatePolicyOID>
						]]>
					</insert>
				</xmltask>
			</then>
		</if>
		<xmltask source="${config.file}" dest="${config.file}">
			<replace
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='UserKeySize']">
				<![CDATA[
						<UserKeySize xmlns="${dorian.config.ns}">${dorian.ca.userkey.size}</UserKeySize>
					]]>
			</replace>

		</xmltask>
		<xmltask source="${config.file}" dest="${config.file}">
			<remove
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='AutoCreate']" />
		</xmltask>
		<if>
			<and>
				<not>
					<istrue value="${dorian.ca.present}" />
				</not>
				<not>
					<istrue value="${dorian.use.gen.ca}" />
				</not>
			</and>
			<then>
				<xmltask source="${config.file}"
					dest="${config.file}">

					<insert position="after"
						path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='UserKeySize']">
						<![CDATA[
						<AutoCreate xmlns="${dorian.config.ns}">
							<CASubject xmlns="${dorian.config.ns}">${dorian.ca.subject}</CASubject>
							<CAKeySize xmlns="${dorian.config.ns}">${dorian.ca.cakey.size}</CAKeySize>
							<lifetime xmlns="${dorian.config.ns}" 
					               years="${dorian.ca.lifetime.years}" 
					               months="${dorian.ca.lifetime.months}" 
					               days="${dorian.ca.lifetime.days}" 
					               hours="${dorian.ca.lifetime.hours}" 
					               minutes="${dorian.ca.lifetime.minutes}" 
					               seconds="${dorian.ca.lifetime.seconds}"/>
						</AutoCreate>
						]]>
					</insert>
				</xmltask>
			</then>
		</if>

		<xmltask source="${config.file}" dest="${config.file}">
			<attr attr="years"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='AutoRenewal']"
				value="${dorian.ca.autorenew.years}" />
			<attr attr="months"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='AutoRenewal']"
				value="${dorian.ca.autorenew.months}" />
			<attr attr="days"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='AutoRenewal']"
				value="${dorian.ca.autorenew.days}" />
			<attr attr="hours"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='AutoRenewal']"
				value="${dorian.ca.autorenew.hours}" />
			<attr attr="minutes"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='AutoRenewal']"
				value="${dorian.ca.autorenew.minutes}" />
			<attr attr="seconds"
				path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='AutoRenewal']"
				value="${dorian.ca.autorenew.seconds}" />
		</xmltask>

		<if>
			<not>
				<equals arg1="${dorian.ca.type}" arg2="DBCA"
					trim="true" />
			</not>
			<then>
				<xmltask source="${config.file}"
					dest="${config.file}">
					<remove
						path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='Properties']" />
					<insert position="after"
						path="/*[local-name()='DorianConfiguration']/*[local-name()='DorianCAConfiguration']/*[local-name()='AutoRenewal']">
						<![CDATA[
<Properties xmlns="${dorian.config.ns}">
	<Property xmlns="${dorian.config.ns}" name="slot" value="${dorian.ca.eracom.slot}"/>
</Properties>
						]]>
					</insert>
				</xmltask>
			</then>
		</if>

	</target>


	<target name="deployTomcatEndorsedJars">
		<copy todir="${tomcat.home}/common/endorsed" overwrite="true">
			<fileset
				dir="${service.dest.dir}/${service.name}/ext/endorsed/lib">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="deployGlobusEndorsedJars">
		<copy todir="${globus.home}/endorsed" overwrite="true">
			<fileset
				dir="${service.dest.dir}/${service.name}/ext/endorsed/lib">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="generate-ca">

		<touch mkdirs="true" file="${ca.key.path}" />
		<touch mkdirs="true" file="${ca.cert.path}" />

		<ant inheritAll="false" inheritRefs="false"
			antfile="${gridca.build.file.path}" target="generateCA">
			<property name="dn.input" value="${ca.dn.input}" />
			<property name="days.input" value="${ca.days.valid}" />
			<property name="password.input" value="${ca.key.pwd}" />
			<property name="key.input" value="${ca.key.path}" />
			<property name="cert.input" value="${ca.cert.path}" />
		</ant>
	</target>

	<target name="generate-authn-service-ca">

		<touch mkdirs="true" file="${authn.svc.ca.key.path}" />
		<touch mkdirs="true" file="${authn.svc.ca.cert.path}" />

		<ant inheritAll="false" inheritRefs="false"
			antfile="${gridca.build.file.path}" target="generateCA">
			<property name="dn.input" value="${authn.svc.ca.dn}" />
			<property name="days.input"
				value="${authn.svc.ca.days.valid}" />
			<property name="password.input"
				value="${authn.svc.ca.key.pwd}" />
			<property name="key.input" value="${authn.svc.ca.key.path}" />
			<property name="cert.input"
				value="${authn.svc.ca.cert.path}" />
		</ant>
	</target>

	<target name="generate-host-creds">

		<touch mkdirs="true" file="${service.cert.path}" />
		<touch mkdirs="true" file="${service.key.path}" />

		<ant inheritAll="false" inheritRefs="false"
			antfile="${gridca.build.file.path}"
			target="createAndSignHostCertificate">
			<property name="key.input" value="${ca.key.path}" />
			<property name="password.input" value="${ca.key.pwd}" />
			<property name="ca.input" value="${ca.cert.path}" />
			<property name="hostname.input" value="${service.hostname}" />
			<property name="days.input"
				value="${service.cert.days.valid}" />
			<property name="hostkey.input" value="${service.key.path}" />
			<property name="cert.input" value="${service.cert.path}" />
		</ant>
	</target>

	<target name="globus-deploy-tomcat">

		<property name="target.name" value="deployTomcat" />

		<property name="old.tomcat.build.file"
			value="${globus.home}/share/globus_wsrf_common/tomcat/tomcat.xml" />
		<property name="new.tomcat.build.file"
			value="${globus.home}/share/globus_wsrf_common/tomcat/tomcat-fixed.xml" />

		<xmltask source="${old.tomcat.build.file}"
			dest="${new.tomcat.build.file}">
			<attr
				path="/project/target[@name='_baseTomcatDeploy']/copy[contains(@file, 'web.xml')]"
				attr="file"
				value="${globus.home}/share/globus_wsrf_common/tomcat/web.xml" />
		</xmltask>

		<ant antfile="${new.tomcat.build.file}" dir="."
			target="${target.name}">
			<property name="tomcat.dir" value="${tomcat.home}" />
		</ant>
	</target>

	<target name="globus-deploy-secure-tomcat">
		<antcall target="globus-deploy-tomcat">
			<param name="target.name" value="deploySecureTomcat" />
		</antcall>
	</target>

	<target name="fix-secure-web-xml">
		<antcall target="fix-web-xml">
			<param name="scheme" value="https" />
			<param name="tomcat.port" value="${tomcat.https.port}" />
		</antcall>
	</target>

	<target name="fix-web-xml">
		<property name="scheme" value="http" />
		<property name="tomcat.port" value="8080" />
		<property name="web.xml.file"
			value="${tomcat.home}/webapps/wsrf/WEB-INF/web.xml" />
		<xmltask source="${web.xml.file}" dest="${web.xml.file}">
			<remove
				path="/web-app/servlet[servlet-name='WSRFServlet']/init-param[param-name='defaultProtocol']" />
			<remove
				path="/web-app/servlet[servlet-name='WSRFServlet']/init-param[param-name='defaultPort']" />
			<insert
				path="/web-app/servlet[servlet-name='WSRFServlet']/servlet-class"
				position="after">
				<![CDATA[
				         <init-param>
				<param-name>defaultProtocol</param-name>
				<param-value>${scheme}</param-value>
			</init-param>
			<init-param>
				<param-name>defaultPort</param-name>
				<param-value>${tomcat.port}</param-value>
			</init-param>
				]]>
			</insert>
		</xmltask>
	</target>

	<target name="insert-secure-connector">
		<xmltask source="${tomcat.home}/conf/server.xml"
			dest="${tomcat.home}/conf/server.xml">
			<remove
				path="/Server/Service[@name='Catalina']/Connector[@port='${tomcat.old.https.port}']" />
			<insert path="/Server/Service[@name='Catalina']">
				<![CDATA[
				<Connector
				  className="org.globus.tomcat.coyote.net.HTTPSConnector"
				  port="${tomcat.https.port}" maxThreads="150" minSpareThreads="25" maxSpareThreads="75" 
				  autoFlush="true"
				  disableUploadTimeout="true" scheme="https"
				  enableLookups="true" acceptCount="10" debug="0" 
				   cert="${service.cert.path}"
				   key="${service.key.path}"/>
				]]>
			</insert>
		</xmltask>
	</target>

	<target name="insert-valve">

		<xmltask source="${tomcat.home}/conf/server.xml"
			dest="${tomcat.home}/conf/server.xml">
			<remove
				path="/Server/Service[@name='Catalina']/Engine[@name='Catalina']/Valve[@className='org.globus.tomcat.coyote.valves.HTTPSValve']" />
			<insert
				path="/Server/Service[@name='Catalina']/Engine[@name='Catalina']">
				<![CDATA[
						<Valve className="org.globus.tomcat.coyote.valves.HTTPSValve"/>
						]]>
			</insert>
		</xmltask>
	</target>

	<target name="set-global-cert-and-key-paths">
		<property name="secdesc.file"
			value="${tomcat.home}/webapps/wsrf/WEB-INF/etc/globus_wsrf_core/global_security_descriptor.xml" />
		<xmltask source="${secdesc.file}" dest="${secdesc.file}">
			<remove
				path="/*[local-name()='securityConfig']/*[local-name()='gridmap']" />
			<attr
				path="/*[local-name()='securityConfig']/*[local-name()='credential']/*[local-name()='key-file']"
				attr="value" value="${service.key.path}" />
			<attr
				path="/*[local-name()='securityConfig']/*[local-name()='credential']/*[local-name()='cert-file']"
				attr="value" value="${service.cert.path}" />
		</xmltask>

	</target>

	<target name="configure-tomcat-server-config">
		<property name="secdesc.file"
			value="${tomcat.home}/webapps/wsrf/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" />
		<xmltask source="${secdesc.file}" dest="${secdesc.file}">
			<remove
				path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='logicalHost']" />
			<remove
				path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='publishHostName']" />
			<insert
				path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']">
				<![CDATA[
<parameter xmlns="http://xml.apache.org/axis/wsdd/" name="logicalHost" value="${service.hostname}"/>
<parameter xmlns="http://xml.apache.org/axis/wsdd/" name="publishHostName" value="true"/>
			]]>
			</insert>
		</xmltask>
		<if>
			<equals arg1="${use.secure.container}" arg2="true"
				trim="true" />
			<then>
				<xmltask source="${secdesc.file}"
					dest="${secdesc.file}">
					<remove
						path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='containerSecDesc']" />
					<insert
						path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']">
						<![CDATA[
<parameter xmlns="http://xml.apache.org/axis/wsdd/" name="containerSecDesc" value="${tomcat.home}/webapps/wsrf/WEB-INF/etc/globus_wsrf_core/global_security_descriptor.xml"/>
			]]>
					</insert>
				</xmltask>
			</then>
		</if>

	</target>

	<target name="configure-globus-server-config">
		<property name="secdesc.file"
			value="${globus.home}/etc/globus_wsrf_core/server-config.wsdd" />

		<remove
			path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='logicalHost']" />
		<remove
			path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']/*[local-name()='parameter' and @name='publishHostName']" />
		<insert
			path="/*[local-name()='deployment']/*[local-name()='globalConfiguration']">
			<![CDATA[
<parameter xmlns="http://xml.apache.org/axis/wsdd/" name="logicalHost" value="${service.hostname}"/>
<parameter xmlns="http://xml.apache.org/axis/wsdd/" name="publishHostName" value="true"/>
			]]>
		</insert>

	</target>

	<target name="configure-security-descriptor">
		<property name="secdesc.file"
			value="${globus.home}/etc/globus_wsrf_core/global_security_descriptor.xml" />

		<xmltask source="${secdesc.file}" dest="${secdesc.file}">

			<remove
				path="/*[local-name()='securityConfig']/*[local-name()='gridmap']" />

			<attr
				path="/*[local-name()='securityConfig']/*[local-name()='credential']/*[local-name()='key-file']"
				attr="value" value="${service.key.path}" />
			<attr
				path="/*[local-name()='securityConfig']/*[local-name()='credential']/*[local-name()='cert-file']"
				attr="value" value="${service.cert.path}" />
		</xmltask>
	</target>

	<target name="configure-tomcat-ports">

		<xmltask source="${tomcat.home}/conf/server.xml"
			dest="${tomcat.home}/conf/server.xml">

			<attr path="/Server" attr="port"
				value="${tomcat.shutdown.port}" />

			<attr
				path="/Server/Service[@name='Catalina']/Connector[@port='${tomcat.old.http.port}' and @redirectPort='${tomcat.old.https.port}']"
				attr="port" value="${tomcat.http.port}" />

			<attr
				path="/Server/Service[@name='Catalina']/Connector[@port='${tomcat.http.port}' and @redirectPort='${tomcat.old.https.port}']"
				attr="redirectPort" value="${tomcat.https.port}" />

			<attr
				path="/Server/Service[@name='Catalina']/Connector[@scheme='https']"
				attr="port" value="${tomcat.https.port}" />

		</xmltask>

	</target>

	<target name="configure-gts-conf">
		<property name="config.file"
			value="${service.dest.dir}/gts/etc/gts-conf.xml" />
		<xmltask source="${config.file}" dest="${config.file}">
			<replace path="/gts/resource/gts-config/gts-internal-id">
				<![CDATA[
					<gts-internal-id>${gts.db.id}</gts-internal-id>
				]]>

			</replace>
			<replace path="/gts/resource/gts-config/database/host">
				<![CDATA[
					<host>${gts.db.host}</host>
				]]>

			</replace>
			<replace path="/gts/resource/gts-config/database/port">
				<![CDATA[
					<port>${gts.db.port}</port>
				]]>

			</replace>
			<replace
				path="/gts/resource/gts-config/database/username">
				<![CDATA[
					<username>${gts.db.username}</username>
				]]>

			</replace>
			<replace
				path="/gts/resource/gts-config/database/password">
				<![CDATA[
					<password>${gts.db.password}</password>
				]]>

			</replace>
		</xmltask>
	</target>

	<target name="copy-jdbc-driver-to-tomcat">
		<copy file="${authn.svc.rdbms.driver.jar}"
			todir="${tomcat.home}/webapps/wsrf/WEB-INF/lib" overwrite="true" />
	</target>

	<target name="copy-jdbc-driver-to-globus">
		<copy file="${authn.svc.rdbms.driver.jar}"
			todir="${globus.home}/lib" overwrite="true" />
	</target>


	<target name="create-jaas-config">


		<if>
			<equals arg1="${authn.svc.overwrite.jaas}"
				arg2="authn.svc.overwrite.jaas.yes" trim="true" />
			<then>
				<delete file="${jaas.config.path}" />
			</then>
		</if>

		<if>
			<equals arg1="${authn.svc.cred.provider.type}"
				arg2="authn.svc.cred.provider.type.ldap" trim="true" />
			<then>
				<concat destfile="${jaas.config.path}" append="true">
					<![CDATA[
${authn.svc.csm.ctx}{
	gov.nih.nci.security.authentication.loginmodules.LDAPLoginModule
	required ldapHost="${authn.svc.ldap.hostname}"
	ldapSearchableBase="${authn.svc.ldap.search.base}"
	ldapUserIdLabel="${authn.svc.ldap.login.id.attribute}"
	USER_FIRST_NAME="${authn.svc.ldap.first.name.attribute}"
	USER_LAST_NAME="${authn.svc.ldap.last.name.attribute}"
	USER_EMAIL_ID="${authn.svc.ldap.email.id.attribute}";
};
					]]>
				</concat>
			</then>
			<else>
				<concat destfile="${jaas.config.path}" append="true">
					<![CDATA[
${authn.svc.csm.ctx}{ 
    gov.nih.nci.security.authentication.loginmodules.RDBMSLoginModule required 
	driver="${authn.svc.rdbms.driver}" 
	url="${authn.svc.rdbms.url}" 
	user="${authn.svc.rdbms.username}" 
	passwd="${authn.svc.rdbms.password}" 
	TABLE_NAME="${authn.svc.rdbms.table.name}"
	USER_LOGIN_ID="${authn.svc.rdbms.login.id.column}"
	USER_PASSWORD="${authn.svc.rdbms.password.column}"
	USER_FIRST_NAME="${authn.svc.rdbms.first.name.column}"
	USER_LAST_NAME="${authn.svc.rdbms.last.name.column}"
	USER_EMAIL_ID="${authn.svc.rdbms.email.id.column}"
	encryption-enabled="${authn.svc.rdbms.encryption.enabled}";
};
					]]>
				</concat>
			</else>
		</if>
	</target>

	<target name="set-authn-service-idp-properties">
		<propertyfile
			file="${service.dest.dir}/authentication-service/idp.properties">
			<entry key="csm.app.context" value="${authn.svc.csm.ctx}" />
			<entry key="saml.provider.crt"
				value="${authn.svc.saml.provider.cert.path}" />
			<entry key="saml.provider.key"
				value="${authn.svc.saml.provider.key.path}" />
			<entry key="saml.provider.pwd"
				value="${authn.svc.saml.provider.key.pwd}" />
		</propertyfile>
	</target>


	<target name="configure-gridgrouper-hibernate">
		<propertyfile
			file="${service.dest.dir}/gridgrouper/resources/conf/grouper.hibernate.properties">
			<entry key="hibernate.connection.url"
				value="${grid.grouper.db.url}" />
			<entry key="hibernate.connection.username"
				value="${grid.grouper.db.username}" />
			<entry key="hibernate.connection.password"
				value="${grid.grouper.db.password}" />
		</propertyfile>
	</target>


	<target name="configure-gme-globus-config">
		<property name="config.file"
			value="${service.dest.dir}/gme/etc/gme-globus-config.xml" />
		<xmltask source="${config.file}" dest="${config.file}">
			<attr
				path="/mobius/resource[@name='gmeConfig']/gmeConfiguration-configuration/root-database"
				attr="id" value="${gme.db.id}" />
			<replace
				path="/mobius/resource[@name='gmeConfig']/gmeConfiguration-configuration/root-database/host">
				<![CDATA[
		<host>${gme.db.host}</host>
		]]>

			</replace>
			<replace
				path="/mobius/resource[@name='gmeConfig']/gmeConfiguration-configuration/root-database/port">
				<![CDATA[
		<port>${gme.db.port}</port>
		]]>

			</replace>
			<replace
				path="/mobius/resource[@name='gmeConfig']/gmeConfiguration-configuration/root-database/username">
				<![CDATA[
		<username>${gme.db.username}</username>
		]]>

			</replace>
			<replace
				path="/mobius/resource[@name='gmeConfig']/gmeConfiguration-configuration/root-database/password">
				<![CDATA[
		<password>${gme.db.password}</password>
		]]>
			</replace>
		</xmltask>
	</target>

	<target name="configure-portal-properties">
		<propertyfile
			file="${service.dest.dir}/portal/portal-build.properties">
			<entry key="db.connection.url"
				value="jdbc:mysql://${portal.db.host}:${portal.db.port}/${portal.db.id}" />
			<entry key="db.connection.username"
				value="${portal.db.username}" />
			<entry key="db.connection.password"
				value="${portal.db.password}" />
			<entry key="google.map.key"
				value="${portal.google.map.key}" />
			<entry key="metadata.aggregator.frequncy"
				value="${portal.meta.agg.freq}" />
			<entry key="geocoder.application.id"
				value="${portal.geocoder.app.id}" />
		</propertyfile>
	</target>

	<target name="configure-portal-index-svc">

		<property name="config.file"
			value="${service.dest.dir}/portal/webcontent/WEB-INF/applicationContext.xml" />

		<xmltask source="${config.file}" dest="${config.file}"
			preservetype="true">
			<remove
				path="/beans/bean[@id='initBean']/property[@name='indexSet']/set/value" />
		</xmltask>

		<for list="${portal.index.svc.urls}" param="url">
			<sequential>

				<xmltask source="${config.file}" dest="${config.file}"
					preservetype="true">
					<insert
						path="/beans/bean[@id='initBean']/property[@name='indexSet']/set">
						<![CDATA[
							<value>@{url}</value>
						]]>
					</insert>
				</xmltask>
			</sequential>
		</for>

	</target>

	<target name="configure-portal-deactivate-syncgts">
		<property name="config.file"
			value="${service.dest.dir}/portal/src/properties/applicationContext-aggregators.xml" />

		<xmltask source="${config.file}" dest="${config.file}"
			preservetype="true">
			<remove path="/beans/bean[@id='syncGTSInitBean']" />
			<remove path="/beans/bean[@id='syncMethodInvokingTask']" />
			<remove path="/beans/bean[@id='syncGTSTask']" />
			<remove
				path="/beans/bean[@id='timerFactory']/property[@name='scheduledTimerTasks']/list/ref[@local='syncGTSTask']" />
		</xmltask>
	</target>

	<target name="deploy-portal">
		<ant dir="${service.dest.dir}/portal" inheritAll="false"
			target="deployTomcatExploded">
			<property name="project.name"
				value="${portal.context.name}" />
		</ant>
	</target>

	<target name="deploy-browser">
		<ant dir="${service.dest.dir}/cagrid-browser" inheritAll="false"
			target="deployWebapp">
			<property name="project.name"
				value="${browser.context.name}" />
		</ant>
	</target>

	<target name="deploy-portal-crypto-jars">
		<antcall target="deploy-webapp-crypto-jars">
			<param name="webapp.context.name"
				value="${portal.context.name}" />
		</antcall>
	</target>

	<target name="deploy-browser-crypto-jars">
		<antcall target="deploy-webapp-crypto-jars">
			<param name="webapp.context.name"
				value="${browser.context.name}" />
		</antcall>
	</target>

	<target name="deploy-webapp-crypto-jars">
	
		<if>
			<available file="${tomcat.home}/common/lib/cog-jglobus.jar" />
			<then>
				<echo>Installing to secure container. Copying patched cog-jglobus.jar and removing crypto jars in all other web aplications.</echo>

				<copy
					file="${cagrid.home}/projects/syncgts/lib/globus-patches/cog-jglobus.jar"
					todir="${tomcat.home}/common/lib" overwrite="true" />

				<delete>
						<fileset
							dir="${tomcat.home}/webapps">
							<include name="**/WEB-INF/lib/cog-jglobus.jar" />
							<include name="**/WEB-INF/lib/cryptix*.jar" />
							<include name="**/WEB-INF/lib/puretls.jar" />
							<include name="**/WEB-INF/lib/jce-jdk13-125.jar" />
						</fileset>
					</delete>
					
			</then>
			<elseif>
				<available
					file="${tomcat.home}/webapps/wsrf/WEB-INF/lib/cog-jglobus.jar" />
				<then>
				
					<echo>Some Globus service is installed that needs these 
						crypto jars. Consolidating crypto jars under ${tomcat.home}/common/lib 
						to avoid class loader issues.</echo>
				
					<delete>
						<fileset
							dir="${tomcat.home}/webapps">
							<include name="**/WEB-INF/lib/cog-jglobus.jar" />
							<include name="**/WEB-INF/lib/cryptix*.jar" />
							<include name="**/WEB-INF/lib/puretls.jar" />
							<include name="**/WEB-INF/lib/jce-jdk13-125.jar" />
						</fileset>
					</delete>				
						
					<copy
						file="${cagrid.home}/projects/syncgts/lib/globus-patches/cog-jglobus.jar"
						todir="${tomcat.home}/common/lib" overwrite="true" />
					<copy todir="${tomcat.home}/common/lib"
						overwrite="true">
						<fileset dir="${globus.home}/lib">
							<include name="cryptix*.jar" />
							<include name="puretls.jar" />
							<include name="jce-jdk13-125.jar" />
						</fileset>
					</copy>
				</then>
			</elseif>
			<else>
				<!-- Installing webapp into non-secure container, without any other globus services. -->
				<copy
					file="${cagrid.home}/projects/syncgts/lib/globus-patches/cog-jglobus.jar"
					todir="${tomcat.home}/webapps/${webapp.context.name}/WEB-INF/lib"
					overwrite="true" />
				<copy
					todir="${tomcat.home}/webapps/${webapp.context.name}/WEB-INF/lib"
					overwrite="true">
					<fileset dir="${globus.home}">
						<include name="cryptix*.jar" />
						<include name="puretls.jar" />
						<include name="jce-jdk13-125.jar" />
					</fileset>
				</copy>
			</else>
		</if>
	</target>

	<target name="configure-browser">

		<property name="config.file"
			value="${service.dest.dir}/cagrid-browser/webcontent/WEB-INF/faces-config.xml" />
			
			
		

		<xmltask source="${config.file}" dest="${config.file}"
			preservetype="true">
			
			<replace path="/*[local-name()='faces-config']/*[local-name()='managed-bean' and ./*[local-name()='managed-bean-name' and contains(text(),'loginBean')]]/*[local-name()='managed-property' and ./*[local-name()='property-name' and contains(text(),'idpUrl1')]]/*[local-name()='value']/text()" withText="${browser.idp.url1}"/>
			<replace path="/*[local-name()='faces-config']/*[local-name()='managed-bean' and ./*[local-name()='managed-bean-name' and contains(text(),'loginBean')]]/*[local-name()='managed-property' and ./*[local-name()='property-name' and contains(text(),'idpUrl2')]]/*[local-name()='value']/text()" withText="${browser.idp.url2}"/>
			<replace path="/*[local-name()='faces-config']/*[local-name()='managed-bean' and ./*[local-name()='managed-bean-name' and contains(text(),'loginBean')]]/*[local-name()='managed-property' and ./*[local-name()='property-name' and contains(text(),'ifsUrl')]]/*[local-name()='value']/text()" withText="${browser.ifs.url}"/>
			<replace path="/*[local-name()='faces-config']/*[local-name()='managed-bean' and ./*[local-name()='managed-bean-name' and contains(text(),'semanticSearchConfig')]]/*[local-name()='managed-property' and ./*[local-name()='property-name' and contains(text(),'evsGridServiceUrl')]]/*[local-name()='value']/text()" withText="${browser.evs.svc.url}"/>
			
			<remove
				path="/*[local-name()='faces-config']/*[local-name()='managed-bean' and ./*[local-name()='managed-bean-name' and text()='discoveryBean']]/*[local-name()='managed-property' and ./*[local-name()='property-name' and text()='indexServiceUrls']]/*[local-name()='list-entries']/*[local-name()='value']" />
			<remove
				path="/*[local-name()='faces-config']/*[local-name()='managed-bean' and ./*[local-name()='managed-bean-name' and text()='discoveryBean']]/*[local-name()='managed-property' and ./*[local-name()='property-name' and text()='indexServiceUrlsSelected']]/*[local-name()='list-entries']/*[local-name()='value']" />

			<remove
				path="/*[local-name()='faces-config']/*[local-name()='managed-bean' and ./*[local-name()='managed-bean-name' and starts-with(text(),'indexService')]]" />
		</xmltask>

		<var name="idx" value="0" />
		<for list="${browser.index.svc.urls}" param="url">
			<sequential>
				<math result="sum" operand1="${idx}" operation="+"
					operand2="1" datatype="int" />
				<var name="idx" value="${sum}" />

				<xmltask source="${config.file}" dest="${config.file}"
					preservetype="true">

					<insert
						path="/*[local-name()='faces-config']/*[local-name()='managed-bean' and ./*[local-name()='managed-bean-name' and text()='discoveryBean']]/*[local-name()='managed-property' and ./*[local-name()='property-name' and text()='indexServiceUrls']]/*[local-name()='list-entries']">
						<![CDATA[
						<value xmlns="http://java.sun.com/JSF/Configuration">#{indexService${idx}}</value>
						]]>
					</insert>

					<insert
						path="/*[local-name()='faces-config']/*[local-name()='managed-bean' and ./*[local-name()='managed-bean-name' and text()='discoveryBean']]/*[local-name()='managed-property' and ./*[local-name()='property-name' and text()='indexServiceUrlsSelected']]/*[local-name()='list-entries']">
						<![CDATA[
						<value xmlns="http://java.sun.com/JSF/Configuration">#{indexService${idx}.value}</value>
						]]>
					</insert>


					<insert path="/*[local-name()='faces-config']">
						<![CDATA[
    <managed-bean xmlns="http://java.sun.com/JSF/Configuration">
        <managed-bean-name>indexService${idx}</managed-bean-name>
        <managed-bean-class>javax.faces.model.SelectItem</managed-bean-class>
        <managed-bean-scope>none</managed-bean-scope>
        <managed-property>
            <property-name>label</property-name>
            <value>@{url}</value>
        </managed-property>
        <managed-property>
            <property-name>value</property-name>
            <value>@{url}</value>
        </managed-property>
    </managed-bean> 					
						]]>
					</insert>

				</xmltask>


			</sequential>
		</for>
	</target>

	<target name="unpack-bpel-admin-war">
		<mkdir dir="${tomcat.home}/webapps/BpelAdmin" />
		<unwar src="${tomcat.home}/webapps/BpelAdmin.war"
			dest="${tomcat.home}/webapps/BpelAdmin" />
	</target>

	<target name="configure-bpel-admin-web-xml">

		<property name="bpel.admin.role" value="admin"/>
		
		<property name="config.file"
			value="${tomcat.home}/webapps/BpelAdmin/WEB-INF/web.xml" />

		<xmltask source="${config.file}" dest="${config.file}"
			preservetype="true">
			<remove path="/web-app/security-constraint" />
			<remove path="/web-app/login-config" />
			<remove path="/web-app/security-role" />
			<insert path="/web-app">
				<![CDATA[
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>BpelAdmin</web-resource-name>
      <url-pattern>/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <role-name>${bpel.admin.role}</role-name>
    </auth-constraint>
  </security-constraint>
  <login-config>
    <auth-method>DIGEST</auth-method>
  </login-config>
  <security-role>
    <role-name>${bpel.admin.role}</role-name>
  </security-role>
						]]>
			</insert>
		</xmltask>

	</target>
	
	<target name="create-bpel-admin-context">
	
		<!-- TODO: handle virutal hosts and other engines -->
		<property name="context.file" value="${tomcat.home}/conf/Catalina/localhost/BpelAdmin.xml"/>
		<delete file="${context.file}"/>
		<touch mkdirs="true" file="${context.file}"/>
		<concat destfile="${context.file}"><![CDATA[<?xml version='1.0' encoding='utf-8'?>
<Context reloadable="false" displayName="ActiveBPEL Administrative Console" path="/BpelAdmin">
<Realm className="org.apache.catalina.realm.MemoryRealm"
       pathname="conf/BpelAdmin-users.xml"/>
</Context>
		]]>
		</concat>		
	
	</target>
	
	<target name="create-bpel-admin-users">
	
		<property name="users.file" value="${tomcat.home}/conf/BpelAdmin-users.xml"/>
		<delete file="${users.file}"/>
		<touch mkdirs="true" file="${users.file}"/>
		<concat destfile="${users.file}"><![CDATA[<tomcat-users>
 <user name="${bpel.admin.username}" 
       password="${bpel.admin.password}" 
       roles="${bpel.admin.role}"/>
</tomcat-users>
		]]>
		</concat>		
	
	</target>

</project>