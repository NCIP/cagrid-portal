<project name="certificate creation task test" default="installDorian" basedir=".">
    <description>
        certificate test
    </description>
  <!-- set global properties for this build -->
  

  
  <property file="${user.home}/.gridenv.properties"/>
  <property environment="env" />
  
   
   <path id="xmltaskdef.cp">
       	<fileset dir="${basedir}/resources/lib">
     	   <include name="xmltask-v1.14.jar"/>
             </fileset> 
   </path>
   
   <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="xmltaskdef.cp"/>
  
  <!--##################################################################################################################-->
        <!---
          The first scenario represent the case when target container is tomcat but
          tomcat does not exist
        -->
  	<condition property="sc1">
    	            <and>
    	                <equals arg1="${tomcat.exist}" arg2="false" />
    	                <equals arg1="${target.container}" arg2="tomcat" />
    	            </and>
 	</condition>
 	<!---
	          The second scenario represent the case when target 
	          container is globus and globus does not exist
        -->
 	
 	<condition property="sc2">
	    	            <and>
	    	                <equals arg1="${globus.exist}" arg2="false" />
	    	                <equals arg1="${target.container}" arg2="globus" />
	    	            </and>
 	</condition>
 	<!---
	          The third scenario represent the case when 
	          a) target container is tomcat and it exists
	          OR
	          b) target container is globus and it exists
        -->
 	
 	<condition property="sc3">
 	                 <OR>
	    	            <and>
	    	                <equals arg1="${tomcat.exist}" arg2="true" />
	    	                <equals arg1="${target.container}" arg2="tomcat" />
	    	                
	    	            </and>
	    	            <and>
				<equals arg1="${globus.exist}" arg2="true" />
				<equals arg1="${target.container}" arg2="globus" />
			    	    	                
	    	            </and>
	    	          </OR>
 	</condition>
 	
 	<condition property="add.admin.now">
		 
		    <and>
			<equals arg1="${add.admin.now}" arg2="true" />
			
		    </and>
		    
		  
 	</condition>
 
 <!--######################################################################################################################-->
 
 <!--**************************************************************
     ********               Targets                       *********
     ************************************************************** -->
 	
 	<target name="checkGlobus" depends="setGlobus">
			<condition property="globus.not.found">
				<or>
					<not>
						<isset property="ext.globus.dir" />
					</not>
					<equals arg1="${ext.globus.dir}" arg2="" />
				</or>
			</condition>
			<fail message="Globus installation is not set in either GLOBUS_LOCATION or ext.globus.dir" if="globus.not.found" />
			<echo message="Globus: ${ext.globus.dir}" />
		</target>
		<target name="setGlobus" if="env.GLOBUS_LOCATION">
			<!-- GT4 build files and directories-->
			<property name="ext.globus.dir" value="${env.GLOBUS_LOCATION}" />
			<property name="build.stubs" location="${ext.globus.dir}/share/globus_wsrf_tools/build-stubs.xml" />
			<property name="schema.src" location="${ext.globus.dir}/share/schema" />
			<property name="build.packages" location="${ext.globus.dir}/share/globus_wsrf_common/build-packages.xml" />
			<!-- Copied from build.stubs file, as there is no way to "append" to the value in the remote file -->
			<property name="GT4.ns.excludes" value="-x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.wsdl -x http://schemas.xmlsoap.org/ws/2004/04/trust -x http://schemas.xmlsoap.org/ws/2002/12/policy -x http://schemas.xmlsoap.org/ws/2002/07/utility -x http://schemas.xmlsoap.org/ws/2004/04/sc -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd -x http://www.w3.org/2000/09/xmldsig# -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" />
	
	</target>
 	
 
  	
  	
  <target name="Scn1"  description="Scenario 1" if="sc1">
     
     <echo message="Tomcat does not exist, Dorian can't be installed!" />
     
  </target>
  
  <target name="Scn2"  description="clean up" if="sc2">
       <echo message="Globus does not exist, Dorian can't be installed!"/>
  </target>
  
  <target name="Scn3"  description="clean up" if="sc3">
       <antcall target="configureDataBaseParams"/>
            	
     
     
       <antcall target="configureServiceMetadata">
	 <param name="rc.display.name" value="${grouper.service.display.name}"/>
         <param name="rc.short.name" value="${grouper.service.short.name}"/>
         <param name="rc.country.name" value="${grouper.service.country}"/>
         <param name="rc.postal.code" value="${grouper.service.postal.code}"/>
         <param name="rc.province.name" value="${grouper.service.province}"/>
         <param name="rc.street1.name" value="${grouper.service.street}"/>
         <param name="rc.poc.affiliation.name" value="${grouper.service.rc.affiliation}"/>
         <param name="rc.poc.email.id" value="${grouper.service.rc.poc.email}"/>
         <param name="rc.poc.first.name" value="${grouper.service.rc.poc.first.name}"/>
         <param name="rc.poc.last.name" value="${grouper.service.rc.poc.last.name}"/>
         <param name="rc.poc.role.name" value="${grouper.service.rc.poc.role}"/>
         
         <param name="poc.affiliation.name" value="${grouper.service.poc.affiliation}"/>
         <param name="poc.email.id" value="${grouper.service.poc.email}"/>
         <param name="poc.first.name" value="${grouper.service.poc.first.name}"/>
         <param name="poc.last.name" value="${grouper.service.poc.last.name}"/>
         <param name="poc.role.name" value="${grouper.service.poc.role}"/>
         
         
     </antcall>
    <!--
     <antcall target="configureRegistartionData">
                 	<param name="index.service.uri" value="${index.service.epr}"/>
                 	         	
     </antcall>
      -->
     <antcall target="deploy${target.container}"/>
     <antcall target="db.build"/>
     <antcall target="initgrouper"/>
     <antcall target="addAdmin"/>
  </target>
  
 <!--######################################################################################################################-->
 
 <!--****************************************************
     ****************************************************
     *************  Main Targets              ***********
     ****************************************************
     ****************************************************-->
  
  
   <target name="installGridGrouper" description="clean up">
       
       <antcall target="Scn1"/>
       <antcall target="Scn2"/>
       <antcall target="Scn3"/>
       
       
  </target>
        
  <target name="installsource" description="Source Code Installation">
             
             <mkdir dir="${user.grid.home}/gridgrouper"/>
             <copy todir="${user.grid.home}/gridgrouper">
    	     <fileset dir="${basedir}/resources/release">
    	       <include name="**/*.*"/>
    	     </fileset>
    	   </copy>
    
             
             
  </target>
  
 
 <!--########################################################################################################################-->
 
        <!-- ******************************************************
             ******************************************************
             ********   Reusable Targets                 **********
             ******************************************************
             ****************************************************** -->
  
  
  
  
  
  <target name="configureServiceMetadata">
    <xmltask source="${basedir}/resources/release/etc/GridGrouper_serviceMetadata.xml" dest="${basedir}/resources/release/etc/GridGrouper_serviceMetadata.xml">
       	          	<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']"  attr="displayName" value="${rc.display.name}"/>
       	          	<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']"  attr="shortName" value="${rc.short.name}"/>
       	          	<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']/*[local-name()='Address']"  attr="country" value="${rc.country.name}"/>
       	          	<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']/*[local-name()='Address']"  attr="postalCode" value="${rc.postal.code}"/>
       	          	<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']/*[local-name()='Address']"  attr="stateProvince" value="${rc.province.name}"/>
       	          	<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']/*[local-name()='Address']"  attr="street1" value="${rc.street1.name}"/>
       	          	
       	          	<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="affiliation" value="${rc.poc.affiliation.name}"/>
 			<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="email" value="${rc.poc.email.id}"/>
 			<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="firstName" value="${rc.poc.first.name}"/>
 			<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="lastName" value="${rc.poc.last.name}"/>
 			<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='hostingResearchCenter']/*[local-name()='ResearchCenter']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="role" value="${rc.poc.role.name}"/>
 			
 			<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='serviceDescription']/*[local-name()='Service']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="affiliation" value="${poc.affiliation.name}"/>
 			<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='serviceDescription']/*[local-name()='Service']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="email" value="${poc.email.id}"/>
 			<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='serviceDescription']/*[local-name()='Service']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="firstName" value="${poc.first.name}"/>
 			<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='serviceDescription']/*[local-name()='Service']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="lastName" value="${poc.last.name}"/>
 			<attr path="//*[local-name()='ServiceMetadata']/*[local-name()='serviceDescription']/*[local-name()='Service']/*[local-name()='pointOfContactCollection']/*[local-name()='PointOfContact']"  attr="role" value="${poc.role.name}"/>
 			
        
        
        </xmltask>
  </target>
  <target name="configureDataBaseParams">
  	<replace file="${basedir}/resources/templates/grouper.hibernate.properties" >
	    		<replacefilter token="@DB_URL@" value="${db.url}${db.name}"/>
	    		<replacefilter token="@USER_ID@" value="${db.userid}"/>
	    		<replacefilter token="@PWD@" value="${db.password}"/>
	    		
	    		
    	</replace>
    	<copy file="${basedir}/resources/templates/grouper.hibernate.properties" overwrite="true" todir="${basedir}/resources/release/resources/conf"/>
  </target>
  
  <target name="configureRegistartionData">
    	<xmltask source="${basedir}/resources/release/etc/registration.xml" dest="${basedir}/resources/release/etc/registration.xml">
  		<replace path="//*[local-name()='ServiceGroupRegistrationParameters']/*[local-name()='ServiceGroupEPR']/*[local-name()='Address']/text()" withText="${index.service.uri}"/>
  
  		
          </xmltask>
  </target>
  
  <target name="deploytomcat">
    <ant  dir="${basedir}/resources/release" antfile="${basedir}/resources/release/build.xml" target="deployTomcat">
    </ant>
  </target>
  <target name="deployglobus">
      <ant  dir="${basedir}/resources/release" antfile="${basedir}/resources/release/build.xml" target="deployGlobus">
      </ant>
  </target>
  
  
		
		
    <target name="addAdmin" description="Add administrator to grid grouper" depends="checkGlobus" if="add.admin.now">
    		
    		<java classname="gov.nih.nci.cagrid.gridgrouper.service.tools.GridGrouperBootstrapper" fork="yes" newenvironment="true">
    			<arg value="-addAdmin" />
    			<arg value="-userId" />
    			<arg value="${admin.id}"/>
    			<classpath>
    				<fileset dir="${basedir}/resources/release/build/lib">
    					<include name="**/*.jar" />
    				</fileset>
    				<fileset dir="${basedir}/resources/release/ext/lib">
    					<include name="*.jar" />
    				</fileset>
    				<fileset dir="${basedir}/resources/release/lib">
    					<include name="**/*.jar" />
    				</fileset>
    				<fileset dir="${ext.globus.dir}/lib">
    					<include name="*.jar" />
    					<exclude name="${jar.name}" />
    					<exclude name="xml-apis.jar" />
    					<exclude name="xercesImpl.jar" />
    				</fileset>
    			</classpath>
    		</java>
	</target>

<target name="initgrouper">
      <ant  dir="${basedir}/resources/release" antfile="${basedir}/resources/release/build.xml" target="grouperInit">
      </ant>
  </target>
  
   <target name="db.build">
     <antcall target="configureDataBaseName"/>
     <sql driver="com.mysql.jdbc.Driver"
          url="${db.url}"
          userid="${db.userid}" password="${db.password}" >
       <classpath>
         <pathelement path="${basedir}/resources/lib/ext/mysql-connector-30.jar"/>      
       </classpath>
       <transaction  src="${basedir}/resources/etc/db_create.sql"/>
     </sql>
</target>

<target name="configureDataBaseName">
  	<replace file="${basedir}/resources/etc/db_create.sql" >
	    		<replacefilter token="@DATABASE_NAME@" value="${db.name}"/>
	    		
	    		
    	</replace>
    	</target>

  <!--###########################################################################################################-->
		
  <target name="cleanuptarget"
        description="clean up" >
   
    
  </target>
  <target name="finished"
          description="clean up" >
     
      <echo message="we are done!"/>
  </target>
</project>