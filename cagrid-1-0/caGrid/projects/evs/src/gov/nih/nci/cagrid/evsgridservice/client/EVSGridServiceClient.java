package gov.nih.nci.cagrid.evsgridservice.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.evsgridservice.stubs.EVSGridServicePortType;
import gov.nih.nci.cagrid.evsgridservice.stubs.service.EVSGridServiceAddressingLocator;
import gov.nih.nci.cagrid.evsgridservice.common.EVSGridServiceI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.cagrid.evs.service.*;
import gov.nih.nci.evs.domain.Source;
import gov.nih.nci.evs.domain.DescLogicConcept;
import gov.nih.nci.evs.domain.HistoryRecord;
import gov.nih.nci.evs.domain.MetaThesaurusConcept;

/**
 * This class is autogenerated, DO NOT EDIT.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class EVSGridServiceClient extends ServiceSecurityClient implements EVSGridServiceI {
    protected EVSGridServicePortType portType;
    private Object portTypeMutex;

    public EVSGridServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url,null);
    }

    public EVSGridServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(url,proxy);
           initialize();
    }

    public EVSGridServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
           this(epr,null);
    }

    public EVSGridServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(epr,proxy);
        initialize();
    }

    private void initialize() throws RemoteException {
        this.portTypeMutex = new Object();
        this.portType = createPortType();
    }

    private EVSGridServicePortType createPortType() throws RemoteException {

        EVSGridServiceAddressingLocator locator = new EVSGridServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        EVSGridServicePortType port = null;
        try {
            port = locator.getEVSGridServicePortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }

    public static void usage(){
        System.out.println(EVSGridServiceClient.class.getName() + " -url <service url>");
    }

    public static void main(String [] args){
        System.out.println("Running the Grid Service Client");
        try{
            if(!(args.length < 2)){
                if(args[0].equals("-url")){
                  EVSGridServiceClient client = new EVSGridServiceClient(args[1]);
                  // place client calls here if you want to use this main as a
                  // test....

                    /****
                     * Test getMetaSources
                     */

                    System.out.println("Calling getMetaSources!");

                    Source[] sources = client.getMetaSources();
                    if ( sources.length > 0)
                    {
                        for (int i=0; i < sources.length; i++)
                        {
                            Source source = sources[i];
                            System.out.println("Source[" + i + "] = " + source.getAbbreviation() + "\t" + source.getDescription());
                        }
                    }
                    else
                    {
                        System.out.println("getMetaSources Not yet implemented!");
                    }

                    /****
                     * Test searchMetaThesaurusConcept
                     * metaSearch.searchMetaThesaurus("lung", 2, "*", false, false, false);
                     * 	public void searchMetaThesaurus(String searchTerm, int limit, String source,
                                    boolean cui, boolean shortResult, boolean score)
                     */

                    System.out.println("Calling searchMetaThesaurusConcept!");
                    EVSMetaThesaurusSearchParams evsMetaThesaurusSearchParam = new EVSMetaThesaurusSearchParams();
                    evsMetaThesaurusSearchParam.setSearchTerm("lung");
                    evsMetaThesaurusSearchParam.setLimit(2);
                    evsMetaThesaurusSearchParam.setSource("*");
                    evsMetaThesaurusSearchParam.setCui(false);
                    evsMetaThesaurusSearchParam.setShortResponse(false);
                    evsMetaThesaurusSearchParam.setScore(false);

                    MetaThesaurusConcept[] metaConcept = client.searchMetaThesaurus(evsMetaThesaurusSearchParam);

                    if (metaConcept != null && metaConcept.length > 0)
                    {
                        for (int i=0; i < metaConcept.length; i++)
                        {
                            MetaThesaurusConcept meta = metaConcept[i];
                            System.out.println("meta[" + i + "] = " + meta.getName() + "\t" + meta.getCui());
                        }
                    }
                    else
                    {
                        System.out.println("searchMetaThesaurusConcept Not yet implemented!");
                    }

                    /****
                     * Test searchMetaThesaurusConcept
                     * metaSearch.searchMetaThesaurus("lung", 2, "*", false, false, false);
                        public void searchSourceByCode(String code, String sourceAbbr)
                     evsQuery.searchSourceByCode("N035552","CADSR-04");
                     */

                    System.out.println("Calling searchSourceByCode!");
                    EVSSourceSearchParams evsSourceParam = new EVSSourceSearchParams();
                    evsSourceParam.setCode("N035552");
                    evsSourceParam.setSourceAbbreviation("NCI2006_05D");

                    MetaThesaurusConcept[] metaConcept2 = client.searchSourceByCode(evsSourceParam);

                    if (metaConcept2 != null && metaConcept2.length > 0)
                    {
                        for (int i=0; i < metaConcept2.length; i++)
                        {
                            MetaThesaurusConcept meta = metaConcept2[i];
                            System.out.println("meta[" + i + "] = " + meta.getName() + "\t" + meta.getCui());
                        }
                    }
                    else
                    {
                        System.out.println("searchSourceByCode Not yet implemented!");
                    }

                    System.out.println("Calling getVocabularyNames!");
                    // Get Vocabulary Names
                    DescLogicConceptVocabularyName[] desclogicConceptNames = client.getVocabularyNames();

                    if ( desclogicConceptNames.length > 0)
                    {
                        for (int i=0; i < desclogicConceptNames.length; i++)
                        {
                            DescLogicConceptVocabularyName name = desclogicConceptNames[i];
                            System.out.println("DescLogicConceptVocabularyName[" + i + "] = " + name.getVocabularyName());
                        }
                    }
                    else
                    {
                        System.out.println("getVocabularyNames Not yet implemented!");
                    }

                    // Searching DesclogicConcept
                    System.out.println("Calling searchDescLogicConcept!");
                    EVSDescLogicConceptSearchParams  evsSearchParams = new EVSDescLogicConceptSearchParams();
                    evsSearchParams.setVocabularyName("NCI_Thesaurus");
                    evsSearchParams.setSearchTerm("blood*");
                    evsSearchParams.setLimit(10);

                    DescLogicConcept[] descLogicConcepts = client.searchDescLogicConcept(evsSearchParams);

                    if (descLogicConcepts != null)
                    {
                        if ( descLogicConcepts.length > 0)
                        {
                            for (int i=0; i < descLogicConcepts.length; i++)
                            {
                                DescLogicConcept descConcept = descLogicConcepts[i];
                                if ( descConcept != null)
                                    System.out.println("DescLogicConcept[" + i + "] = " + descConcept.getName());
                            }
                        }
                        else
                        {
                            System.out.println("searchDescLogicConcept Not yet implemented!");
                        }

                    }

                    /// Searching History Records
                    System.out.println("Calling History Records!");
                    EVSHistoryRecordsSearchParams  evsHistoryParams = new EVSHistoryRecordsSearchParams();
                    evsHistoryParams.setVocabularyName("NCI_Thesaurus");
                    evsHistoryParams.setConceptCode("C16612");

                    HistoryRecord[] historys = client.getHistoryRecords(evsHistoryParams);

                    if ( historys.length > 0)
                    {
                        for (int i=0; i < historys.length; i++)
                        {
                            HistoryRecord history = historys[i];
                            System.out.println("History[" + i + "] = " + history.getDescLogicConceptCode());
                        }
                    }
                    else
                    {
                        System.out.println("getHistoryRecords Not yet implemented!");
                    }

                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

  public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");
    gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
    gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);
    return boxedResult.getServiceSecurityMetadata();
    }
  }

  public gov.nih.nci.cagrid.evs.service.DescLogicConceptVocabularyName[] getVocabularyNames() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getVocabularyNames");
    gov.nih.nci.cagrid.evsgridservice.stubs.GetVocabularyNamesRequest params = new gov.nih.nci.cagrid.evsgridservice.stubs.GetVocabularyNamesRequest();
    gov.nih.nci.cagrid.evsgridservice.stubs.GetVocabularyNamesResponse boxedResult = portType.getVocabularyNames(params);
    return boxedResult.getDescLogicConceptVocabularyName();
    }
  }

  public gov.nih.nci.evs.domain.Source[] getMetaSources() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMetaSources");
    gov.nih.nci.cagrid.evsgridservice.stubs.GetMetaSourcesRequest params = new gov.nih.nci.cagrid.evsgridservice.stubs.GetMetaSourcesRequest();
    gov.nih.nci.cagrid.evsgridservice.stubs.GetMetaSourcesResponse boxedResult = portType.getMetaSources(params);
    return boxedResult.getSource();
    }
  }

  public gov.nih.nci.evs.domain.DescLogicConcept[] searchDescLogicConcept(gov.nih.nci.cagrid.evs.service.EVSDescLogicConceptSearchParams eVSDescLogicConceptSearchParams) throws RemoteException, gov.nih.nci.cagrid.evsgridservice.stubs.types.InvalidInputExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"searchDescLogicConcept");
    gov.nih.nci.cagrid.evsgridservice.stubs.SearchDescLogicConceptRequest params = new gov.nih.nci.cagrid.evsgridservice.stubs.SearchDescLogicConceptRequest();
    gov.nih.nci.cagrid.evsgridservice.stubs.SearchDescLogicConceptRequestEVSDescLogicConceptSearchParams eVSDescLogicConceptSearchParamsContainer = new gov.nih.nci.cagrid.evsgridservice.stubs.SearchDescLogicConceptRequestEVSDescLogicConceptSearchParams();
    eVSDescLogicConceptSearchParamsContainer.setEVSDescLogicConceptSearchParams(eVSDescLogicConceptSearchParams);
    params.setEVSDescLogicConceptSearchParams(eVSDescLogicConceptSearchParamsContainer);
    gov.nih.nci.cagrid.evsgridservice.stubs.SearchDescLogicConceptResponse boxedResult = portType.searchDescLogicConcept(params);
    return boxedResult.getDescLogicConcept();
    }
  }

  public gov.nih.nci.evs.domain.MetaThesaurusConcept[] searchMetaThesaurus(gov.nih.nci.cagrid.evs.service.EVSMetaThesaurusSearchParams eVSMetaThesaurusSearchParams) throws RemoteException, gov.nih.nci.cagrid.evsgridservice.stubs.types.InvalidInputExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"searchMetaThesaurus");
    gov.nih.nci.cagrid.evsgridservice.stubs.SearchMetaThesaurusRequest params = new gov.nih.nci.cagrid.evsgridservice.stubs.SearchMetaThesaurusRequest();
    gov.nih.nci.cagrid.evsgridservice.stubs.SearchMetaThesaurusRequestEVSMetaThesaurusSearchParams eVSMetaThesaurusSearchParamsContainer = new gov.nih.nci.cagrid.evsgridservice.stubs.SearchMetaThesaurusRequestEVSMetaThesaurusSearchParams();
    eVSMetaThesaurusSearchParamsContainer.setEVSMetaThesaurusSearchParams(eVSMetaThesaurusSearchParams);
    params.setEVSMetaThesaurusSearchParams(eVSMetaThesaurusSearchParamsContainer);
    gov.nih.nci.cagrid.evsgridservice.stubs.SearchMetaThesaurusResponse boxedResult = portType.searchMetaThesaurus(params);
    return boxedResult.getMetaThesaurusConcept();
    }
  }

  public gov.nih.nci.evs.domain.HistoryRecord[] getHistoryRecords(gov.nih.nci.cagrid.evs.service.EVSHistoryRecordsSearchParams eVSHistoryRecordsSearchParams) throws RemoteException, gov.nih.nci.cagrid.evsgridservice.stubs.types.InvalidInputExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getHistoryRecords");
    gov.nih.nci.cagrid.evsgridservice.stubs.GetHistoryRecordsRequest params = new gov.nih.nci.cagrid.evsgridservice.stubs.GetHistoryRecordsRequest();
    gov.nih.nci.cagrid.evsgridservice.stubs.GetHistoryRecordsRequestEVSHistoryRecordsSearchParams eVSHistoryRecordsSearchParamsContainer = new gov.nih.nci.cagrid.evsgridservice.stubs.GetHistoryRecordsRequestEVSHistoryRecordsSearchParams();
    eVSHistoryRecordsSearchParamsContainer.setEVSHistoryRecordsSearchParams(eVSHistoryRecordsSearchParams);
    params.setEVSHistoryRecordsSearchParams(eVSHistoryRecordsSearchParamsContainer);
    gov.nih.nci.cagrid.evsgridservice.stubs.GetHistoryRecordsResponse boxedResult = portType.getHistoryRecords(params);
    return boxedResult.getHistoryRecord();
    }
  }

  public gov.nih.nci.evs.domain.MetaThesaurusConcept[] searchSourceByCode(gov.nih.nci.cagrid.evs.service.EVSSourceSearchParams eVSSourceSearchParams) throws RemoteException, gov.nih.nci.cagrid.evsgridservice.stubs.types.InvalidInputExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"searchSourceByCode");
    gov.nih.nci.cagrid.evsgridservice.stubs.SearchSourceByCodeRequest params = new gov.nih.nci.cagrid.evsgridservice.stubs.SearchSourceByCodeRequest();
    gov.nih.nci.cagrid.evsgridservice.stubs.SearchSourceByCodeRequestEVSSourceSearchParams eVSSourceSearchParamsContainer = new gov.nih.nci.cagrid.evsgridservice.stubs.SearchSourceByCodeRequestEVSSourceSearchParams();
    eVSSourceSearchParamsContainer.setEVSSourceSearchParams(eVSSourceSearchParams);
    params.setEVSSourceSearchParams(eVSSourceSearchParamsContainer);
    gov.nih.nci.cagrid.evsgridservice.stubs.SearchSourceByCodeResponse boxedResult = portType.searchSourceByCode(params);
    return boxedResult.getMetaThesaurusConcept();
    }
  }

}
