package gov.nih.nci.cagrid.authentication.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.authentication.stubs.AuthenticationServicePortType;
import gov.nih.nci.cagrid.authentication.stubs.service.AuthenticationServiceAddressingLocator;
import gov.nih.nci.cagrid.authentication.bean.BasicAuthenticationCredential;
import gov.nih.nci.cagrid.authentication.bean.Credential;
import gov.nih.nci.cagrid.authentication.bean.SAMLAssertion;
import gov.nih.nci.cagrid.authentication.common.AuthenticationServiceI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class AuthenticationServiceClient extends ServiceSecurityClient implements AuthenticationServiceI {	
	protected AuthenticationServicePortType portType;
	private Object portTypeMutex;

	public AuthenticationServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public AuthenticationServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	   	initialize();
	}
	
	public AuthenticationServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public AuthenticationServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
		initialize();
	}
	
	private void initialize() throws RemoteException {
	    this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private AuthenticationServicePortType createPortType() throws RemoteException {

		AuthenticationServiceAddressingLocator locator = new AuthenticationServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		AuthenticationServicePortType port = null;
		try {
			port = locator.getAuthenticationServicePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage(){
		System.out.println(AuthenticationServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  AuthenticationServiceClient client = new AuthenticationServiceClient(args[1]);
			  BasicAuthenticationCredential bac = new BasicAuthenticationCredential();
			  bac.setUserId("user1");
			  bac.setPassword("password1");
			  Credential cred = new Credential();
			  cred.setBasicAuthenticationCredential(bac);
			  SAMLAssertion saml = client.authenticate(cred);
			  System.out.println(saml);
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

    public gov.nih.nci.cagrid.authentication.bean.SAMLAssertion authenticate(gov.nih.nci.cagrid.authentication.bean.Credential credential) throws RemoteException, gov.nih.nci.cagrid.authentication.stubs.types.InvalidCredentialFault, gov.nih.nci.cagrid.authentication.stubs.types.InsufficientAttributeFault, gov.nih.nci.cagrid.authentication.stubs.types.AuthenticationProviderFault {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"authenticate");
        gov.nih.nci.cagrid.authentication.stubs.AuthenticateRequest params = new gov.nih.nci.cagrid.authentication.stubs.AuthenticateRequest();
        gov.nih.nci.cagrid.authentication.stubs.AuthenticateRequestCredential credentialContainer = new gov.nih.nci.cagrid.authentication.stubs.AuthenticateRequestCredential();
        credentialContainer.setCredential(credential);
        params.setCredential(credentialContainer);
        gov.nih.nci.cagrid.authentication.stubs.AuthenticateResponse boxedResult = portType.authenticate(params);
        return boxedResult.getSAMLAssertion();
      }
    }
    public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");
        gov.nih.nci.cagrid.introduce.security.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.GetServiceSecurityMetadataRequest();
        gov.nih.nci.cagrid.introduce.security.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);
        return boxedResult.getServiceSecurityMetadata();
      }
    }

}
