package org.cagrid.gme.client;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Map;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.cagrid.gme.common.FilesystemCacher;
import org.cagrid.gme.common.GlobalModelExchangeI;
import org.cagrid.gme.domain.XMLSchemaBundle;
import org.cagrid.gme.domain.XMLSchemaNamespace;
import org.cagrid.gme.stubs.GlobalModelExchangePortType;
import org.cagrid.gme.stubs.service.GlobalModelExchangeServiceAddressingLocator;
import org.cagrid.gme.stubs.types.NoSuchNamespaceExistsFault;
import org.globus.gsi.GlobusCredential;


/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE METHODS. This
 * client is generated automatically by Introduce to provide a clean unwrapped
 * API to the service. On construction the class instance will contact the
 * remote service and retrieve it's security metadata description which it will
 * use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class GlobalModelExchangeClient extends ServiceSecurityClient implements GlobalModelExchangeI {
    protected GlobalModelExchangePortType portType;
    protected static Log LOG = LogFactory.getLog(GlobalModelExchangeClient.class.getName());

    private Object portTypeMutex;


    public GlobalModelExchangeClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }


    public GlobalModelExchangeClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
        initialize();
    }


    public GlobalModelExchangeClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }


    public GlobalModelExchangeClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException,
        RemoteException {
        super(epr, proxy);
        initialize();
    }


    private void initialize() throws RemoteException {
        this.portTypeMutex = new Object();
        this.portType = createPortType();
    }


    private GlobalModelExchangePortType createPortType() throws RemoteException {

        GlobalModelExchangeServiceAddressingLocator locator = new GlobalModelExchangeServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        GlobalModelExchangePortType port = null;
        try {
            port = locator.getGlobalModelExchangePortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }


    public static void usage() {
        System.out.println(GlobalModelExchangeClient.class.getName() + " -url <service url>");
    }


    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    GlobalModelExchangeClient client = new GlobalModelExchangeClient(args[1]);
                    // place client calls here if you want to use this main as a
                    // test....

                    // client.addSchema(null);

                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }


    @Override
    public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata()
        throws RemoteException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "getServiceSecurityMetadata");
            gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
            gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = this.portType
                .getServiceSecurityMetadata(params);
            return boxedResult.getServiceSecurityMetadata();
        }
    }


    public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(
        org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "getMultipleResourceProperties");
            return this.portType.getMultipleResourceProperties(params);
        }
    }


    public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params)
        throws RemoteException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "getResourceProperty");
            return this.portType.getResourceProperty(params);
        }
    }


    public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(
        org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "queryResourceProperties");
            return this.portType.queryResourceProperties(params);
        }
    }


    public void publishXMLSchemas(org.cagrid.gme.domain.XMLSchema[] schemas) throws RemoteException,
        org.cagrid.gme.stubs.types.InvalidSchemaSubmissionFault {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "publishXMLSchemas");
            org.cagrid.gme.stubs.PublishXMLSchemasRequest params = new org.cagrid.gme.stubs.PublishXMLSchemasRequest();
            org.cagrid.gme.stubs.PublishXMLSchemasRequestSchemas schemasContainer = new org.cagrid.gme.stubs.PublishXMLSchemasRequestSchemas();
            schemasContainer.setXMLSchema(schemas);
            params.setSchemas(schemasContainer);
            org.cagrid.gme.stubs.PublishXMLSchemasResponse boxedResult = this.portType.publishXMLSchemas(params);
        }
    }


    public org.cagrid.gme.domain.XMLSchema getXMLSchema(org.cagrid.gme.domain.XMLSchemaNamespace targetNamespace)
        throws RemoteException, org.cagrid.gme.stubs.types.NoSuchNamespaceExistsFault {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "getXMLSchema");
            org.cagrid.gme.stubs.GetXMLSchemaRequest params = new org.cagrid.gme.stubs.GetXMLSchemaRequest();
            org.cagrid.gme.stubs.GetXMLSchemaRequestTargetNamespace targetNamespaceContainer = new org.cagrid.gme.stubs.GetXMLSchemaRequestTargetNamespace();
            targetNamespaceContainer.setXMLSchemaNamespace(targetNamespace);
            params.setTargetNamespace(targetNamespaceContainer);
            org.cagrid.gme.stubs.GetXMLSchemaResponse boxedResult = this.portType.getXMLSchema(params);
            return boxedResult.getXMLSchema();
        }
    }


    public org.cagrid.gme.domain.XMLSchemaNamespace[] getXMLSchemaNamespaces() throws RemoteException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "getXMLSchemaNamespaces");
            org.cagrid.gme.stubs.GetXMLSchemaNamespacesRequest params = new org.cagrid.gme.stubs.GetXMLSchemaNamespacesRequest();
            org.cagrid.gme.stubs.GetXMLSchemaNamespacesResponse boxedResult = this.portType
                .getXMLSchemaNamespaces(params);
            return boxedResult.getXMLSchemaNamespace();
        }
    }


    public Map<XMLSchemaNamespace, File> cacheSchemas(XMLSchemaNamespace targetNamespace, File directory)
        throws NoSuchNamespaceExistsFault, IOException, RemoteException {
        XMLSchemaBundle bundle = getXMLSchemaAndDependencies(targetNamespace);
        FilesystemCacher cacher = new FilesystemCacher(bundle, directory);
        Map<URI, File> cachedSchemas = cacher.cacheSchemas();

        Map<XMLSchemaNamespace, File> result = new HashMap<XMLSchemaNamespace, File>();
        for (URI uri : cachedSchemas.keySet()) {
            result.put(new XMLSchemaNamespace(uri), cachedSchemas.get(uri));
        }
        return result;
    }


    public org.cagrid.gme.domain.XMLSchemaBundle getXMLSchemaAndDependencies(
        org.cagrid.gme.domain.XMLSchemaNamespace targetNamespace) throws RemoteException,
        org.cagrid.gme.stubs.types.NoSuchNamespaceExistsFault {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "getXMLSchemaAndDependencies");
            org.cagrid.gme.stubs.GetXMLSchemaAndDependenciesRequest params = new org.cagrid.gme.stubs.GetXMLSchemaAndDependenciesRequest();
            org.cagrid.gme.stubs.GetXMLSchemaAndDependenciesRequestTargetNamespace targetNamespaceContainer = new org.cagrid.gme.stubs.GetXMLSchemaAndDependenciesRequestTargetNamespace();
            targetNamespaceContainer.setXMLSchemaNamespace(targetNamespace);
            params.setTargetNamespace(targetNamespaceContainer);
            org.cagrid.gme.stubs.GetXMLSchemaAndDependenciesResponse boxedResult = this.portType
                .getXMLSchemaAndDependencies(params);
            return boxedResult.getXMLSchemaBundle();
        }
    }


    public void deleteXMLSchemas(org.cagrid.gme.domain.XMLSchemaNamespace[] targetNamespaces) throws RemoteException,
        org.cagrid.gme.stubs.types.NoSuchNamespaceExistsFault, org.cagrid.gme.stubs.types.UnableToDeleteSchemaFault {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "deleteXMLSchemas");
            org.cagrid.gme.stubs.DeleteXMLSchemasRequest params = new org.cagrid.gme.stubs.DeleteXMLSchemasRequest();
            org.cagrid.gme.stubs.DeleteXMLSchemasRequestTargetNamespaces targetNamespacesContainer = new org.cagrid.gme.stubs.DeleteXMLSchemasRequestTargetNamespaces();
            targetNamespacesContainer.setXMLSchemaNamespace(targetNamespaces);
            params.setTargetNamespaces(targetNamespacesContainer);
            org.cagrid.gme.stubs.DeleteXMLSchemasResponse boxedResult = this.portType.deleteXMLSchemas(params);
        }
    }


    public org.cagrid.gme.domain.XMLSchemaNamespace[] getImportedXMLSchemaNamespaces(
        org.cagrid.gme.domain.XMLSchemaNamespace targetNamespace) throws RemoteException,
        org.cagrid.gme.stubs.types.NoSuchNamespaceExistsFault {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "getImportedXMLSchemaNamespaces");
            org.cagrid.gme.stubs.GetImportedXMLSchemaNamespacesRequest params = new org.cagrid.gme.stubs.GetImportedXMLSchemaNamespacesRequest();
            org.cagrid.gme.stubs.GetImportedXMLSchemaNamespacesRequestTargetNamespace targetNamespaceContainer = new org.cagrid.gme.stubs.GetImportedXMLSchemaNamespacesRequestTargetNamespace();
            targetNamespaceContainer.setXMLSchemaNamespace(targetNamespace);
            params.setTargetNamespace(targetNamespaceContainer);
            org.cagrid.gme.stubs.GetImportedXMLSchemaNamespacesResponse boxedResult = this.portType
                .getImportedXMLSchemaNamespaces(params);
            return boxedResult.getXMLSchemaNamespace();
        }
    }


    public org.cagrid.gme.domain.XMLSchemaNamespace[] getImportingXMLSchemaNamespaces(
        org.cagrid.gme.domain.XMLSchemaNamespace targetNamespace) throws RemoteException,
        org.cagrid.gme.stubs.types.NoSuchNamespaceExistsFault {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "getImportingXMLSchemaNamespaces");
            org.cagrid.gme.stubs.GetImportingXMLSchemaNamespacesRequest params = new org.cagrid.gme.stubs.GetImportingXMLSchemaNamespacesRequest();
            org.cagrid.gme.stubs.GetImportingXMLSchemaNamespacesRequestTargetNamespace targetNamespaceContainer = new org.cagrid.gme.stubs.GetImportingXMLSchemaNamespacesRequestTargetNamespace();
            targetNamespaceContainer.setXMLSchemaNamespace(targetNamespace);
            params.setTargetNamespace(targetNamespaceContainer);
            org.cagrid.gme.stubs.GetImportingXMLSchemaNamespacesResponse boxedResult = this.portType
                .getImportingXMLSchemaNamespaces(params);
            return boxedResult.getXMLSchemaNamespace();
        }
    }

}
