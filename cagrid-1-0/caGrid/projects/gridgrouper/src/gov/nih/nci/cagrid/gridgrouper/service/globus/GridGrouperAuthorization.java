package gov.nih.nci.cagrid.gridgrouper.service.globus;


import java.rmi.RemoteException;
import javax.security.auth.Subject;
import javax.xml.namespace.QName;
import javax.xml.rpc.handler.MessageContext;

import org.globus.wsrf.impl.security.authorization.exceptions.AuthorizationException;
import org.globus.wsrf.impl.security.authorization.exceptions.CloseException;
import org.globus.wsrf.impl.security.authorization.exceptions.InitializeException;
import org.globus.wsrf.impl.security.authorization.exceptions.InvalidPolicyException;
import org.globus.wsrf.security.authorization.PDP;
import org.globus.wsrf.security.authorization.PDPConfig;
import org.w3c.dom.Node;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This is a PDP for use with the globus authorization callout.
 * This class will have a authorize<methodName> method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version 1.1
 * 
 */
public class GridGrouperAuthorization implements PDP {

	public static final String SERVICE_NAMESPACE = "http://cagrid.nci.nih.gov/GridGrouper";
	
	
	public GridGrouperAuthorization() {
	}
	
	protected String getServiceNamespace(){
		return SERVICE_NAMESPACE;
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
					
	public static void authorizeGetServiceSecurityMetadata() throws RemoteException {
		
		
	}
					
	public static void authorizeGetStem() throws RemoteException {
		
		
	}
					
	public static void authorizeGetChildStems() throws RemoteException {
		
		
	}
					
	public static void authorizeGetParentStem() throws RemoteException {
		
		
	}
					
	public static void authorizeUpdateStem() throws RemoteException {
		
		
	}
					
	public static void authorizeGetSubjectsWithStemPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeGetStemPrivileges() throws RemoteException {
		
		
	}
					
	public static void authorizeHasStemPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeGrantStemPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeRevokeStemPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeAddChildStem() throws RemoteException {
		
		
	}
					
	public static void authorizeDeleteStem() throws RemoteException {
		
		
	}
					
	public static void authorizeGetGroup() throws RemoteException {
		
		
	}
					
	public static void authorizeGetChildGroups() throws RemoteException {
		
		
	}
					
	public static void authorizeAddChildGroup() throws RemoteException {
		
		
	}
					
	public static void authorizeDeleteGroup() throws RemoteException {
		
		
	}
					
	public static void authorizeUpdateGroup() throws RemoteException {
		
		
	}
					
	public static void authorizeAddMember() throws RemoteException {
		
		
	}
					
	public static void authorizeGetMembers() throws RemoteException {
		
		
	}
					
	public static void authorizeIsMemberOf() throws RemoteException {
		
		
	}
					
	public static void authorizeGetMemberships() throws RemoteException {
		
		
	}
					
	public static void authorizeDeleteMember() throws RemoteException {
		
		
	}
					
	public static void authorizeAddCompositeMember() throws RemoteException {
		
		
	}
					
	public static void authorizeDeleteCompositeMember() throws RemoteException {
		
		
	}
					
	public static void authorizeGrantGroupPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeRevokeGroupPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeGetSubjectsWithGroupPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeGetGroupPrivileges() throws RemoteException {
		
		
	}
					
	public static void authorizeHasGroupPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeIsMember() throws RemoteException {
		
		
	}
					
	public static void authorizeGetMember() throws RemoteException {
		
		
	}
					
	public static void authorizeGetMembersGroups() throws RemoteException {
		
		
	}
	
	
	public boolean isPermitted(Subject peerSubject, MessageContext context, QName operation)
		throws AuthorizationException {
		
		if(!operation.getNamespaceURI().equals(getServiceNamespace())){
		  return false;
		}
		if(operation.getLocalPart().equals("getServiceSecurityMetadata")){
			try{
				authorizeGetServiceSecurityMetadata();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getStem")){
			try{
				authorizeGetStem();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getChildStems")){
			try{
				authorizeGetChildStems();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getParentStem")){
			try{
				authorizeGetParentStem();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("updateStem")){
			try{
				authorizeUpdateStem();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getSubjectsWithStemPrivilege")){
			try{
				authorizeGetSubjectsWithStemPrivilege();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getStemPrivileges")){
			try{
				authorizeGetStemPrivileges();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("hasStemPrivilege")){
			try{
				authorizeHasStemPrivilege();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("grantStemPrivilege")){
			try{
				authorizeGrantStemPrivilege();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("revokeStemPrivilege")){
			try{
				authorizeRevokeStemPrivilege();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("addChildStem")){
			try{
				authorizeAddChildStem();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("deleteStem")){
			try{
				authorizeDeleteStem();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getGroup")){
			try{
				authorizeGetGroup();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getChildGroups")){
			try{
				authorizeGetChildGroups();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("addChildGroup")){
			try{
				authorizeAddChildGroup();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("deleteGroup")){
			try{
				authorizeDeleteGroup();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("updateGroup")){
			try{
				authorizeUpdateGroup();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("addMember")){
			try{
				authorizeAddMember();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getMembers")){
			try{
				authorizeGetMembers();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("isMemberOf")){
			try{
				authorizeIsMemberOf();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getMemberships")){
			try{
				authorizeGetMemberships();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("deleteMember")){
			try{
				authorizeDeleteMember();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("addCompositeMember")){
			try{
				authorizeAddCompositeMember();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("deleteCompositeMember")){
			try{
				authorizeDeleteCompositeMember();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("grantGroupPrivilege")){
			try{
				authorizeGrantGroupPrivilege();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("revokeGroupPrivilege")){
			try{
				authorizeRevokeGroupPrivilege();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getSubjectsWithGroupPrivilege")){
			try{
				authorizeGetSubjectsWithGroupPrivilege();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getGroupPrivileges")){
			try{
				authorizeGetGroupPrivileges();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("hasGroupPrivilege")){
			try{
				authorizeHasGroupPrivilege();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("isMember")){
			try{
				authorizeIsMember();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getMember")){
			try{
				authorizeGetMember();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getMembersGroups")){
			try{
				authorizeGetMembersGroups();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} 		
		return false;
	}
	

	public Node getPolicy(Node query) throws InvalidPolicyException {
		return null;
	}


	public String[] getPolicyNames() {
		return null;
	}


	public Node setPolicy(Node policy) throws InvalidPolicyException {
		return null;
	}


	public void close() throws CloseException {


	}


	public void initialize(PDPConfig config, String name, String id) throws InitializeException {

	}
	
	
}
