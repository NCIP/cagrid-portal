package gov.nih.nci.cagrid.gridgrouper.service.globus;


import java.rmi.RemoteException;

/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class will have a authorize<methodName> method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either simple return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version 1.0
 * 
 */
public class GridGrouperAuthorization{
	
	
	public GridGrouperAuthorization() {
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
	
					
	public static void authorizeGetStem() throws RemoteException {
		
		
	}
					
	public static void authorizeGetChildStems() throws RemoteException {
		
		
	}
					
	public static void authorizeGetParentStem() throws RemoteException {
		
		
	}
					
	public static void authorizeUpdateStem() throws RemoteException {
		
		
	}
					
	public static void authorizeGetSubjectsWithStemPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeGetStemPrivileges() throws RemoteException {
		
		
	}
					
	public static void authorizeHasStemPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeGrantStemPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeRevokeStemPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeAddChildStem() throws RemoteException {
		
		
	}
					
	public static void authorizeDeleteStem() throws RemoteException {
		
		
	}
					
	public static void authorizeGetGroup() throws RemoteException {
		
		
	}
					
	public static void authorizeGetChildGroups() throws RemoteException {
		
		
	}
					
	public static void authorizeAddChildGroup() throws RemoteException {
		
		
	}
					
	public static void authorizeDeleteGroup() throws RemoteException {
		
		
	}
					
	public static void authorizeUpdateGroup() throws RemoteException {
		
		
	}
					
	public static void authorizeAddMember() throws RemoteException {
		
		
	}
					
	public static void authorizeGetMembers() throws RemoteException {
		
		
	}
					
	public static void authorizeIsMemberOf() throws RemoteException {
		
		
	}
					
	public static void authorizeGetMemberships() throws RemoteException {
		
		
	}
					
	public static void authorizeDeleteMember() throws RemoteException {
		
		
	}
					
	public static void authorizeAddCompositeMember() throws RemoteException {
		
		
	}
					
	public static void authorizeDeleteCompositeMember() throws RemoteException {
		
		
	}
					
	public static void authorizeGrantGroupPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeRevokeGroupPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeGetSubjectsWithGroupPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeGetGroupPrivileges() throws RemoteException {
		
		
	}
					
	public static void authorizeHasGroupPrivilege() throws RemoteException {
		
		
	}
					
	public static void authorizeIsMember() throws RemoteException {
		
		
	}
	
	
}
