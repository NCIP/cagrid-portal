package gov.nih.nci.cagrid.syncgts.client;


import gov.nih.nci.cagrid.syncgts.common.SyncGTSI;
import gov.nih.nci.cagrid.syncgts.stubs.SyncGTSPortType;
import gov.nih.nci.cagrid.syncgts.stubs.service.SyncGTSServiceAddressingLocator;

import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.globus.gsi.GlobusCredential;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class SyncGTSClient implements SyncGTSI {
	
	private SyncGTSServiceAddressingLocator locator;
	private GlobusCredential proxy;
	private String url;
	
	static{
		org.globus.axis.util.Util.registerTransport();
	}
	
	public SyncGTSClient(String url) {
		this(url,null);	
	}

	public SyncGTSClient(String url, GlobusCredential proxy) {
	   	this.proxy = proxy;
	   	this.url = url;	
	}

	private SyncGTSPortType getPortType(){
		try {
		SyncGTSServiceAddressingLocator locator = new SyncGTSServiceAddressingLocator();
		EndpointReferenceType endpoint = new EndpointReferenceType();
		endpoint.setAddress(new Address(url));
			SyncGTSPortType port = locator.getSyncGTSPortTypePort(endpoint);
			return port;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public static void usage(){
		System.out.println(SyncGTSClient.class.getName() + " -gsh [gsh]");
	}
	
	public static void main(String [] args){
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-gsh")){
			  SyncGTSClient client = new SyncGTSClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

}