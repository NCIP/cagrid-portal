<%@ jet package="gov.nih.nci.cagrid.bdt.templates" class="BDTResourceTemplate" imports="gov.nih.nci.cagrid.introduce.info.* gov.nih.nci.cagrid.introduce.codegen.utils.* gov.nih.nci.cagrid.introduce.codegen.* gov.nih.nci.cagrid.introduce.beans.namespace.* java.util.* gov.nih.nci.cagrid.introduce.beans.resource.*"%>
<%  gov.nih.nci.cagrid.introduce.info.SpecificServiceInformation arguments = (gov.nih.nci.cagrid.introduce.info.SpecificServiceInformation) argument; 
  	Properties properties = arguments.getIntroduceServiceProperties();
	ResourcePropertiesListType metadataList = arguments.getService().getResourcePropertiesList();
	String serviceName = properties.getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME);
	String modifiedServiceName = serviceName;
	if(serviceName.endsWith("Service")){
		modifiedServiceName = serviceName.substring(0,serviceName.length()-"Service".length());
	}
%>
package <%=arguments.getService().getPackageName()%>.service;

import gov.nih.nci.cagrid.bdt.service.globus.resource.BDTResourceBase;
import gov.nih.nci.cagrid.bdt.service.globus.resource.BDTResourceI;
import gov.nih.nci.cagrid.bdt.service.globus.resource.BDTException;

import org.globus.transfer.AnyXmlType;
import org.globus.ws.enumeration.EnumIterator;
import org.globus.wsrf.ResourceException;

/**
* BDTResource is to represent the backend resource that will be persisted during this 
* transfer of data to the callers. It is expected that the creator of this class will
* implement at least the createEnumeration get methods and may add other mechanisms 
* for transfer.  
*/
public class BDTResource extends BDTResourceBase implements BDTResourceI {


	/**
	* This method will create a WS-Enumeration EnumIterator  Once this Iterator is created
	* the client will be able to use it to iterate through the results.
	*/
	public EnumIterator createEnumeration() throws BDTException {
	  //TODO: Implement me
	  throw new BDTException("\"createEnumeration()\" not yet implemented");
	}
	
	/**
	* This method will return the results as an XMLAnyType.  Essentially an XML blob.
	*/
	public AnyXmlType get() throws BDTException {
	  //TODO: Implement me
	  throw new BDTException("\"get()\" not yet implemented");
	}
	
	/**
	* This will return the results as a staged set of GridFTP URLS which can then be
	* retieved using GridFTP client.
	*/
	public org.apache.axis.types.URI[] getGridFTPURLs() throws BDTException {
	  //TODO: Implement me
	  throw new BDTException("\"get()\" not yet implemented");
    }
    
   	/**
	* This is the callback to destroy this resource. If anything needs to be cleaned up
	* when this resource is destroyed it should be done here.
	*/
    public void remove() throws ResourceException {
		// TODO Implement me
	}
    
}
