<!-- ======================================================================= -->
<!-- caGrid Analytical Utilities build file                                  -->
<!-- ======================================================================= -->
<project name="introduce_creator" basedir="." default="usage">
	<!-- Define the environment variable -->
	<property environment="env"/>
	<property name="ext.globus.location" location="${env.GLOBUS_LOCATION}"/>
	<property name="introduce.skeleton.dir" location="${basedir}/skeleton"/>
	<property name="introduce.skeleton.destination.dir.default" location="${user.home}/caGridServiceSkeleton"/>
	<property name="introduce.skeleton.service.name.default" value="ExampleService"/>
	<property name="introduce.skeleton.package.default" value="gov.nih.nci.cagrid"/>
	<property name="introduce.skeleton.package.dir.default" value="gov/nih/nci/cagrid"/>
	<property name="introduce.skeleton.namespace.domain.default" value="http://cagrid.nci.nih.gov"/>
	<property name="introduce.skeleton.extensions.default" value=""/>
	<!-- ============================================================== -->
	<!-- Globus properties                                              -->
	<!-- ============================================================== -->
	<target name="checkGlobus" depends="setGlobus">
		<condition property="globus.not.found">
			<or>
				<not>
					<isset property="ext.globus.dir"/>
				</not>
				<equals arg1="${ext.globus.dir}" arg2=""/>
			</or>
		</condition>
		<fail message="Globus installation is not set in either GLOBUS_LOCATION or ext.globus.dir" if="globus.not.found"/>
		<echo message="Globus: ${ext.globus.dir}"/>
	</target>
	<target name="setGlobus" if="env.GLOBUS_LOCATION">
		<property name="ext.globus.dir" value="${env.GLOBUS_LOCATION}"/>
		<property name="build.stubs" location="${ext.globus.dir}/share/globus_wsrf_tools/build-stubs.xml"/>
		<property name="schema.src" location="${ext.globus.dir}/share/schema"/>
	</target>
	<taskdef name="createSkeleton" classname="gov.nih.nci.cagrid.introduce.creator.SkeletonCreator">
		<classpath>
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${extensions.lib.dir}">
				<include name="*.jar"/>
				<exclude name="${jars.prefixname}*.jar"/>
			</fileset>
			<fileset dir="${ant.library.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${build.lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${ext.globus.location}/lib">
				<include name="*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<taskdef name="postCreateSkeleton" classname="gov.nih.nci.cagrid.introduce.creator.SkeletonPostCreator">
		<classpath>
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${extensions.lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${ant.library.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${build.lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${ext.globus.location}/lib">
				<include name="*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<target name="usage">
		<echo message="Not to be called directly.  This file contains utilities to be used in other    build files."/>
	</target>
	<target name="createService" description="Will create an anaytical skeleton deployment"
		depends="checkGlobus, checkInputProps, copySkeleton, setActivePath"> </target>
	<target name="postCreateService" description="Will post create an anaytical skeleton deployment">
		<postCreateSkeleton/>
	</target>
	<target name="setActivePath">
		<property name="active.skeleton.destination.dir" value="${introduce.skeleton.destination.dir}"/>
	</target>
	<target name="copySkeleton" depends="prepareSkeleton">
		<copy todir="${introduce.skeleton.destination.dir}">
			<fileset dir="${introduce.skeleton.dir}">
				<include name="**\*"/>
			</fileset>
		</copy>
		<copy todir="${introduce.skeleton.destination.dir}/lib" flatten="true" includeemptydirs="false">
			<fileset dir="${ext.lib.dir}">
				<include name="caGrid-1.0-core.jar"/>
			</fileset>
		</copy>
		<!-- create the propertites files for this project-->
		<propertyfile file="${introduce.skeleton.destination.dir}/introduce.properties"
			comment="Service introdue properties">
			<entry key="introduce.skeleton.service.name" value="${introduce.skeleton.service.name}"/>
			<entry key="introduce.skeleton.timestamp" value="0"/>
			<entry key="introduce.skeleton.namespace.domain" value="${introduce.skeleton.namespace.domain}"/>
			<entry key="introduce.skeleton.services.list" value="${introduce.skeleton.service.name}"/>
			<entry key="introduce.skeleton.extensions" value="${introduce.skeleton.extensions}"/>
		</propertyfile>
		<!-- call our creation ant task -->
		<createSkeleton/>
		<!-- do replacements on the basic service files -->
		<replace file="${introduce.skeleton.destination.dir}/namespace2package.mappings" token=":" value="\:"/>
		<replace file="${introduce.skeleton.destination.dir}/namespace2package.mappings" token="\\:" value="\:"/>
	</target>
	<target name="checkLoadPropertiesFile" if="introduce.properties">
		<property file="${introduce.properties}"/>
	</target>
	<target name="checkInputProps" depends="checkLoadPropertiesFile">
		<condition property="noInputNeeded">
			<and>
				<and>
					<and>
						<and>
							<and>
								<isset property="introduce.skeleton.service.name"/>
								<isset property="introduce.skeleton.destination.dir"/>
							</and>
							<isset property="introduce.skeleton.extensions"/>
						</and>
						<isset property="introduce.skeleton.package"/>
					</and>
					<isset property="introduce.skeleton.package.dir"/>
				</and>
				<isset property="introduce.skeleton.namespace.domain"/>
			</and>
		</condition>
	</target>
	<target name="prepareSkeleton" unless="noInputNeeded">
		<input
			message="Please enter the destination for your service skeleton    [${introduce.skeleton.destination.dir.default}]:"
			addproperty="introduce.skeleton.destination.dir"
			defaultvalue="${introduce.skeleton.destination.dir.default}"/>
		<input
			message="Please enter the name for this service (no spaces)    [${introduce.skeleton.service.name.default}]:"
			addproperty="introduce.skeleton.service.name" defaultvalue="${introduce.skeleton.service.name.default}"/>
		<input
			message="Please enter the package you would like to use for this service's source.    [${introduce.skeleton.package.default}]:"
			addproperty="introduce.skeleton.package" defaultvalue="${introduce.skeleton.package.default}"/>
		<input
			message="Please enter the package directory you would like to use for this service's    source. (this should match the package name above)    [${introduce.skeleton.package.dir.default}]:"
			addproperty="introduce.skeleton.package.dir" defaultvalue="${introduce.skeleton.package.dir.default}"/>
		<input
			message="Please enter the namespace domain of the introduce.    [${introduce.skeleton.namespace.domain.default}]:"
			addproperty="introduce.skeleton.namespace.domain"
			defaultvalue="${introduce.skeleton.namespace.domain.default}"/>
		<input
			message="Please enter any service extensions (separate by commas).    [${introduce.skeleton.extensions.default}]:"
			addproperty="introduce.skeleton.extensions" defaultvalue="${introduce.skeleton.extensions.default}"/>
	</target>
</project>
