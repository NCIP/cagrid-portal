<!-- ======================================================================= -->
<!-- caGrid Analytical Utilities build file                                  -->
<!-- ======================================================================= -->
<project name="introduce_creator" basedir="." default="usage">
	<!-- Define the environment variable -->
	<property environment="env"/>
	<property name="ext.globus.location" location="${env.GLOBUS_LOCATION}"/>
	<property name="introduce.skeleton.dir" location="${basedir}/skeleton"/>
	<property name="introduce.skeleton.destination.dir.default"
		location="${user.home}/caGridServiceSkeleton"/>
	<property name="introduce.skeleton.service.name.default" value="ExampleService"/>
	<property name="introduce.skeleton.package.default" value="gov.nih.nci.cagrid"/>
	<property name="introduce.skeleton.package.dir.default" value="gov/nih/nci/cagrid"/>
	<property name="introduce.skeleton.namespace.domain.default" value="http://cagrid.nci.nih.gov"/>
	<target name="usage">
		<echo message="Not to be called directly.  This file contains utilities to be used in other
			build files."/>
	</target>
	<target name="createService" description="Will create an anaytical skeleton deployment"
		depends=" checkInputProps, copySkeleton, copyCaGridJars, setActivePath"> </target>
	<taskdef name="createSkeleton" classname="gov.nih.nci.cagrid.introduce.creator.SkeletonCreator">
		<classpath>
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${ant.library.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${build.lib.dir}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${ext.globus.location}/lib">
				<include name="*.jar"/>
			</fileset>
		</classpath>
	</taskdef>
	<target name="setActivePath">
		<property name="active.skeleton.destination.dir"
			value="${introduce.skeleton.destination.dir}"/>
	</target>
	<target name="copySkeleton" depends="prepareSkeleton">
		<copy todir="${introduce.skeleton.destination.dir}">
			<fileset dir="${introduce.skeleton.dir}">
				<include name="**\*"/>
			</fileset>
		</copy>
		<!-- call our creation ant task -->
		<createSkeleton/>
		<copy todir="${introduce.skeleton.destination.dir}/resources">
			<fileset dir="${resources.dir}">
				<include name="**\*"/>
			</fileset>
		</copy>
		<!-- copy in common service metadata file etc. -->
		<copy todir="${introduce.skeleton.destination.dir}/schema">
			<fileset dir="${basedir}/ext/schema">
				<include name="**\*"/>
			</fileset>
		</copy>
		<!-- do replacements on the basic service files -->
		<replace file="${introduce.skeleton.destination.dir}/namespace2package.mappings" token=":"
			value="\:"/>
		<replace file="${introduce.skeleton.destination.dir}/namespace2package.mappings" token="\\:"
			value="\:"/>
		<!-- create the propertites files for this project-->
		<propertyfile file="${introduce.skeleton.destination.dir}/introduce.properties"
			comment="Service introdue properties">
			<entry key="introduce.skeleton.service.name" value="${introduce.skeleton.service.name}"/>
			<entry key="introduce.skeleton.timestamp" value="0"/>
			<entry key="introduce.skeleton.package" value="${introduce.skeleton.package}"/>
			<entry key="introduce.skeleton.package.dir" value="${introduce.skeleton.package.dir}"/>
			<entry key="introduce.skeleton.namespace.domain"
				value="${introduce.skeleton.namespace.domain}"/>
		</propertyfile>
	</target>
	<target name="checkLoadPropertiesFile" if="introduce.properties">
		<property file="${introduce.properties}"/>
	</target>
	<target name="checkInputProps" depends="checkLoadPropertiesFile">
		<condition property="noInputNeeded">
			<and>
				<and>
					<and>
						<and>
							<isset property="introduce.skeleton.service.name"/>
							<isset property="introduce.skeleton.destination.dir"/>
						</and>
						<isset property="introduce.skeleton.package"/>
					</and>
					<isset property="introduce.skeleton.package.dir"/>
				</and>
				<isset property="introduce.skeleton.namespace.domain"/>
			</and>
		</condition>
	</target>
	<target name="prepareSkeleton" unless="noInputNeeded">
		<input message="Please enter the destination for your service skeleton
			[${introduce.skeleton.destination.dir.default}]:"
			addproperty="introduce.skeleton.destination.dir"
			defaultvalue="${introduce.skeleton.destination.dir.default}"/>
		<input message="Please enter the name for this service (no spaces)
			[${introduce.skeleton.service.name.default}]:"
			addproperty="introduce.skeleton.service.name"
			defaultvalue="${introduce.skeleton.service.name.default}"/>
		<input message="Please enter the package you would like to use for this service's source.
			[${introduce.skeleton.package.default}]:" addproperty="introduce.skeleton.package"
			defaultvalue="${introduce.skeleton.package.default}"/>
		<input message="Please enter the package directory you would like to use for this service's
			source. (this should match the package name above)
			[${introduce.skeleton.package.dir.default}]:"
			addproperty="introduce.skeleton.package.dir"
			defaultvalue="${introduce.skeleton.package.dir.default}"/>
		<input message="Please enter the namespace domain of the introduce.
			[${introduce.skeleton.namespace.domain.default}]:"
			addproperty="introduce.skeleton.namespace.domain"
			defaultvalue="${introduce.skeleton.namespace.domain.default}"/>
	</target>
	<target name="copyCaGridJars" depends="prepareSkeleton,copySkeleton">
		<copy todir="${introduce.skeleton.destination.dir}/lib" flatten="true"
			includeemptydirs="false">
			<fileset dir="${ext.lib.dir}">
				<include name="*caGrid-core*"/>
			</fileset>
		</copy>
	</target>
</project>
