package gov.nih.nci.cagrid.introduce.security.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.introduce.security.stubs.ServiceSecurityPortType;
import gov.nih.nci.cagrid.introduce.security.stubs.service.ServiceSecurityServiceAddressingLocator;
import gov.nih.nci.cagrid.introduce.security.common.ServiceSecurityI;

/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class ServiceSecurityClient implements ServiceSecurityI {
	private GlobusCredential proxy;

	private EndpointReferenceType epr;

	static {
		org.globus.axis.util.Util.registerTransport();
	}

	public ServiceSecurityClient(String url) throws MalformedURIException {
		this(url, null);
	}

	public ServiceSecurityClient(String url, GlobusCredential proxy)
			throws MalformedURIException {
		this.proxy = proxy;
		this.epr = new EndpointReferenceType();
		this.epr.setAddress(new Address(url));
	}

	public ServiceSecurityClient(EndpointReferenceType epr)
			throws MalformedURIException {
		this(epr, null);
	}

	public ServiceSecurityClient(EndpointReferenceType epr,
			GlobusCredential proxy) throws MalformedURIException {
		this.proxy = proxy;
		this.epr = epr;
	}

	public EndpointReferenceType getEndpointReference() {
		return this.epr;
	}

	private ServiceSecurityPortType getPortType() throws RemoteException {

		ServiceSecurityServiceAddressingLocator locator = new ServiceSecurityServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(
				getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(
					resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		ServiceSecurityPortType port = null;
		try {
			port = locator.getServiceSecurityPortTypePort(this.epr);
		} catch (Exception e) {
			throw new RemoteException("Unable to configured porttype:"
					+ e.getMessage(), e);
		}

		return port;
	}

	public static void usage() {
		System.out.println(ServiceSecurityClient.class.getName()
				+ " -url <service url>");
	}

	public static void main(String[] args) {
		System.out.println("Running the Grid Service Client");
		try {
			if (!(args.length < 2)) {
				if (args[0].equals("-url")) {
					ServiceSecurityClient client = new ServiceSecurityClient(
							args[1]);
					// place client calls here if you want to use this main as a
					// test....
				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void configurePortType(
			gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata securityMetadata,
			org.apache.axis.client.Stub stub, String methodName) {

	}

	public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata()
			throws RemoteException {
		ServiceSecurityPortType port = this.getPortType();
		gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
		gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = port
				.getServiceSecurityMetadata(params);
		return boxedResult.getServiceSecurityMetadata();

	}

}
