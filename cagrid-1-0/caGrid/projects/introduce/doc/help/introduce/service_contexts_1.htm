<HTML>
<HEAD>
 <TITLE>Service Contexts</TITLE>
 <META NAME="generator" CONTENT="Adobe RoboHelp - www.adobe.com">
</HEAD>
<BODY style="font-family:'Arial'; font-size:12pt;  background-color:white;">
 <div id='NavBar' STYLE='text-align:right;' align='right'><nobr><font size=1 color='#c0c0c0' style='font-size:9pt;' ><a href='compositional_inheritance.htm'><img src='../bsscnav4.gif' width=27 height=19 border=no></a><a href='security_1.htm'><img src='../bsscnav5.gif' width=27 height=19 border=no></a></font>&nbsp;&nbsp;&nbsp;</nobr>
 </div>
 <H1 align="left"  style="font-size:12pt;margin-left:5.75pt;margin-right:6.50pt;margin-top:6.00pt;margin-bottom:2.00pt;text-align:left;" ><B><FONT size=3  style="font-family:'Arial'; font-size:12pt; font-weight:bold; " >Service Contexts</FONT></B></H1>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" ><FONT size=3  style="font-size:12pt; " >In grid services architecture it is sometimes required that a service not only maintain some extra information about the service but also maintain information (state) which is of particular interest to one particular user. These styles of grid service use cases have driven the requirements for specifying a mechanism for stateful Grid services. Each WSRF service manages its state by creating and manipulating Resources. A Resource can essentially be thought of as an arbitrary state representation, as defined by the service developer. The main restriction is that a given service can only manage a single given resource type. As previously stated in section 0, Introduce supports this mechanism through the Service Context concept. For example, a Data Service may want to define two contexts: the main &quot;Query&quot; context which provides the ability to query into a backend database, and the secondary &quot;Results Delivery&quot; context which provides the ability to iteratively access query results (similar to a remote cursor). Introduce implements these Service Contexts by creating a WSRF service for each context, and a corresponding Resource type. In this example, the Query Service will have a Resource type that represents the backend database(s), and the Results Delivery Service would have a Resource type that represents query results. In this design, when a client invokes the query operation on the Query Service, the service can query the database and then create an instance of the Results Delivery Service's Resource. The query operation then returns a pointer, or EndPointReference (EPR), to this Resource. The client is then able to interact with the query results by using the Results Delivery Service's client, passing in the returned EPR to its constructor. Through its support for multiple Service Contexts, Introduce enables this and other such Resource patterns for stateful grid services. This support is managed by the synchronization component of the Introduce engine. The service description model, created via the GDE or programmatically/hand generated, enables the description of multiple Service Contexts in an Introduce service. Each Introduce service has at least one Service Context (the main service), and can create an arbitrary number of additional Service Contexts to support more complex resource usage patterns, as described above. Each created context has a corresponding source directory containing its own server, client, common, resource, etc. This enables resource properties, operations, and security configurations to be added, removed, and modified for each additional context. Each additional context's corresponding service and resource are modified, compiled, and deployed with the main service. </FONT></P>
</BODY>
</HTML>