<HTML>
<HEAD>
 <TITLE>Service Synchronizer</TITLE>
 <META NAME="generator" CONTENT="Adobe RoboHelp - www.adobe.com">
</HEAD>
<BODY style="font-family:'Arial'; font-size:12pt;  background-color:white;">
 <div id='NavBar' STYLE='text-align:right;' align='right'><nobr><font size=1 color='#c0c0c0' style='font-size:9pt;' ><a href='service_creator.htm'><img src='../bsscnav4.gif' width=27 height=19 border=no></a><a href='service_deployer.htm'><img src='../bsscnav5.gif' width=27 height=19 border=no></a></font>&nbsp;&nbsp;&nbsp;</nobr>
 </div>
 <H1 align="left"  style="font-size:12pt;margin-left:5.75pt;margin-right:6.50pt;margin-top:6.00pt;margin-bottom:2.00pt;text-align:left;" ><B><FONT size=3  style="font-family:'Arial'; font-size:12pt; font-weight:bold; " >Service Synchronizer</FONT></B></H1>
 <P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
 <P align="left"  style="margin-left:5.75pt;margin-right:6.50pt;margin-top:4.00pt;margin-bottom:0.00pt;text-align:left;" >&nbsp;</P>
 <P  style="margin-top:0.00pt;margin-bottom:0.00pt;" ><IMG src="../image/ebx_-1844266320.jpg" border=0 height=764 width=800 alt="image\ebx_-1844266320.jpg"></P>
 <P  style="margin-top:0.00pt;margin-bottom:0.00pt;" ><FONT size=3  style="font-family:'Arial'; font-size:12pt; " >Introduce Synchronization Framework</FONT></P>
 <P  style="margin-top:0.00pt;margin-bottom:0.00pt;" >&nbsp;</P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" ><FONT size=3  style="font-size:12pt; " >Service resynchronization is the process by which the source code and configuration generation tools of the Introduce toolkit will analyze the service's current implementation with that of the desired service description. This process will add, remove, and modify any service methods, resource properties, and service settings which have been added, removed, or modified from the service description. The descriptions and configurations for methods, metadata, and security are those that are generated from the GDE, programmatically or by hand, and that can be validated by the Introduce service schema. The service description is the basis by which the code generation tools add, remove and modify operations, metadata, and change the security configuration of the service by editing the source code, configuration files, and metadata files. This is similar to the way that Axis will use the WSDL to generate the grid stubs of the service. The overall high level process of service resynchronization is illustrated below. </FONT></P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" ><FONT size=3  style="font-size:12pt; " >In this process, modified documents created by the GDE are processed using JET templates to create the modified service skeleton. The service synchronizer component manages the service WSDL description. If a service or method has been added or removed, the respective WSDL files must be updated to reflect the changes. Updating the files requires many auto generated code segments. External XML schemas, which describe published data types, must be imported into the respective WSDL files so that the data types can be located and used to generate the required Java beans and SOAP bindings. The WSDL description is basically the Grid layer representation of the Java based service interface. Both the message types, which represent the data types of the input parameters and the return type of a service method, and the complete operation, which reflects the Java based signature of the method being exposed, have to be described in the WSDL file. The synchronization operation automatically keeps this file in sync during the development of services so that the service implementation and the Grid service description represented by the WSDL match up. This ensures that the methods implemented in the Grid service can actually be invoked. </FONT></P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" >&nbsp;</P>
 <P  style="margin-top:0.00pt;margin-bottom:0.00pt;" ><IMG src="../image/ebx_-2125020106.jpg" border=0 height=329 width=600 alt="image\ebx_-2125020106.jpg"><FONT size=3  style="font-family:'Arial'; font-size:12pt; " >Introduce Generated Skeleton</FONT></P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" >&nbsp;</P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" ><FONT size=3  style="font-size:12pt; " >The figure above shows a basic service layout as created by the Introduce Service Creator component. It shows which pieces of this example service are generated by the code generation tools, which pieces are built by the underlying Globus/Axis tools, and which pieces are to be implemented by the service developer. </FONT></P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" >&nbsp;</P>
 <P  style="margin-top:0.00pt;margin-bottom:0.00pt;" ><IMG src="../image/ebx_1816136551.jpg" border=0 height=335 width=600 alt="image\ebx_1816136551.jpg"><FONT size=3  style="font-family:'Arial'; font-size:12pt; " >Introduce Generated Grid Service Source Code</FONT></P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" >&nbsp;</P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" ><FONT size=3  style="font-size:12pt; " >The figure above describes what some particularly critical source files are generated for in an example service created by the Introduce engine. When a WSDL file is parsed by the Axis engine a PortType interface is created which is the Java representation of the API of the grid service. The Axis generated PortType interface must then be implemented on the service to provide the services implementation. In order to enable the service developer to implement a cleaner, non-documument literal interface, Introduce will automatically create the implementation of this PortType interface (HelloWorldProviderImpl). The Introduced generated implementation of this interface will unbox the document literal calls ot the service and pass them on to the unboxed/clean interface (HelloWorldI) which the user defined. Introduce will generate a stubbed implementation of this interface (HelloWorldImpl) which the user will be responsible for implementing. This class will maintain the services implementation of the methods. This enables the service designer to be shielded from the details of the Axis document literal grid service interface and enable them to implement an interface which is as then originally described. The figure also illustrates the example service's resource and resource home, which are generated to manage the service resource and the service resource properties, respectively. </FONT></P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" >&nbsp;</P>
 <P  style="margin-top:0.00pt;margin-bottom:0.00pt;" ><IMG src="../image/ebx_602356328.jpg" border=0 height=345 width=600 alt="image\ebx_602356328.jpg"></P>
 <P  style="margin-top:0.00pt;margin-bottom:0.00pt;" ><FONT size=3  style="font-family:'Arial'; font-size:12pt; " >Introduce Generated Configuration File</FONT></P>
 <P  style="margin-top:0.00pt;margin-bottom:0.00pt;" >&nbsp;</P>
 <P  style="margin-top:0.00pt;margin-bottom:0.00pt;" >&nbsp;</P>
 <P align="left"  style="margin-top:5.00pt;margin-bottom:5.00pt;text-align:left;" ><FONT size=3  style="font-size:12pt; " >The figure above shows the use of the different common files of an example Introduce created service. It shows the files used for configuring registration and security for the grid service, as well as those used by Introduce for synchronization, and those used for build and deployment. This example service created by Introduce also contains Eclipse project files so that the service can easily be edited using the Eclipse platform (www.eclipse.org). The service can have an inheritance model by adding methods from another service; possibly along with the implementations of those methods (see Section 0). If a method were imported from another Grid service, the service synchronizer component would also pull in the WSDL description of the method and copy it into the portType of the new service. This enables the service to have a completely protocol compatible implementation of the method. </FONT></P>
</BODY>
</HTML>