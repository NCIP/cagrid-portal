<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Service Deployer</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8"><LINK 
href="../Theme/nav.css" type=text/css rel=stylesheet><LINK 
href="../LinksExt/C1H_HTML.css" type=text/css rel=stylesheet><LINK 
href="../LinksExt/Introduce.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.6000.16609" name=GENERATOR></HEAD>
<BODY 
style="PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px; BACKGROUND-COLOR: transparent" 
relPart="../">
<DIV id=nsbanner 
style="PADDING-RIGHT: 0px; PADDING-LEFT: 0px; LEFT: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px">
<DIV id=TitleRow 
style="PADDING-RIGHT: 10px; PADDING-LEFT: 22px; PADDING-BOTTOM: 4px; WIDTH: 100%; PADDING-TOP: 4px">
<DIV id=ienav>
<P class=linknav align=left><A class=d2hpreviousenabled id=D2HPrevious 
href="servicesynchronizer1.htm"><IMG alt=Previous 
src="../Images/Theme/ButtonsAndIcons/nav_prev.gif" align=absMiddle border=0></A> 
&nbsp; <A class=d2hnextenabled id=D2HNext 
href="otherfeaturesoftheintroduceengine1.htm"><IMG alt=Next 
src="../Images/Theme/ButtonsAndIcons/nav_next.gif" align=absMiddle border=0></A> 
</P></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext 
style="PADDING-RIGHT: 10px; PADDING-LEFT: 22px; PADDING-BOTTOM: 10px; PADDING-TOP: 5px" 
valign="bottom">
<DIV class=d2h_breadcrumbs id=d2h_breadcrumbs><A class=d2h_breadcrumbsnormal 
href="introduce12design.htm">Introduce 1.2 Design</A><FONT 
class=d2h_breadcrumbslinkseparator> &gt; </FONT><FONT 
class=d2h_breadcrumbsselected>Service Deployer</FONT></DIV>
<H2><A name=_Toc192911896></A><A name=_Toc192301207></A><A 
name=Service_Deployer></A>Service Deployer</H2>
<P class=msonormal>The service deployment features of Introduce currently 
support deploying Grid services to a Globus or Tomcat container. The deployment 
framework can easily be extended to provide deployment capability to other Web 
Service containers. It utilizes the layout of the Grid Archive (GAR) structure 
to organize and package a deployable service. Once the GAR for a service is 
generated by the deployment framework, the GAR can be utilized to deploy the 
service to the appropriate container. The deployment framework also allows for 
deployment time service properties to be acquired from the application developer 
or the user deploying the service. These custom service properties allow a 
service creator to define configurable options that make sense for a particular 
deployment of the service to have control over. When the service is deployed, 
the deployer prompts for the desired values, presenting service developer 
provided defaults. The supplied values are then made available to the service at 
runtime. For example, if a service implementation accesses a local database, the 
username and password of the database can be specified as service properties. 
This allows a very convenient way for those deploying the service to configure 
it appropriately for their environment, without requiring knowledge of how the 
grid service implements these configuration points. The deployment process first 
populates files required in deployment (e.g., the WSDD and JNDI of the service) 
to specify such values as service deployment path or security configuration file 
locations. It then gathers the library files required for the service as well as 
those library files which contain the actual runtime code of the service. All 
configuration files and service resources are also collected. Finally, a GAR 
file is generated for this service. Once the GAR file has been generated, it can 
be handed off to the particular deployment handler for the required container to 
be used for this deployment. </P>
<P class=msonormal>&nbsp;</P></DIV></BODY></HTML>
