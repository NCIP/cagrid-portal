<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Service Contexts</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8"><LINK 
href="../Theme/lf.css" type=text/css rel=stylesheet><LINK 
href="../LinksExt/C1H_HTML.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.6000.16609" name=GENERATOR></HEAD>
<BODY 
style="PADDING-RIGHT: 0px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; BACKGROUND-COLOR: transparent" 
relPart="../">
<DIV class=d2h_secondary_topic 
style="PADDING-RIGHT: 0pt; PADDING-LEFT: 0pt; PADDING-BOTTOM: 10pt; MARGIN: 0pt; PADDING-TOP: 0pt">
<H4><A name=_Toc192911886></A><A name=_Toc192298326></A><A 
name=Service_Contexts></A>Service Contexts</H4>
<P class=msonormal>A power user feature which can be enabled at modification 
time is the addition or removal of service contexts. A service context a 
sub-service or complimentary service which is used with the main service or some 
other service context. The service context is comprised of the service, 
resource, operations, and resource properties. So, in a sense, service context 
is exactly the same thing as the main service, except that it is not a singleton 
based resource and instances can be more dynamically created and or destroyed. 
Contexts can be added via the “Service Contexts” tab of the GDE Service 
Modification interface. Service contexts define additional of operations needed 
to support the desired service functionality. This is enabled by using WSRF 
capabilities of the Globus Toolkit. As an example, if an operation on the main 
service enables the user to query a database, that operation might create a 
resource in another context and return the handle to that context to the user as 
opposed to the full query result set. This secondary context can then enable the 
user to iterate through the query results. This is accomplished by operations or 
resource properties to this secondary service context which will be responsible 
for iteratively giving results to the user. It should be noted that multiple 
instances of these contexts can be created and executed concurrently; one for 
each query that comes in, for example. This style of grid service is supported 
by the WSRF specifications. Though the details of the WSRF-implementation of 
these concepts are abstracted away from developers its worth noting how they are 
realized, and this is described in detail in other sections. Introduce makes it 
easier for service developers to create such complex services, via the GDE, 
without having to fully understand the underlying service implementations. 
Anything that can be done to the main service, except service properties which 
are globally accessible can be added to a service context. For example, resource 
properties can be added and used to maintain state or for publishing metadata to 
an index service. Also, operations can be added to the service context and can 
also be implemented in the service itself or in the service's resource if they 
are acting on the state of the instance of the resource. </P>
<P class=msonormal>A Statefull Grid service is comprised of several key 
components which make it able to maintain state and enable a client to invoke 
the service several time under the same context. A statefull grid service is 
composed of the service, a resource home, and the resource type. This service 
organizaton can be used in many different scenarios. For, example, when an 
operation on the service is invoked the service can be implemented to handle 
that operation, or if the operation is addressing a particular resource instance 
in the service, the service can lookup the resource and call whatever might be 
necessary to call on the particular addressed resource. For assistance on how to 
develop services utilizing this technique please refer to the [<A 
title=http://www.cagrid.org/wiki/Introduce:1.2:DeveloperGuide 
href="http://www.cagrid.org/wiki/Introduce:1.2:DeveloperGuide">Introduce 
Developers Guide</A>] </P></DIV></BODY></HTML>
