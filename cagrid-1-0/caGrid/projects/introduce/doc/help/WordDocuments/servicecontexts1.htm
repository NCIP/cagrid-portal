<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Service Contexts</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8"><LINK 
href="../Theme/nav.css" type=text/css rel=stylesheet><LINK 
href="../LinksExt/C1H_HTML.css" type=text/css rel=stylesheet><LINK 
href="../LinksExt/Introduce.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.6000.16609" name=GENERATOR></HEAD>
<BODY 
style="PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px; BACKGROUND-COLOR: transparent" 
relPart="../">
<DIV id=nsbanner 
style="PADDING-RIGHT: 0px; PADDING-LEFT: 0px; LEFT: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px">
<DIV id=TitleRow 
style="PADDING-RIGHT: 10px; PADDING-LEFT: 22px; PADDING-BOTTOM: 4px; WIDTH: 100%; PADDING-TOP: 4px">
<DIV id=ienav>
<P class=linknav align=left><A class=d2hpreviousenabled id=D2HPrevious 
href="compositionalinheritance.htm"><IMG alt=Previous 
src="../Images/Theme/ButtonsAndIcons/nav_prev.gif" align=absMiddle border=0></A> 
&nbsp; <A class=d2hnextenabled id=D2HNext href="security1.htm"><IMG alt=Next 
src="../Images/Theme/ButtonsAndIcons/nav_next.gif" align=absMiddle border=0></A> 
</P></DIV></DIV></DIV>
<DIV class=d2h_main_nstext id=nstext 
style="PADDING-RIGHT: 10px; PADDING-LEFT: 22px; PADDING-BOTTOM: 10px; PADDING-TOP: 5px" 
valign="bottom">
<DIV class=d2h_breadcrumbs id=d2h_breadcrumbs><FONT 
class=d2h_breadcrumbscontentsonly>Other Features of the Introduce 
Engine</FONT><FONT class=d2h_breadcrumbslinkseparator> &gt; </FONT><FONT 
class=d2h_breadcrumbsselected>Service Contexts</FONT></DIV>
<H2><A name=_Toc192911907></A><A name=_Toc192301218>Service Contexts</A></H2>
<P class=msonormal>In grid services architecture it is sometimes required that a 
service not only maintain some extra information about the service but also 
maintain information (state) which is of particular interest to one particular 
user. These styles of grid service use cases have driven the requirements for 
specifying a mechanism for stateful Grid services. Each WSRF service manages its 
state by creating and manipulating Resources. A Resource can essentially be 
thought of as an arbitrary state representation, as defined by the service 
developer. The main restriction is that a given service can only manage a single 
given resource type. As previously stated in section 0, Introduce supports this 
mechanism through the Service Context concept. For example, a Data Service may 
want to define two contexts: the main “Query“ context which provides the ability 
to query into a backend database, and the secondary “Results Delivery” context 
which provides the ability to iteratively access query results (similar to a 
remote cursor). Introduce implements these Service Contexts by creating a WSRF 
service for each context, and a corresponding Resource type. In this example, 
the Query Service will have a Resource type that represents the backend 
database(s), and the Results Delivery Service would have a Resource type that 
represents query results. In this design, when a client invokes the query 
operation on the Query Service, the service can query the database and then 
create an instance of the Results Delivery Service’s Resource. The query 
operation then returns a pointer, or EndPointReference (EPR), to this Resource. 
The client is then able to interact with the query results by using the Results 
Delivery Service’s client, passing in the returned EPR to its constructor. 
Through its support for multiple Service Contexts, Introduce enables this and 
other such Resource patterns for stateful grid services. This support is managed 
by the synchronization component of the Introduce engine. The service 
description model, created via the GDE or programmatically/hand generated, 
enables the description of multiple Service Contexts in an Introduce service. 
Each Introduce service has at least one Service Context (the main service), and 
can create an arbitrary number of additional Service Contexts to support more 
complex resource usage patterns, as described above. Each created context has a 
corresponding source directory containing its own server, client, common, 
resource, etc. This enables resource properties, operations, and security 
configurations to be added, removed, and modified for each additional context. 
Each additional context’s corresponding service and resource are modified, 
compiled, and deployed with the main service. </P></DIV></BODY></HTML>
