 [16:01] CAGRID_DEV: is it a complete "no no" to have a resourcehome create different Class resource instances depending on the key value? 
 [16:03] CAGRID_DEV: what im thinking is using a particular resource impl when no resource key is provided, and a different resource impl when actual keys are provided
[11:57] CAGRID_DEV: i dont see any reason why it shouldn't work, but i just wanted to ask if there was a reason not to do it, as the resourcehomeimpl only supports a single resource type per home
[11:58] CAGRID_DEV: i was just wondering if that was for simplicity (reflection issues), or some deeper design reason
[11:59] CAGRID_DEV: for defining the RPs of the service in WSDL, I was planning on just doing an xsd:choice of the RPs of the various resource types
[11:59] GLOBUS_DEV: if you are using ResourceHomeImpl then it will not work... as least the persistence support will not work. but if you do your own persistence and keep the same RPs between resources it should be ok
[11:59] CAGRID_DEV: right
[11:59] GLOBUS_DEV: in general it's a spec / design issue. one resource type per service
[12:00] CAGRID_DEV: that is in the spec?
[12:00] GLOBUS_DEV: yes
[12:01] CAGRID_DEV: currently for cagrid i have the services use a singleton resource that exposes metadata for the service, and does MDS registration
[12:01] CAGRID_DEV: the problem is that prevents that service from using Resources for state
[12:01] CAGRID_DEV: so i was going to have the resourcehomeimpl  use the singleton resource when the EPR had no resource key
[12:01] CAGRID_DEV: and do the "normal thing" when a key is supplied
[12:02] CAGRID_DEV: basically a merger between resourcehomeimpl, and singletonresourcehome
[12:02] GLOBUS_DEV: are you using service resouce home or singleton resource home?
[12:03] CAGRID_DEV: currrently, singleton
[12:04] CAGRID_DEV: my new approach is to extend resourcehomeimpl, and override the "find" and "remove" methods to check for null keys
[12:04] CAGRID_DEV: if its null, i use the singleton resource
[12:04] CAGRID_DEV: if not, i pass it off to super
[12:04] GLOBUS_DEV: so you want to support both at the same time?
[12:04] CAGRID_DEV: right
[12:04] GLOBUS_DEV: oh, ok
[12:05] CAGRID_DEV: i cant think of any other way to have a stateful service that has RPs that are at the "service level"
[12:05] CAGRID_DEV: does that make sense?
[12:06] GLOBUS_DEV: yeah, but that will be a little weird to have some state that have keys and some that don't. 
[12:06] GLOBUS_DEV: maybe it would be eaiser to translate the null key into some default key?
[12:06] GLOBUS_DEV: that way you can at least ensure that everything is the same - same RPs, topics, etc.
[12:07] CAGRID_DEV: i cant have the same RPS... thats the thing
[12:07] CAGRID_DEV: when our services start up, they register "service metadata" to an index serviec.... the metadata says stuf like  "this serviec is from OSU.. etc"
[12:07] CAGRID_DEV: im am exposing that metadata thru the singleton resource as RPs
[12:07] CAGRID_DEV: its the same for all services
[12:07] CAGRID_DEV: the state, on the otherhand, will be serviec specfici
[12:08] CAGRID_DEV: and have different RPs
[12:08] CAGRID_DEV: i dont want service-specfic state to have to carry along copies of serviec metadata for every resource they create
[12:09] GLOBUS_DEV: right. i understand. but this would violate the spec. that you would get a different RP document based on if you sent the key or not. if you have different RP documents you have to have different services
[12:10] CAGRID_DEV: well...its not strictly a different document
[12:10] CAGRID_DEV: because my document XSD, would have a choice
[12:11] CAGRID_DEV: the "issue" is that the instance specific value of the doc, does depend on the resource key
[12:12] CAGRID_DEV: querying RPs using a resourcekeyless EPR, would query service metadata....
[12:12] CAGRID_DEV: querying RPs using a resouce qualified EPR, would query that resources RPs
[12:13] CAGRID_DEV: the alternative is, as you say, to use two services
[12:13] CAGRID_DEV: i just wanted to avoid, as it basically forces everyone that wants to use state, to use the factory pattern
[12:15] GLOBUS_DEV: yeah. yes, i guess you can play tricks on the rp doc (there are some restirictions on it too) but i think in concept this still violates the spec.
[12:15] CAGRID_DEV: hows that?
[12:16] CAGRID_DEV: so stepping back a bit, what do you think is that "right" approach to expose service-level metadata as RPs in a stateful service?
[12:17] GLOBUS_DEV: becuase querying with a key vs. without a key gives me different looking rp documents. the xsd tell me that i could see service metadata entry (with your trick) but i will never see it with a key, but i will see it when queriing without a key
[12:18] CAGRID_DEV: right
[12:19] CAGRID_DEV: i could make a "metadata" key, as you said
[12:19] CAGRID_DEV: but the issue still remains
[12:19] CAGRID_DEV: regardless of how its implemented
[12:19] CAGRID_DEV: keys that aren't "metadata" would have null for the "metadata related" RPs
[12:19] GLOBUS_DEV: the solution is (within the spec concept) is to have 2 services
[12:21] GLOBUS_DEV: (i misunderstood at the begining of the discussion becuase i thought they had the same rps)
[12:23] CAGRID_DEV: ok thanks... i guess ill have to think about it some then
[12:23] GLOBUS_DEV: ok
[12:23] GLOBUS_DEV: np