<%@ jet package="gov.nih.nci.cagrid.introduce.templates" class="NamespaceMappingsTemplate" imports="gov.nih.nci.cagrid.introduce.common.* gov.nih.nci.cagrid.introduce.* gov.nih.nci.cagrid.introduce.codegen.* org.projectmobius.common.* java.io.* java.util.* gov.nih.nci.cagrid.introduce.beans.metadata.* gov.nih.nci.cagrid.introduce.beans.method.*"%>
<% gov.nih.nci.cagrid.introduce.ServiceInformation info = (gov.nih.nci.cagrid.introduce.ServiceInformation) argument; 
   String packageName = info.getServiceProperties().getProperty("introduce.skeleton.package");
   String serviceName = info.getServiceProperties().getProperty("introduce.skeleton.service.name");
   String namespaceDomain = info.getServiceProperties().getProperty("introduce.skeleton.namespace.domain");
   String modifiedServiceName = serviceName;
   if(serviceName.endsWith("Service")){
   	modifiedServiceName = serviceName.substring(0,serviceName.length()-7);
   }
   String newNamespaceDomain = namespaceDomain.replaceFirst(":", "\\\\:");
   newNamespaceDomain = newNamespaceDomain.replaceFirst("\\Q\\\\\\\\:\\E", "\\\\:");
%>
<%=newNamespaceDomain%>/<%=serviceName%>=<%=packageName%>.stubs
<%=newNamespaceDomain%>/<%=serviceName%>/bindings=<%=packageName%>.stubs.bindings
<%=newNamespaceDomain%>/<%=serviceName%>/service=<%=packageName%>.stubs.service
<%
		Map prefixmap=TemplateUtils.buildMasterNamespaceInformationMap(info);
		Set importNamespaces = new HashSet();
  		Iterator iterator = prefixmap.keySet().iterator();
  
		while(iterator.hasNext()){
			String namespaceS = (String)iterator.next();
			if(!namespaceS.equals(IntroduceConstants.W3CNAMESPACE)){
				NamespaceInformation namespaceInformation=(NamespaceInformation)prefixmap.get(namespaceS);
				try{ 
					String newLine = "";
					org.projectmobius.common.Namespace namespace = new org.projectmobius.common.Namespace(namespaceInformation.getNamespace().getNamespace());
					if (namespaceInformation.getNamespace().getPackageName() != null && !namespaceInformation.getNamespace().getPackageName().equals("")) {
						newLine = namespace.getRaw() + "=" + namespaceInformation.getNamespace().getPackageName();
					} else {
						newLine = namespace.getRaw() + "=" + CommonTools.getPackageName(namespace);
					}
						
					// turns http: into http\:
					String newnewLine = newLine.replaceFirst(":", "\\\\:");
					newnewLine = newnewLine.replaceFirst("\\Q\\\\\\\\:\\E", "\\\\:");	
			
					//get all the imports if there are any for this schema and write there namespace to package maps down		
					TemplateUtils.walkSchemasGetNamespaces(new File(info.getBaseDirectory().getAbsolutePath() + File.separator + "schema" + File.separator + serviceName),info.getBaseDirectory().getAbsolutePath() + File.separator + "schema" + File.separator + serviceName + File.separator + namespaceInformation.getNamespace().getLocation(), importNamespaces );
	
%>
<%=newnewLine %><%		

				} catch (Exception e){
					e.printStackTrace();
				}
			}
		}

		Iterator it = importNamespaces.iterator();
		while(it.hasNext()){
			String newLine = "";
			String newnewLine = "";
			try {
				String thisnamespace = (String)it.next();
				String thispackageName = CommonTools.getPackageName(new Namespace(thisnamespace));
				newLine = thisnamespace + "=" + thispackageName;
				// turns http: into http\:
				newnewLine = newLine.replaceFirst(":", "\\\\:");
				newnewLine = newnewLine.replaceFirst("\\Q\\\\\\\\:\\E", "\\\\:");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			%>
<%=newnewLine %><%	
		}

%>
