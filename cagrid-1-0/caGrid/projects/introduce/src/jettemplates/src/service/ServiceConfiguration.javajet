<%@ jet package="gov.nih.nci.cagrid.introduce.templates.service.globus" class="ServiceConfigurationTemplate" imports="gov.nih.nci.cagrid.introduce.* gov.nih.nci.cagrid.introduce.info.* gov.nih.nci.cagrid.introduce.codegen.utils.* gov.nih.nci.cagrid.introduce.codegen.* gov.nih.nci.cagrid.introduce.beans.property.* gov.nih.nci.cagrid.introduce.beans.namespace.* java.util.* gov.nih.nci.cagrid.introduce.beans.resource.*" %>
<%  gov.nih.nci.cagrid.introduce.info.SpecificServiceInformation arguments = (gov.nih.nci.cagrid.introduce.info.SpecificServiceInformation) argument; 
  	Properties properties = arguments.getIntroduceServiceProperties();
    ServiceProperties sproperties = arguments.getServiceProperties();
    String serviceName = arguments.getService().getName();
   String modifiedServiceName = serviceName;
   if(serviceName.endsWith("Service")){
   	modifiedServiceName = serviceName.substring(0,serviceName.length()-7);
   }
%>
package <%=arguments.getService().getPackageName()%>.service;

import org.globus.wsrf.config.ContainerConfig;
import java.io.File;
import javax.naming.InitialContext;

import org.apache.axis.MessageContext;
import org.globus.wsrf.Constants;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 * 
 * This class holds all service properties which were defined for the service to have
 * access to.
 * 
 * @created by Introduce Toolkit version <%=IntroduceConstants.INTRODUCE_VERSION%>
 * 
 */
public class ServiceConfiguration {

	public static ServiceConfiguration  configuration = null;

	public static ServiceConfiguration getConfiguration() throws Exception {
		if (ServiceConfiguration.configuration != null) {
			return ServiceConfiguration.configuration;
		}
		MessageContext ctx = MessageContext.getCurrentContext();

		String servicePath = ctx.getTargetService();

		String jndiName = Constants.JNDI_SERVICES_BASE_NAME + servicePath + "/serviceconfiguration";
		try {
			javax.naming.Context initialContext = new InitialContext();
			ServiceConfiguration.configuration = (ServiceConfiguration) initialContext.lookup(jndiName);
		} catch (Exception e) {
			throw new Exception("Unable to instantiate service configuration.", e);
		}

		return ServiceConfiguration.configuration;
	}
	
	<%
	if(sproperties!=null && sproperties.getProperty()!=null){
	for (int i = 0; i < sproperties.getProperty().length; i++) {
		ServicePropertiesProperty prop = sproperties.getProperty(i);
	%>
	private String <%=prop.getKey()%>;
	<%
	}
	}
	%>

	<%
	if(sproperties!=null && sproperties.getProperty()!=null){
	for (int i = 0; i < sproperties.getProperty().length; i++) {
		ServicePropertiesProperty prop = sproperties.getProperty(i);
		if (prop.getIsFromETC() !=null && prop.getIsFromETC().booleanValue()) {
	%>
	public String get<%=TemplateUtils.upperCaseFirstCharacter(prop.getKey())%>() {
		return ContainerConfig.getBaseDirectory() + File.separator + <%=prop.getKey()%>;
	}
	<%
	     } else {
	%>
	public String get<%=TemplateUtils.upperCaseFirstCharacter(prop.getKey())%>() {
		return <%=prop.getKey()%>;
	}
	<%
	     }
	%>
	
	public void set<%=TemplateUtils.upperCaseFirstCharacter(prop.getKey())%>(String <%=prop.getKey()%>) {
		this.<%=prop.getKey()%> = <%=prop.getKey()%>;
	}

	<%
		
	}
	}
	%>
}
