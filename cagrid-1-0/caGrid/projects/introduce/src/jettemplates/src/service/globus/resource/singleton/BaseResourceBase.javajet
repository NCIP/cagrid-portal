<%@ jet package="gov.nih.nci.cagrid.introduce.templates.service.globus.resource.singleton" class="SingletonResourceBaseTemplate" imports="gov.nih.nci.cagrid.introduce.common.* gov.nih.nci.cagrid.introduce.common.* gov.nih.nci.cagrid.introduce.codegen.utils.* gov.nih.nci.cagrid.introduce.codegen.* gov.nih.nci.cagrid.introduce.beans.namespace.* java.util.* gov.nih.nci.cagrid.introduce.beans.resource.*"%>
<%  gov.nih.nci.cagrid.introduce.common.SpecificServiceInformation arguments = (gov.nih.nci.cagrid.introduce.common.SpecificServiceInformation) argument; 
  	Properties properties = arguments.getIntroduceServiceProperties();
	ResourcePropertiesListType metadataList = arguments.getService().getResourcePropertiesList();
	String serviceName = properties.getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME);
	String modifiedServiceName = serviceName;
	if(serviceName.endsWith("Service")){
		modifiedServiceName = serviceName.substring(0,serviceName.length()-"Service".length());
	}
%>
package <%=arguments.getService().getPackageName()%>.service.globus.resource;

import java.io.File;
import gov.nih.nci.cagrid.advertisement.AdvertisementClient;
import gov.nih.nci.cagrid.advertisement.exceptions.UnregistrationException;

import java.io.File;
import java.io.IOException;
import java.net.URL;

import javax.naming.Context;
import javax.naming.InitialContext;

import org.apache.axis.MessageContext;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.globus.mds.servicegroup.client.ServiceGroupRegistrationParameters;
import org.globus.wsrf.Constants;
import org.globus.wsrf.RemoveCallback;
import org.globus.wsrf.Resource;
import org.globus.wsrf.ResourceProperty;
import org.globus.wsrf.ResourceContext;
import org.globus.wsrf.ResourceContextException;
import org.globus.wsrf.ResourceProperties;
import org.globus.wsrf.ResourcePropertySet;
import org.globus.wsrf.config.ContainerConfig;
import org.globus.wsrf.container.ServiceHost;
import org.globus.wsrf.impl.SimpleResourceProperty;
import org.globus.wsrf.impl.SimpleResourcePropertySet;

import org.globus.wsrf.impl.servicegroup.client.ServiceGroupRegistrationClient;
import org.globus.wsrf.utils.AddressingUtils;


import commonj.timers.Timer;

import gov.nih.nci.cagrid.common.Utils;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class is the base class of the resource type created for this service.
 * It contains accessor and utility methods for managing any resource properties
 * of these resource as well as code for registering any properties selected
 * to the index service.
 * 
 * @created by Introduce Toolkit version <%=CommonTools.getIntroduceVersion()%>
 * 
 */
public abstract class BaseResourceBase implements Resource, RemoveCallback, ResourceProperties {

	static final Log logger = LogFactory.getLog(BaseResourceBase.class);
	private ResourceConfiguration configuration;

	/** Stores the ResourceProperties of this service */
	protected ResourcePropertySet propSet;

	//Define the metadata resource properties
	
	// this can be used to cancel the registration renewal
    private AdvertisementClient registrationClient;
    
    private URL baseURL;

<%
	if(metadataList!=null && metadataList.getResourceProperty()!=null){
		for (int i = 0; i < metadataList.getResourceProperty().length; i++) {
			ResourcePropertyType metadata = metadataList.getResourceProperty()[i];
			SchemaInformation schemaInformation = CommonTools.getSchemaInformation(arguments.getNamespaces(),metadata.getQName());
			String name=CommonTools.getResourcePropertyVariableName(metadataList, i);
			
			//define the RP
			stringBuffer.append("\tprivate ResourceProperty "+name+"RP;\n");
			//define the Value bean to hold the value
			if(schemaInformation.getType().getPackageName()!=null){
				stringBuffer.append("\tprivate "+ schemaInformation.getType().getPackageName() + "." + schemaInformation.getType().getClassName()+" "+name+"Value;\n");
			} else {
			    stringBuffer.append("\tprivate " + schemaInformation.getType().getClassName()+" "+name+"Value;\n");
			}
		}
	}
%>	

	// initializes the resource
	public void initialize() throws Exception {
		// create the resource property set
		this.propSet = new SimpleResourcePropertySet(ResourceConstants.RESOURCE_PROPERY_SET);

		// now add the metadata as resource properties
<%	
	if(metadataList!=null && metadataList.getResourceProperty()!=null){
		for (int i = 0; i < metadataList.getResourceProperty().length; i++) {
			ResourcePropertyType metadata = metadataList.getResourceProperty()[i];
			SchemaInformation schemaInformation = CommonTools.getSchemaInformation(arguments.getNamespaces(),metadata.getQName());
			String name=CommonTools.getResourcePropertyVariableName(metadataList, i);
			
			stringBuffer.append("\t\t//init the rp\n");
			stringBuffer.append("\t\tthis."+name+"RP = new SimpleResourceProperty(ResourceConstants."+name.toUpperCase()+"_Value_RP);\n");
	
			stringBuffer.append("\t\t//add the value to the rp\n");
			stringBuffer.append("\t\tthis."+name+"RP.add(this."+name+"Value);\n");
	
			stringBuffer.append("\t\t//add the rp to the prop set\n");
			stringBuffer.append("\t\tthis.propSet.add(this."+name+"RP);\n");
		}
		}%>	

		// register the service to the index sevice
		refreshRegistration(true);
	}
	
	//Getters/Setters for ResourceProperties
	<%if(metadataList!=null && metadataList.getResourceProperty()!=null){
		for (int i = 0; i < metadataList.getResourceProperty().length; i++) {
			ResourcePropertyType metadata = metadataList.getResourceProperty()[i];
			SchemaInformation schemaInformation = CommonTools.getSchemaInformation(arguments.getNamespaces(),metadata.getQName());
			String name=CommonTools.getResourcePropertyVariableName(metadataList, i);		
	%>
	
	protected ResourceProperty get<%=CommonTools.upperCaseFirstCharacter(name)%>RP(){
		return this.<%=name%>RP;
	}
	
	<%
	if(schemaInformation.getType().getPackageName()!=null){
	%>
	public <%=schemaInformation.getType().getPackageName() + "." + schemaInformation.getType().getClassName()%> get<%=CommonTools.upperCaseFirstCharacter(name)%>Value(){
		return this.<%=name%>Value;
	}
	
	public void set<%=CommonTools.upperCaseFirstCharacter(name)%>Value(<%=schemaInformation.getType().getPackageName() + "." + schemaInformation.getType().getClassName()+" "+name%> ){
		this.<%=name%>Value=<%=name%>;
		get<%=CommonTools.upperCaseFirstCharacter(name)%>RP().set(0,<%=name%>);
	}
	<%
	} else {
	%>
	public <%=schemaInformation.getType().getClassName()%> get<%=CommonTools.upperCaseFirstCharacter(name)%>Value(){
		return this.<%=name%>Value;
	}
	
	public void set<%=CommonTools.upperCaseFirstCharacter(name)%>Value(<%=schemaInformation.getType().getClassName()+" _"+name%> ){
		this.<%=name%>Value=_<%=name%>;
		get<%=CommonTools.upperCaseFirstCharacter(name)%>RP().set(0,_<%=name%>);
	}
	<%
	}
	}
	}
	%>

	public ResourceConfiguration getConfiguration() {
		if (this.configuration != null) {
			return this.configuration;
		}
		MessageContext ctx = MessageContext.getCurrentContext();

		String servicePath = ctx.getTargetService();
		servicePath = servicePath.substring(0,servicePath.lastIndexOf("/"));
		servicePath+="/<%=arguments.getService().getName()%>";


		String jndiName = Constants.JNDI_SERVICES_BASE_NAME + servicePath + "/configuration";
		logger.debug("Will read configuration from jndi name: " + jndiName);
		try {
			Context initialContext = new InitialContext();
			this.configuration = (ResourceConfiguration) initialContext.lookup(jndiName);
		} catch (Exception e) {
			logger.error("when performing JNDI lookup for " + jndiName + ": " + e, e);
		}

		return this.configuration;
	}
	
	/**
	 * This checks the configuration file, and attempts to register to the
	 * IndexService if shouldPerformRegistration==true. It will first read the
	 * current container URL, and compare it against the saved value. If the
	 * value exists, it will only try to reregister if the values are different.
	 * This exists to handle fixing the registration URL which may be incorrect
	 * during initialization, then later corrected during invocation. The
	 * existence of baseURL does not imply successful registration (a non-null
	 * registrationClient does). We will only attempt to reregister when the URL
	 * changes (to prevent attempting registration with each invocation if there
	 * is a configuration problem).
	 */
	public void refreshRegistration(boolean forceRefresh) {
		if (getConfiguration().shouldPerformRegistration()) {

			URL currentContainerURL = null;
			try {
				currentContainerURL = ServiceHost.getBaseURL();
			} catch (IOException e) {
				logger.error("Unable to determine container's URL!  Skipping registration.", e);
				return;
			}

			if (this.baseURL != null) {
				// we've tried to register before (or we are being forced to
				// retry)
				// do a string comparison as we don't want to do DNS lookups
				// for comparison
				if (forceRefresh || !this.baseURL.equals(currentContainerURL)) {
					// we've tried to register before, and we have a different
					// URL now.. so cancel the old registration (if it exists),
					// and try to redo it.
					if (registrationClient != null) {
						try {
                            this.registrationClient.unregister();
                        } catch (UnregistrationException e) {
                            logger.error("Problem unregistering existing registration:" + e.getMessage(), e);
                        }
					}

					// save the new value
					this.baseURL = currentContainerURL;
					logger.info("Refreshing existing registration [container URL=" + this.baseURL + "].");
				} else {
					// URLs are the same (and we weren't forced), so don't try
					// to reregister
					return;
				}

			} else {
				// we've never saved the baseURL (and therefore haven't tried to
				// register)
				this.baseURL = currentContainerURL;
				logger.info("Attempting registration for the first time[container URL=" + this.baseURL + "].");
			}

			// register with the index service
			ResourceContext ctx;
			try {
				MessageContext msgContext = MessageContext.getCurrentContext();
				if (msgContext == null) {
					logger.error("Unable to determine message context!");
					return;
				}

				ctx = ResourceContext.getResourceContext(msgContext);
			} catch (ResourceContextException e) {
				logger.error("Could not get ResourceContext: " + e, e);
				return;
			}

			EndpointReferenceType epr;
			try {
				// since this is a singleton, pretty sure we dont't want to
				// register the key (allows multiple instances of same service
				// on successive restarts)
				// epr = AddressingUtils.createEndpointReference(ctx, key);
				String transportURL = (String) ctx.getProperty(org.apache.axis.MessageContext.TRANS_URL);
	            transportURL = transportURL.substring(0,transportURL.lastIndexOf('/') +1 );
	            transportURL += "<%=serviceName%>";
				epr = AddressingUtils.createEndpointReference(transportURL, null);
			} catch (Exception e) {
				logger.error("Could not form EPR: " + e, e);
				return;
			}
			try {
				// This is how registration parameters are set (read from
				// template)
				File registrationFile = new File(ContainerConfig.getBaseDirectory() + File.separator
					+ getConfiguration().getRegistrationTemplateFile());

				if (registrationFile.exists() && registrationFile.canRead()) {
					logger.debug("Loading registration argumentsrmation from:" + registrationFile);

					ServiceGroupRegistrationParameters params = ServiceGroupRegistrationClient
						.readParams(registrationFile.getAbsolutePath());
					
					// set our service's EPR as the registrant, or use the specified value
					EndpointReferenceType registrantEpr = params.getRegistrantEPR();
					if(registrantEpr == null){
						params.setRegistrantEPR(epr);
					}

					this.registrationClient = new AdvertisementClient(params);
                    this.registrationClient.register();
				} else {
					logger.error("Unable to read registration file:" + registrationFile);
				}
			} catch (Exception e) {
				logger.error("Exception when trying to register service (" + epr + "): " + e, e);
			}
		} else {
			logger.info("Skipping registration.");
		}
	}



	public ResourcePropertySet getResourcePropertySet() {
		return propSet;
	}

}
