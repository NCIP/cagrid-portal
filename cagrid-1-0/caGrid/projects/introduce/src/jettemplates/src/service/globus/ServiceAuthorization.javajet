<%@ jet package="gov.nih.nci.cagrid.introduce.templates.service.globus" class="ServiceAuthorizationTemplate" imports="gov.nih.nci.cagrid.introduce.codegen.services.security.info.* gov.nih.nci.cagrid.introduce.extension.ExtensionsLoader gov.nih.nci.cagrid.introduce.beans.extension.ExtensionType gov.nih.nci.cagrid.introduce.* gov.nih.nci.cagrid.introduce.codegen.services.security.tools.* gov.nih.nci.cagrid.introduce.beans.method.* gov.nih.nci.cagrid.introduce.beans.service.* gov.nih.nci.cagrid.introduce.common.* gov.nih.nci.cagrid.introduce.common.* gov.nih.nci.cagrid.introduce.codegen.utils.* gov.nih.nci.cagrid.introduce.codegen.* gov.nih.nci.cagrid.introduce.beans.namespace.* java.util.* gov.nih.nci.cagrid.introduce.beans.resource.* gov.nih.nci.cagrid.introduce.beans.property.*" %>
<% AuthorizationTemplateInfoHolder holder = (AuthorizationTemplateInfoHolder) argument; 
   SpecificServiceInformation info = holder.getSpecificServiceInformation(); 
   String serviceName = info.getIntroduceServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME);
   String namespaceDomain = info.getIntroduceServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_NAMESPACE_DOMAIN);
   String modifiedServiceName = serviceName;
   if(serviceName.endsWith("Service")){
   	modifiedServiceName = serviceName.substring(0,serviceName.length()-7);
   }
%>
package <%=info.getService().getPackageName()%>.service.globus;


import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import javax.security.auth.Subject;
import javax.xml.namespace.QName;
import javax.xml.rpc.handler.MessageContext;

import gov.nih.nci.cagrid.introduce.servicetools.security.AuthorizationExtension;
import org.globus.wsrf.impl.security.authorization.exceptions.AuthorizationException;
import org.globus.wsrf.impl.security.authorization.exceptions.CloseException;
import org.globus.wsrf.impl.security.authorization.exceptions.InitializeException;
import org.globus.wsrf.impl.security.authorization.exceptions.InvalidPolicyException;
import org.globus.wsrf.security.authorization.PDP;
import org.globus.wsrf.security.authorization.PDPConfig;
import org.globus.wsrf.config.ContainerConfig;
import org.w3c.dom.Node;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This is a PDP for use with the globus authorization callout.
 * This class will have a authorize method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version <%=IntroducePropertiesManager.getIntroduceVersion()%>
 * 
 */
public class <%=info.getService().getName()%>Authorization implements PDP {

	public static final String SERVICE_NAMESPACE = "<%=info.getService().getNamespace()%>";
	
	Map authorizationClassMap = new HashMap();
	
	
	public <%=info.getService().getName()%>Authorization() {
	}
	
	protected String getServiceNamespace(){
		return SERVICE_NAMESPACE;
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
	
<%
		// look at doc and compare to interface
		if (info.getService().getMethods() != null && info.getService().getMethods().getMethod() != null) {
			for (int methodIndex = 0; methodIndex < info.getService().getMethods().getMethod().length; methodIndex++) {
				MethodType method = info.getService().getMethods().getMethod(methodIndex);
				
				    
%>				
	public void authorize<%=CommonTools.upperCaseFirstCharacter(method.getName()) %>(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		<%
		  if(method.getMethodSecurity()!=null && method.getMethodSecurity().getMethodAuthorization()!=null){
		  if(method.getMethodSecurity().getMethodAuthorization().getIntroducePDPAuthorization()!=null){
		      ExtensionType extension = null;
		      if(method.getExtensions()!=null && method.getExtensions().getExtension()!=null){
		          for(int extIndex = 0 ; extIndex < method.getExtensions().getExtension().length; extIndex++){
			        if(method.getExtensions().getExtension(extIndex).getExtensionType().equals(ExtensionsLoader.AUTHORIZATION_EXTENSION)){
			            extension = method.getExtensions().getExtension(extIndex);
			            break;
			            }
		          }
		      }
		      if(extension==null){
		          %>
		 throw new AuthorizationException("Misconfigured authorization, missing extension");
		          <%
		      } else {
			  
		      %>
		// authorization using method authorization from the <%=extension.getName() %> extension
		((AuthorizationExtension)authorizationClassMap.get("<%=extension.getName() %>")).authorizeOperation(peerSubject,context,operation);
			  <%
				     
		      }
		  } else if(method.getMethodSecurity().getMethodAuthorization().getNoAuthorization()!=null){
		     
		  } else if(method.getMethodSecurity().getMethodAuthorization().getInheritServiceAuthorization()!=null && info.getService().getServiceSecurity().getServiceAuthorization().getIntroducePDPAuthorization()!=null){
		      ExtensionType extension = null;
		      if(info.getService().getExtensions()!=null && info.getService().getExtensions().getExtension()!=null){
		          for(int extIndex = 0 ; extIndex < info.getService().getExtensions().getExtension().length; extIndex++){
			        if(info.getService().getExtensions().getExtension(extIndex).getExtensionType().equals(ExtensionsLoader.AUTHORIZATION_EXTENSION)){
			            extension = info.getService().getExtensions().getExtension(extIndex);
			            break;
			            }
		          }
		      }
		      if(extension==null){
		          %>
		 throw new AuthorizationException("Misconfigured authorization, missing extension");
		 		 <%
		      } else {
		      
		      %>
		// authorization using service authorization from the <%=extension.getName() %> extension
		((AuthorizationExtension)authorizationClassMap.get("<%=extension.getName() %>")).authorizeService(peerSubject,context,operation);
		 	  <%
		      }
		      
		  } else {
	          %>
	 	throw new AuthorizationException("Misconfigured authorization");
	 		 <%
		  }
		  } else if(info.getService().getServiceSecurity()!=null && info.getService().getServiceSecurity().getServiceAuthorization()!=null && info.getService().getServiceSecurity().getServiceAuthorization().getIntroducePDPAuthorization()!=null){
		      ExtensionType extension = null;
		      if(info.getService().getExtensions()!=null && info.getService().getExtensions().getExtension()!=null){
		          for(int extIndex = 0 ; extIndex < info.getService().getExtensions().getExtension().length; extIndex++){
			        if(info.getService().getExtensions().getExtension(extIndex).getExtensionType().equals(ExtensionsLoader.AUTHORIZATION_EXTENSION)){
			            extension = info.getService().getExtensions().getExtension(extIndex);
			            break;
			            }
		          }
		      }
		      if(extension==null){
		          %>
		 throw new AuthorizationException("Misconfigured authorization, missing extension");
		 		 <%
		      } else {
		      
		      %>
		// authorization using service authorization from the <%=extension.getName() %> extension
		((AuthorizationExtension)authorizationClassMap.get("<%=extension.getName() %>")).authorizeService(peerSubject,context,operation);
		 	  <%
		      }
		      
		  }
		%>
	}
	   <%
		
		}
	}
%>
	
	public boolean isPermitted(Subject peerSubject, MessageContext context, QName operation)
		throws AuthorizationException {
		
		if(!operation.getNamespaceURI().equals(getServiceNamespace())){
		  return false;
		}
<%
		if (info.getService().getMethods() != null && info.getService().getMethods().getMethod() != null) {
			for (int methodIndex = 0; methodIndex < info.getService().getMethods().getMethod().length; methodIndex++) {
				MethodType method = info.getService().getMethods().getMethod(methodIndex);	
					if(methodIndex==0){	
%>
		if(operation.getLocalPart().equals("<%=CommonTools.lowerCaseFirstCharacter(method.getName())%>")){
			authorize<%=CommonTools.upperCaseFirstCharacter(method.getName()) %>(peerSubject, context, operation);
			return true;
		} <%				
					} else {
%>else if(operation.getLocalPart().equals("<%=CommonTools.lowerCaseFirstCharacter(method.getName())%>")){
			authorize<%=CommonTools.upperCaseFirstCharacter(method.getName()) %>(peerSubject, context, operation);
			return true;
		} <%	
					}
			}
		}
%>		
		return false;
	}
	

	public Node getPolicy(Node query) throws InvalidPolicyException {
		return null;
	}


	public String[] getPolicyNames() {
		return null;
	}


	public Node setPolicy(Node policy) throws InvalidPolicyException {
		return null;
	}


	public void close() throws CloseException {


	}


	public void initialize(PDPConfig config, String name, String id) throws InitializeException {
    	try{
    		String serviceName = (String)config.getProperty(name, "serviceName");
    	    String etcPath = ContainerConfig.getBaseDirectory() + File.separator + (String)config.getProperty(name, "etcDirectoryPath");

    	<%
    		
    	    Iterator it = holder.getAuthorizationExtensionClassNamesMap().keySet().iterator();
			while(it.hasNext()){
			    String key = (String)it.next();
			    String className = (String)holder.getAuthorizationExtensionClassNamesMap().get(key);
			%> 
	   		authorizationClassMap.put("<%=key %>",Class.forName("<%=className %>").newInstance());
			((AuthorizationExtension)authorizationClassMap.get("<%=key %>")).initialize(serviceName, etcPath);
			<%
			}
    	%>
    	} catch (Exception e){
        	throw new InitializeException(e.getMessage(),e);
		}
	}
	
	
}