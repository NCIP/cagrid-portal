<%@ jet package="gov.nih.nci.cagrid.introduce.templates.service.globus" class="ServiceAuthorizationTemplate" imports="gov.nih.nci.cagrid.introduce.* gov.nih.nci.cagrid.introduce.codegen.security.* gov.nih.nci.cagrid.introduce.beans.method.* gov.nih.nci.cagrid.introduce.beans.service.* gov.nih.nci.cagrid.introduce.common.* gov.nih.nci.cagrid.introduce.info.* gov.nih.nci.cagrid.introduce.codegen.utils.* gov.nih.nci.cagrid.introduce.codegen.* gov.nih.nci.cagrid.introduce.beans.namespace.* java.util.* gov.nih.nci.cagrid.introduce.beans.resource.* gov.nih.nci.cagrid.introduce.beans.property.*" %>
<% gov.nih.nci.cagrid.introduce.info.SpecificServiceInformation info = (gov.nih.nci.cagrid.introduce.info.SpecificServiceInformation) argument; 
   String serviceName = info.getIntroduceServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME);
   String namespaceDomain = info.getIntroduceServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_NAMESPACE_DOMAIN);
   String modifiedServiceName = serviceName;
   if(serviceName.endsWith("Service")){
   	modifiedServiceName = serviceName.substring(0,serviceName.length()-7);
   }
%>
package <%=info.getService().getPackageName()%>.service.globus;


import java.rmi.RemoteException;

/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class will have a authorize<methodName> method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either simple return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version <%=CommonTools.getIntroduceVersion()%>
 * 
 */
public class <%=info.getService().getName()%>Authorization{
	
	
	public <%=info.getService().getName()%>Authorization() {
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
	
	<%
		// look at doc and compare to interface
		if (info.getService().getMethods() != null && info.getService().getMethods().getMethod() != null) {
			for (int methodIndex = 0; methodIndex < info.getService().getMethods().getMethod().length; methodIndex++) {
				MethodType method = info.getService().getMethods().getMethod(methodIndex);
				
				if(!method.isIsProvided()){
					boolean written = false;
					if (method.getMethodSecurity() != null) {
						if (method.getMethodSecurity().getMethodAuthorization() != null) {
							if (method.getMethodSecurity().getMethodAuthorization().getGridGrouperAuthorization() != null) {
							try {
							written = true;
%>
    public static final String gridGrouperAuthorize<%=TemplateUtils.upperCaseFirstCharacter(method.getName()) %> = <%=SyncAuthorization.generateGridGrouperQuery(method.getMethodSecurity().getMethodAuthorization().getGridGrouperAuthorization())%>
<%
							} catch(Exception e ) {
							   e.printStackTrace();
							}
							} else if (method.getMethodSecurity().getMethodAuthorization().getCSMAuthorization() != null) {
								
							}
						}
					}

					if (!written && info.getService().getServiceSecurity() != null) {
						if (info.getService().getServiceSecurity().getServiceAuthorization() != null) {
							if (info.getService().getServiceSecurity().getServiceAuthorization().getGridGrouperAuthorization() != null) {
							try{
%>
    public static final String gridGrouperAuthorize<%=TemplateUtils.upperCaseFirstCharacter(method.getName()) %> = <%=SyncAuthorization.generateGridGrouperQuery(info.getService().getServiceSecurity().getServiceAuthorization().getGridGrouperAuthorization())%>
<%
							} catch(Exception e ) {
							   e.printStackTrace();
							}
							} else if (info.getService().getServiceSecurity().getServiceAuthorization().getCSMAuthorization() != null) {
							
							}
						}
					}
				
%>				
	public static void authorize<%=TemplateUtils.upperCaseFirstCharacter(method.getName()) %>() throws RemoteException {
		<%
		 String auth = "";
		  try {
			auth = SyncAuthorization.addAuthorizationToProviderImpl(info.getService(), method, "\t\t");
		  } catch (Exception e) {
		  	e.printStackTrace();
		  }
		%>
<%=auth%>		
	}
	
<%		
				}
			}
		}
	%>
	
}
