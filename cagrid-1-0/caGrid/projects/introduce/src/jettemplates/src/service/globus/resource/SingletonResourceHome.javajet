<%@ jet package="gov.nih.nci.cagrid.introduce.templates.service.globus.resource" class="SingletonResourceHomeTemplate" imports="gov.nih.nci.cagrid.introduce.common.*" %>
<% gov.nih.nci.cagrid.introduce.common.SpecificServiceInformation info = (gov.nih.nci.cagrid.introduce.common.SpecificServiceInformation) argument; 
   String serviceName = info.getIntroduceServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME);
   String namespaceDomain = info.getIntroduceServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_NAMESPACE_DOMAIN);
   String modifiedServiceName = serviceName;
   if(serviceName.endsWith("Service")){
   	modifiedServiceName = serviceName.substring(0,serviceName.length()-7);
   }
%>
package <%=info.getService().getPackageName()%>.service.globus.resource;

import <%=info.getService().getPackageName()%>.common.<%=info.getService().getName()%>Constants;
import <%=info.getService().getPackageName()%>.stubs.<%=info.getService().getName()%>ResourceProperties;

import org.apache.axis.components.uuid.UUIDGen;
import org.apache.axis.components.uuid.UUIDGenFactory;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.globus.wsrf.InvalidResourceKeyException;
import org.globus.wsrf.PersistenceCallback;
import org.globus.wsrf.Resource;
import org.globus.wsrf.ResourceException;
import org.globus.wsrf.ResourceKey;
import org.globus.wsrf.ResourceContext;
import gov.nih.nci.cagrid.introduce.servicetools.SingletonResourceHomeImpl;
import org.globus.wsrf.jndi.Initializable;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class implements the resource home for the resource type represented
 * by this service.
 * 
 * @created by Introduce Toolkit version <%=IntroduceEnginePropertiesManager.getIntroduceVersion()%>
 * 
 */
public class <%=info.getService().getName()%>ResourceHome extends SingletonResourceHomeImpl implements Initializable {

	static final Log logger = LogFactory.getLog(<%=info.getService().getName()%>ResourceHome.class);
    private static final UUIDGen UUIDGEN = UUIDGenFactory.getUUIDGen();

	public Resource createSingleton() {
		logger.info("Creating a single resource.");
		try {
		    <%=info.getService().getName()%>ResourceProperties props = new <%=info.getService().getName()%>ResourceProperties();
			<%=info.getService().getName()%>Resource resource = new <%=info.getService().getName()%>Resource();
			if (resource instanceof PersistenceCallback) {
			      //try to load the resource if it was persisted
                  try{
                    ((PersistenceCallback) resource).load(null);
			      } catch (InvalidResourceKeyException ex){
			      	  //persisted singleton resource was not found so we will just create a new one
			          resource.initialize(props, <%=info.getService().getName()%>Constants.RESOURCE_PROPERTY_SET, UUIDGEN.nextUUID());
			      }
            } else {
                    resource.initialize(props, <%=info.getService().getName()%>Constants.RESOURCE_PROPERTY_SET, UUIDGEN.nextUUID());
            }
			
			return resource;
		} catch (Exception e) {
			logger.error("Exception when creating the resource",e);
			return null;
		}
	}


	public Resource find(ResourceKey key) throws ResourceException {
		<%=info.getService().getName()%>Resource resource = (<%=info.getService().getName()%>Resource) super.find(key);
		return resource;
	}


	/**
	 * Initialze the singleton resource, when the home is initialized.
	 */
	public void initialize() throws Exception {
		logger.info("Attempting to initialize resource.");
		Resource resource = find(null);
		if (resource == null) {
			logger.error("Unable to initialize resource!");
		} else {
			logger.info("Successfully initialized resource.");
		}
	}
	
    /**
     * Get the resouce that is being addressed in this current context
     */
    public <%=info.getService().getName()%>Resource getAddressedResource() throws Exception {
        <%=info.getService().getName()%>Resource thisResource;
        thisResource = (<%=info.getService().getName()%>Resource) ResourceContext.getResourceContext().getResource();
        return thisResource;
    }
}