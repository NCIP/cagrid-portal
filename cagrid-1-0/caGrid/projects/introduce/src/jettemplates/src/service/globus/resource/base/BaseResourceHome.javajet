<%@ jet package="gov.nih.nci.cagrid.introduce.templates.service.globus.resource.base" class="BaseResourceHomeTemplate" %>
<% gov.nih.nci.cagrid.introduce.common.SpecificServiceInformation info = (gov.nih.nci.cagrid.introduce.common.SpecificServiceInformation) argument; 
   String serviceName = info.getIntroduceServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME);
   String namespaceDomain = info.getIntroduceServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_NAMESPACE_DOMAIN);
   String modifiedServiceName = serviceName;
   if(serviceName.endsWith("Service")){
   	modifiedServiceName = serviceName.substring(0,serviceName.length()-7);
   }
%>
package <%=info.getService().getPackageName()%>.service.globus.resource;

import org.globus.wsrf.ResourceException;
import org.globus.wsrf.ResourceKey;
import org.globus.wsrf.impl.ResourceHomeImpl;
import org.globus.wsrf.impl.SimpleResourceKey;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.MessageContext;
import org.globus.wsrf.ResourceContext;
import org.globus.wsrf.utils.AddressingUtils;

/**
 * This class implements a resource home
 */

public class BaseResourceHome extends ResourceHomeImpl {

	/**
 	* Creates a new Resource, adds it to the list of resources managed by this resource home,
 	* and returns the key to the resource.
 	*/
	public ResourceKey createResource() throws Exception {
		// Create a resource and initialize it
		<%=info.getService().getName()%>Resource resource = (<%=info.getService().getName()%>Resource) createNewInstance();
		resource.initialize();

		// Get key
		ResourceKey key = new SimpleResourceKey(getKeyTypeName(), resource.getID());
		resource.setResourceKey(key);
		
		// register the service to the index sevice
		resource.refreshRegistration(true);
		
		// Add the resource to the list of resources in this home
		add(key, resource);
		return key;
	}
	
	/**
 	* Take a resource key managed by this resource, locates the resource, and created a typed EPR for the resource.
 	*/
	public <%=info.getService().getPackageName()%>.stubs.types.<%=info.getService().getName()%>Reference getResourceReference(ResourceKey key) throws Exception {
		MessageContext ctx = MessageContext.getCurrentContext();
		String transportURL = (String) ctx.getProperty(org.apache.axis.MessageContext.TRANS_URL);
		transportURL = transportURL.substring(0,transportURL.lastIndexOf('/') +1 );
		transportURL += "<%=info.getService().getName()%>";
		EndpointReferenceType epr = AddressingUtils.createEndpointReference(transportURL,key);
		<%=info.getService().getPackageName()%>.stubs.types.<%=info.getService().getName()%>Reference ref = new <%=info.getService().getPackageName()%>.stubs.types.<%=info.getService().getName()%>Reference();
		ref.setEndpointReference(epr);
		return ref;
	}

	/**
 	* Given the key of a resource managed by this resource home, a type resource will be returned.
 	*/	
	public <%=info.getService().getName()%>Resource getResource(ResourceKey key) throws ResourceException {
		<%=info.getService().getName()%>Resource thisResource = (<%=info.getService().getName()%>Resource)find(key);
		return thisResource;
	}
	

    /**
     * Get the resouce that is being addressed in this current context
     */
    public <%=info.getService().getName()%>Resource getAddressedResource() throws Exception {
        <%=info.getService().getName()%>Resource thisResource;
        thisResource = (<%=info.getService().getName()%>Resource) ResourceContext.getResourceContext().getResource();
        return thisResource;
    }
	
	
	
	
}