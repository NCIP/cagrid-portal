<%@ jet package="gov.nih.nci.cagrid.introduce.templates.client" class="ServiceClientTemplate" %>
<% gov.nih.nci.cagrid.introduce.ServiceInformation info = (gov.nih.nci.cagrid.introduce.ServiceInformation) argument; 
   String packageName = info.getServiceProperties().getProperty("introduce.skeleton.package");
   String serviceName = info.getServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME);
   String namespaceDomain = info.getServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_NAMESPACE_DOMAIN);
   String modifiedServiceName = serviceName;
   if(serviceName.endsWith("Service")){
   	modifiedServiceName = serviceName.substring(0,serviceName.length()-7);
   }
%>
package <%=packageName%>.client;


import java.net.URL;
import java.rmi.RemoteException;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.globus.gsi.GlobusCredential;

import <%=packageName%>.stubs.<%=serviceName%>PortType;
import <%=packageName%>.stubs.service.<%=modifiedServiceName%>ServiceAddressingLocator;
import <%=packageName%>.common.<%=serviceName%>I;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class <%=serviceName%>Client implements <%=serviceName%>I {
	
	private <%=modifiedServiceName%>ServiceAddressingLocator locator;
	private GlobusCredential proxy;
	private String url;
	
	static{
		org.globus.axis.util.Util.registerTransport();
	}
	
	public <%=serviceName%>Client(String url) {
		this(url,null);	
	}

	public <%=serviceName%>Client(String url, GlobusCredential proxy) {
	   	this.proxy = proxy;
	   	this.url = url;	
	}

	private <%=serviceName%>PortType getPortType(){
		try {
		<%=modifiedServiceName%>ServiceAddressingLocator locator = new <%=modifiedServiceName%>ServiceAddressingLocator();
		EndpointReferenceType endpoint = new EndpointReferenceType();
		endpoint.setAddress(new Address(url));
			<%=serviceName%>PortType port = locator.get<%=serviceName%>PortTypePort(endpoint);
			return port;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public static void usage(){
		System.out.println(<%=serviceName%>Client.class.getName() + " -gsh [gsh]");
	}
	
	public static void main(String [] args){
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-gsh")){
			  <%=serviceName%>Client client = new <%=serviceName%>Client(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

}