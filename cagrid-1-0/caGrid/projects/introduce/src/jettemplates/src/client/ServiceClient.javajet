<%@ jet package="gov.nih.nci.cagrid.introduce.templates.client" class="ServiceClientTemplate" %>
<% gov.nih.nci.cagrid.introduce.info.SpecificServiceInformation info = (gov.nih.nci.cagrid.introduce.info.SpecificServiceInformation) argument; 
   String mainServiceName = info.getIntroduceServiceProperties().getProperty("introduce.skeleton.service.name");
   String serviceName = info.getService().getName();
   String namespaceDomain = info.getIntroduceServiceProperties().getProperty(gov.nih.nci.cagrid.introduce.IntroduceConstants.INTRODUCE_SKELETON_NAMESPACE_DOMAIN);
   String mainModifiedServiceName = mainServiceName;
   if(mainServiceName.endsWith("Service")){
   	mainModifiedServiceName = mainServiceName.substring(0,mainServiceName.length()-7);
   }
   String modifiedServiceName = serviceName;
   if(serviceName.endsWith("Service")){
   	modifiedServiceName = serviceName.substring(0,serviceName.length()-7);
   }
%>
package <%=info.getService().getPackageName()%>.client;

import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Map;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;

import org.globus.wsrf.impl.security.authorization.Authorization;
import org.globus.wsrf.impl.security.authorization.NoAuthorization;

import gov.nih.nci.cagrid.metadata.security.CommunicationMechanism;
import gov.nih.nci.cagrid.metadata.security.Operation;
import gov.nih.nci.cagrid.metadata.security.ProtectionLevelType;
import gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata;
import gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadataOperations;





import <%=info.getService().getPackageName()%>.stubs.<%=serviceName%>PortType;
import <%=info.getService().getPackageName()%>.stubs.service.<%=modifiedServiceName%>ServiceAddressingLocator;
import <%=info.getService().getPackageName()%>.common.<%=serviceName%>I;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class <%=info.getService().getName()%>Client implements <%=serviceName%>I {	
	private GlobusCredential proxy;
	private EndpointReferenceType epr;
	private <%=info.getService().getName()%>PortType portType;
	private ServiceSecurityMetadata securityMetadata;
	private Map operations;
	private Authorization authorization;
	private String delegationMode;
	
	static{
		org.globus.axis.util.Util.registerTransport();
	}
	
	public <%=info.getService().getName()%>Client(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public <%=info.getService().getName()%>Client(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	this.proxy = proxy;
	   	this.epr = new EndpointReferenceType();
	   	this.epr.setAddress(new Address(url));
	   	initialize();
	}
	
	public <%=info.getService().getName()%>Client(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public <%=info.getService().getName()%>Client(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	this.proxy = proxy;
	   	this.epr = epr;
		initialize();
	}
	
	private void initialize() throws RemoteException {
		this.portType = createPortType();
		operations = new HashMap();
		this.authorization = NoAuthorization.getInstance();
		this.securityMetadata = getServiceSecurityMetadata();
		ServiceSecurityMetadataOperations ssmo = securityMetadata.getOperations();
		if(ssmo!=null){
		Operation[] ops = ssmo.getOperation();	
		if (ops != null) {
			for (int i = 0; i < ops.length; i++) {
				operations.put(ops[i].getName(), ops[i]);
			}
		}
		}
	}
	
	public EndpointReferenceType getEndpointReference(){
		return this.epr;
	}

	private <%=info.getService().getName()%>PortType createPortType() throws RemoteException {

		<%=modifiedServiceName%>ServiceAddressingLocator locator = new <%=modifiedServiceName%>ServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		<%=info.getService().getName()%>PortType port = null;
		try {
			port = locator.get<%=info.getService().getName()%>PortTypePort(this.epr);
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}
	
	private void resetStub(Stub stub) {
		stub.removeProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT);
		stub.removeProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS);
		stub.removeProperty(org.globus.wsrf.security.Constants.AUTHORIZATION);
		stub.removeProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS);
		stub.removeProperty(org.globus.wsrf.security.Constants.GSI_SEC_CONV);
		stub.removeProperty(org.globus.wsrf.security.Constants.GSI_SEC_MSG);
		stub.removeProperty(org.globus.axis.gsi.GSIConstants.GSI_MODE);

	}


	private void configureStubSecurity(String method) throws RemoteException {
		Stub stub = (Stub) portType;
		resetStub(stub);

		boolean https = false;
		if (epr.getAddress().getScheme().equals("https")) {
			https = true;
		}

		if (method.equals("getServiceSecurityMetadata")) {
			if (https) {
				stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT,
					org.globus.wsrf.security.Constants.SIGNATURE);
				stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS, Boolean.TRUE);
				stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION,
					org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
			}
			return;
		}

		CommunicationMechanism serviceDefault = securityMetadata.getDefaultCommunicationMechanism();

		CommunicationMechanism mechanism = null;
		if (operations.containsKey(method)) {
			Operation o = (Operation) operations.get(method);
			mechanism = o.getCommunicationMechanism();
		} else {
			mechanism = serviceDefault;
		}
		boolean anonymousAllowed = true;
		boolean authorizationAllowed = true;
		boolean delegationAllowed = true;
		boolean credentialsAllowed = true;

		if ((https) && (mechanism.getGSITransport() != null)) {
			ProtectionLevelType level = mechanism.getGSITransport().getProtectionLevel();
			if (level != null) {
				if ((level.equals(ProtectionLevelType.privacy)) || (level.equals(ProtectionLevelType.either))) {
					stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT,
						org.globus.wsrf.security.Constants.ENCRYPTION);
				} else {
					stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT,
						org.globus.wsrf.security.Constants.SIGNATURE);
				}

			} else {
				stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT,
					org.globus.wsrf.security.Constants.SIGNATURE);
			}
			delegationAllowed = false;

		} else if (https) {
			stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT,
				org.globus.wsrf.security.Constants.SIGNATURE);
			delegationAllowed = false;
		} else if (mechanism.getGSISecureConversation() != null) {
			ProtectionLevelType level = mechanism.getGSISecureConversation().getProtectionLevel();
			if (level != null) {
				if ((level.equals(ProtectionLevelType.privacy)) || (level.equals(ProtectionLevelType.either))) {
					stub._setProperty(org.globus.wsrf.security.Constants.GSI_SEC_CONV,
						org.globus.wsrf.security.Constants.ENCRYPTION);

				} else {
					stub._setProperty(org.globus.wsrf.security.Constants.GSI_SEC_CONV,
						org.globus.wsrf.security.Constants.SIGNATURE);
				}

			} else {
				stub._setProperty(org.globus.wsrf.security.Constants.GSI_SEC_CONV,
					org.globus.wsrf.security.Constants.ENCRYPTION);
			}

		} else if (mechanism.getGSISecureMessage() != null) {
			ProtectionLevelType level = mechanism.getGSISecureMessage().getProtectionLevel();
			if (level != null) {
				if ((level.equals(ProtectionLevelType.privacy)) || (level.equals(ProtectionLevelType.either))) {
					stub._setProperty(org.globus.wsrf.security.Constants.GSI_SEC_MSG,
						org.globus.wsrf.security.Constants.ENCRYPTION);
				} else {
					stub._setProperty(org.globus.wsrf.security.Constants.GSI_SEC_MSG,
						org.globus.wsrf.security.Constants.SIGNATURE);
				}

			} else {
				stub._setProperty(org.globus.wsrf.security.Constants.GSI_SEC_MSG,
					org.globus.wsrf.security.Constants.ENCRYPTION);
			}
			delegationAllowed = false;
			anonymousAllowed = false;
		} else {
			anonymousAllowed = false;
			authorizationAllowed = false;
			delegationAllowed = false;
			credentialsAllowed = false;
		}

		if ((anonymousAllowed) && (mechanism.isAnonymousPermitted())) {
			stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS, Boolean.TRUE);
		} else if ((credentialsAllowed) && (proxy != null)) {
			try {
				org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,
					org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
				stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
			} catch (org.ietf.jgss.GSSException ex) {
				throw new RemoteException(ex.getMessage());
			}
		}

		if (authorizationAllowed) {
			if (authorization == null) {
				stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, NoAuthorization.getInstance());
			} else {
				stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, getAuthorization());
			}
		}
		if (delegationAllowed) {
			if (getDelegationMode() != null) {
				stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_MODE, getDelegationMode());
			}
		}
	}


	public Authorization getAuthorization() {
		return authorization;
	}


	public void setAuthorization(Authorization authorization) {
		this.authorization = authorization;
	}


	public String getDelegationMode() {
		return delegationMode;
	}


	public void setDelegationMode(String delegationMode) {
		this.delegationMode = delegationMode;
	}
	
	public static void usage(){
		System.out.println(<%=info.getService().getName()%>Client.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  <%=info.getService().getName()%>Client client = new <%=info.getService().getName()%>Client(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

}