package org.test.persistent.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.test.persistent.stubs.IntroduceTestPersistentServicePortType;
import org.test.persistent.stubs.service.IntroduceTestPersistentServiceAddressingLocator;
import org.test.persistent.common.IntroduceTestPersistentServiceI;

import projectmobius.org.BookType;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;


/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS
 * METHODS. This client is generated automatically by Introduce to provide a
 * clean unwrapped API to the service. On construction the class instance will
 * contact the remote service and retrieve it's security metadata description
 * which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class IntroduceTestPersistentServiceClient extends IntroduceTestPersistentServiceClientBase
    implements
        IntroduceTestPersistentServiceI {

    public IntroduceTestPersistentServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }


    public IntroduceTestPersistentServiceClient(String url, GlobusCredential proxy) throws MalformedURIException,
        RemoteException {
        super(url, proxy);
    }


    public IntroduceTestPersistentServiceClient(EndpointReferenceType epr) throws MalformedURIException,
        RemoteException {
        this(epr, null);
    }


    public IntroduceTestPersistentServiceClient(EndpointReferenceType epr, GlobusCredential proxy)
        throws MalformedURIException, RemoteException {
        super(epr, proxy);
    }


    public static void usage() {
        System.out.println(IntroduceTestPersistentServiceClient.class.getName() + " -url <service url>");
    }


    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    IntroduceTestPersistentServiceClient client = new IntroduceTestPersistentServiceClient(args[1]);
                    // place client calls here if you want to use this main as a
                    // test....
                    projectmobius.org.BookType book = client.getBook();
                    if (book != null && book.getAuthor().equals("Shannon Hastings")) {
                        System.out.println("Service was recovered and resources are correct");
                    } else {
                        System.err.println("Service does not seem to have been restored from persistence");
                        System.exit(1);
                    }
                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }


    public void setBook(projectmobius.org.BookType book) throws RemoteException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "setBook");
            org.test.persistent.stubs.SetBookRequest params = new org.test.persistent.stubs.SetBookRequest();
            org.test.persistent.stubs.SetBookRequestBook bookContainer = new org.test.persistent.stubs.SetBookRequestBook();
            bookContainer.setBook(book);
            params.setBook(bookContainer);
            org.test.persistent.stubs.SetBookResponse boxedResult = portType.setBook(params);
        }
    }


    public projectmobius.org.BookType getBook() throws RemoteException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "getBook");
            org.test.persistent.stubs.GetBookRequest params = new org.test.persistent.stubs.GetBookRequest();
            org.test.persistent.stubs.GetBookResponse boxedResult = portType.getBook(params);
            return boxedResult.getBook();
        }
    }

}
