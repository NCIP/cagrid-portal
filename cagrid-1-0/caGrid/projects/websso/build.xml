<project name="caGrid-websso" default="all">

	<property environment="env" />
	<property name="tomcat.home" location="${env.CATALINA_HOME}" />
	<property file="${basedir}/project.properties" />
	<property file="${basedir}/build.properties" />

	<property name="src.java.dir" location="src/java" />
	<property name="src.resources.dir" location="src/resources" />

	<property file="${src.resources.dir}/websso.properties" />

	<property name="ext.dir" location="ext" />
	<property name="ext.targetgrid.dir" location="${ext.dir}/target_grid" />
	<property environment="env" />

	<property name="lib.dir" location="lib" />
	<property name="ext.lib.dir" location="${ext.dir}/dependencies/default/jars" />
	<property name="endorsed.lib.dir" location="${ext.dir}/dependencies/endorsed/jars" />
	<property name="tools.lib.dir" location="tools/lib" />

	<property name="webapp.name" value="webssoserver" />
	<property name="webcontent.dir" location="webcontent" />

	<property name="build.dir" location="build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.war.dir" location="${build.dir}/war" />

	<path id="taskdef.cp">
		<fileset dir="${tools.lib.dir}">
			<include name="xmltask-v1.14.jar" />
			<include name="ant-contrib*.jar" />
		</fileset>
	</path>

	<target name="defineAntTask">
		<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="taskdef.cp" />
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="taskdef.cp" />
	</target>

	<path id="build.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${ext.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${env.GLOBUS_LOCATION}/lib">
			<include name="**/*.jar" />
			<exclude name="junit.jar" />
		</fileset>
	</path>

	<!-- ant configure must be executed before ant all target -->
	<target name="websso-config-jar">
		<jar destfile="${build.war.dir}/WEB-INF/lib/${ant.project.name}-conf-${project.version}.jar">
			<fileset dir="${ext.targetgrid.dir}">
				<include name="sync-description.xml" />
			</fileset>
			<fileset dir="${src.resources.dir}">
				<include name="**/*.*" />
				<exclude name="*-template.*" />
			</fileset>
		</jar>
	</target>

	<target name="build-war">
		<copy todir="${build.war.dir}/WEB-INF/lib" overwrite="true">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${env.GLOBUS_LOCATION}/lib">
				<include name="axis.jar" />
				<include name="wsrf_core_stubs.jar" />
				<include name="jaxrpc.jar" />
				<include name="addressing-1.0.jar" />
				<include name="cog-axis.jar" />
				<include name="saaj.jar" />
				<include name="commons-discovery.jar" />
				<include name="wsdl4j.jar" />
				<include name="wsrf_core.jar" />
				<include name="puretls.jar" />
				<include name="cryptix.jar" />
				<include name="cryptix32.jar" />
				<include name="cryptix-asn1.jar" />
				<include name="wss4j.jar" />
				<include name="xalan.jar" />
				<include name="jce-jdk13-125.jar" />
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${endorsed.lib.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="compile">
		<mkdir dir="${build.classes.dir}" />
		<javac srcdir="${src.java.dir}" destdir="${build.classes.dir}" classpathref="build.classpath" debug="true" />
		<mkdir dir="${build.war.dir}/WEB-INF/lib" />
		<jar destfile="${build.dir}/${ant.project.name}-core.jar" basedir="${build.classes.dir}" />
		<copy tofile="${build.war.dir}/WEB-INF/lib/${ant.project.name}-core-${project.version}.jar" file="${build.dir}/${ant.project.name}-core.jar" />
	</target>

	<target name="war" depends="compile,websso-config-jar,build-war">
		<war destfile="${build.dir}/${webapp.name}.war" webxml="${webcontent.dir}/WEB-INF/web.xml">
			<fileset dir="${webcontent.dir}">
				<exclude name="**/*-template.*"/>
			</fileset>
			<lib dir="${build.war.dir}/WEB-INF/lib" />
		</war>
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="create-tomcat-https-keystore" description="Generates a Grid Trust Report.">
		<java classname="org.cagrid.gaards.pki.tools.TomcatKeystoreCreator" fork="false" newenvironment="true" failonerror="true">
			<classpath refid="build.classpath" />
		</java>
	</target>

	<target name="configure-websso" description="replace tokens in websso-properties-template.xml and cas-template.properties">
		<input message="Enter the location of the host certificate (PEM format):" addproperty="host.certificate"/>
		<input message="Enter the location of the host key (PEM format):" addproperty="host.key" />
		<input message="Enter websso server host name:" addproperty="host.name" />
		<input message="Enter websso server https port (int value):" addproperty="host.https.port" />
		<input message="Enter start auto sync gts (yes or no) :" addproperty="start.auto.sync.gts" defaultvalue="no" description="state whether to start auto sync gts or not"/>
		<antcall target="-replace-token-contents"></antcall>
	</target>

	<target name="deployTomcat" depends="configure-tomcat-endorsedjars,war" description="deploy websso server in %CATALINA_HOME%">
		<property name="tomcat.local" value="${tomcat.home}" />
		<copy todir="${tomcat.local}/webapps/">
			<fileset file="${build.dir}/${webapp.name}.war" />
		</copy>
	</target>

	<target name="insert-tomcat-secure-connector" depends="defineAntTask" description="target to modify server.xml add https connector">
		<input message="Enter the location of the keystore:" addproperty="service.keystore.file"/>
		<input message="Enter store password:" addproperty="service.key.pass" />
		<input message="Enter tomcat https port number:" addproperty="tomcat.https.port" />
		<echo message="modifying server.xml in tomcat home dir ${tomcat.home}">
		</echo>
		<xmltask source="${tomcat.home}/conf/server.xml" dest="${tomcat.home}/conf/server.xml">
			<remove path="/Server/Service[@name='Catalina']/Connector[@scheme='https']" />
			<insert path="/Server/Service[@name='Catalina']">
				<![CDATA[
				<Connector				 
				  port="${tomcat.https.port}" maxHttpHeaderSize="8192" maxThreads="150" minSpareThreads="25" 
				  maxSpareThreads="75" enableLookups="false" 
				  disableUploadTimeout="true" acceptCount="100" scheme="https" 
				  secure="true" clientAuth="false" sslProtocol="TLS" debug="0" 
				  keystoreFile="${service.keystore.file}"
				  keystorePass="${service.key.pass}"/>
				]]>
			</insert>
		</xmltask>
	</target>

	<target name="configure-tomcat-endorsedjars" description="Delete jars in tomcat endorsed directory,adds xercesimpl.jar">
		<delete includeEmptyDirs="true">
			<fileset dir="${tomcat.home}/common/endorsed" includes="**/*" />
		</delete>

		<copy todir="${tomcat.home}/common/endorsed" overwrite="true">
			<fileset dir="${endorsed.lib.dir}">
				<include name="xercesImpl.jar" />
			</fileset>
		</copy>
	</target>
	
	<!-- copy websso-properties.xml to ${src.resources} as websso-properties-template.xml -->
	<target name="configure" description="Configures the project based on settings." depends="defineAntTask">
		<copyfile dest="${src.resources.dir}/websso-properties-template.xml" src="${ext.targetgrid.dir}/websso-properties.xml"/>
	</target>

	<target name="-resolve-template-tokens" depends="defineAntTask">
		<filterset id="WEBSSO_PROPERTIES" begintoken="@" endtoken="@">
			<filter token="WEBSSO.SERVER.HOST.CERTIFICATE" value="${host.certificate}" />
			<filter token="WEBSSO.SERVER.HOST.KEY" value="${host.key}" />
			<filter token="START.AUTO.SYNC.GTS" value="${start.auto.sync.gts}" />
		</filterset>
		<filterset id="CAS_PROPERTIES" begintoken="@" endtoken="@">
			<filter token="WEBSSO.SERVER" value="${host.name}" />
			<filter token="WEBSSO.SERVER.HTTPS.PORT" value="${host.https.port}" />
		</filterset>
	</target>

	<target name="-replace-token-contents" depends="-resolve-template-tokens">
		<copy todir="${webcontent.dir}" filtering="true">
			<fileset dir="${webcontent.dir}" />
			<globmapper from="*-template.properties" to="*.properties" />
			<filterset refid="CAS_PROPERTIES" />
		</copy>
		<copy todir="${src.resources.dir}" filtering="true">
			<fileset dir="${src.resources.dir}" />
			<globmapper from="*-template.xml" to="*.xml" />
			<filterset refid="WEBSSO_PROPERTIES" />
		</copy>
		<outofdate>
			<sourcefiles>
				<fileset dir="${webcontent.dir}" includes="**/*-template.properties" />
				<fileset dir="${src.resources.dir}" includes="**/*-template.xml" />
			</sourcefiles>
			<targetfiles>
				<fileset dir="${webcontent.dir}" includes="**/*.properties" />
				<fileset dir="${src.resources.dir}" includes="**/*.xml" />
			</targetfiles>
			<sequential>
				<copy todir="${webcontent.dir}" overwrite="true">
					<fileset dir="${webcontent.dir}" />
					<globmapper from="**/*-template.properties" to="**/*.properties" />
					<filterset refid="WEBSSO_PROPERTIES" />
					<filterset refid="CAS_PROPERTIES" />
				</copy>
				<copy todir="${src.resources.dir}" overwrite="true">
					<fileset dir="${src.resources.dir}" />
					<globmapper from="*-template.xml" to="*.xml" />
					<filterset refid="WEBSSO_PROPERTIES" />
					<filterset refid="CAS_PROPERTIES" />
				</copy>
			</sequential>
		</outofdate>
	</target>

	<target name="all">
		<antcall target="clean" />
		<antcall target="war" />
	</target>

	<target name="tomcat-start">
		<java jar="${tomcat.home}/bin/bootstrap.jar" fork="true">
			<jvmarg value="-Dcatalina.home=${tomcat.home}"/>
		</java>
	</target>

	<target name="tomcat-stop">
		<java jar="${tomcat.home}/bin/bootstrap.jar" fork="true">
			<jvmarg value="-Dcatalina.home=${tomcat.home}"/>
			<arg line="stop"/>
		</java>
	</target>
</project>
