<project name="caGrid-websso" default="all">

	<property environment="env" />
	<property name="tomcat.home" location="${env.CATALINA_HOME}" />
	<property file="${basedir}/project.properties" />
	<property file="${basedir}/build.properties" />

	<property name="ext.dir" location="ext" />
	<property name="ext.targetgrid.dir" location="${ext.dir}/target_grid" />
	<property environment="env"/>

	<property name="lib.dir" location="lib" />
	<property name="ext.lib.dir" location="${ext.dir}/dependencies/default/jars" />
	<property name="endorsed.lib.dir" location="${ext.dir}/dependencies/endorsed/jars" />
	<property name="tools.lib.dir" location="tools/lib" />

	<property name="webapp.name" value="webssoserver" />
	<property name="webcontent.dir" location="webcontent" />

	<property name="src.java.dir" location="src/java" />
	<property name="src.resources.dir" location="src/resources" />

	<property name="build.dir" location="build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.war.dir" location="${build.dir}/war" />

	<path id="taskdef.cp">
		<fileset dir="${tools.lib.dir}">
			<include name="xmltask-v1.14.jar" />
			<include name="ant-contrib*.jar" />
		</fileset>
	</path>

	<target name="defineAntTask">
		<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="taskdef.cp" />
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="taskdef.cp" />
	</target>

	<path id="build.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${ext.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${env.GLOBUS_LOCATION}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- ant configure must be executed before ant all target -->
	<target name="websso-config-jar" depends="replace-tokens">
		<jar destfile="${build.war.dir}/WEB-INF/lib/${ant.project.name}-conf-${project.version}.jar">
			<fileset dir="${ext.targetgrid.dir}">
				<include name="sync-description.xml" />
			</fileset>
			<fileset dir="${src.resources.dir}">
				<include name="**/*.*" />
			</fileset>
		</jar>
	</target>

	<target name="build-war" depends="websso-config-jar">
		<copy todir="${build.war.dir}/WEB-INF/lib"  overwrite="true">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${env.GLOBUS_LOCATION}/lib">
				<include name="axis.jar"/>
				<include name="wsrf_core_stubs.jar"/>
				<include name="jaxrpc.jar"/>
				<include name="addressing-1.0.jar"/>
				<include name="cog-axis.jar"/>
				<include name="saaj.jar"/>
				<include name="commons-discovery.jar"/>
				<include name="wsdl4j.jar"/>
				<include name="wsrf_core.jar"/>
				<include name="puretls.jar"/>
				<include name="cryptix.jar"/>
				<include name="cryptix32.jar"/>
				<include name="cryptix-asn1.jar"/>
				<include name="wss4j.jar"/>
				<include name="xalan.jar"/>
				<include name="jce-jdk13-125.jar"/>
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${endorsed.lib.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="compile">
		<mkdir dir="${build.classes.dir}" />
		<javac srcdir="${src.java.dir}" destdir="${build.classes.dir}" classpathref="build.classpath" debug="true" />
		<mkdir dir="${build.war.dir}/WEB-INF/lib" />
		<jar destfile="${build.war.dir}/WEB-INF/lib/${ant.project.name}-core-${project.version}.jar" basedir="${build.classes.dir}" />
	</target>

	<target name="war" depends="compile,build-war">
		<war destfile="${build.dir}/${webapp.name}.war" webxml="${webcontent.dir}/WEB-INF/web.xml">
			<fileset dir="${webcontent.dir}" />
			<lib dir="${build.war.dir}/WEB-INF/lib" />
		</war>
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="deploy-local-tomcat" depends="war">
		<property name="tomcat.local" value="${tomcat.home}" />
		<copy todir="${tomcat.local}/webapps/">
			<fileset file="${build.dir}/${webapp.name}.war" />
		</copy>
	</target>

	<target name="insert-tomcat-secure-connector" depends="defineAntTask">
		<echo  message="modifying server.xml in tomcat home dir ${tomcat.home}">
		</echo>
		<xmltask source="${tomcat.home}/conf/server.xml"
			dest="${tomcat.home}/conf/server.xml">
			<remove
				path="/Server/Service[@name='Catalina']/Connector[@scheme='https']" />
			<insert path="/Server/Service[@name='Catalina']">
				<![CDATA[
				<Connector				 
				  port="${tomcat.https.port}" maxHttpHeaderSize="8192" maxThreads="150" minSpareThreads="25" 
				  maxSpareThreads="75" enableLookups="false" 
				  disableUploadTimeout="true" acceptCount="100" scheme="https" 
				  secure="true" clientAuth="false" sslProtocol="TLS" debug="0" 
				  keystoreFile="${service.keystore.file}"
				  keystorePass="${service.key.pass}"/>
				]]>
			</insert>
		</xmltask>
	</target>

	<target name="create-tomcat-keystore" description="Generates a Grid Trust Report.">
		<java classname="gov.nih.nci.cagrid.gridca.commandline.TomcatKeystoreCreator" fork="false" newenvironment="true" failonerror="true">
			<classpath refid="build.classpath"/>
		</java>
	</target>

	<target name="configure-tomcat-endorsedjars" description="Delete jars in tomcat endorsed directory,adds xercesimpl.jar">
		<delete includeEmptyDirs="true">
			<fileset dir="${tomcat.home}/common/endorsed" includes="**/*"/>
		</delete>

		<copy todir="${tomcat.home}/common/endorsed" overwrite="true">
			<fileset dir="${endorsed.lib.dir}">
				<include name="xercesImpl.jar" />
			</fileset>
		</copy>
	</target>

	<target name="tomcat-start">
		<java jar="${tomcat.home}/bin/bootstrap.jar" fork="true">
			<jvmarg value="-Dcatalina.home=${tomcat.home}"/>
		</java>
	</target>

	<target name="tomcat-stop">
		<java jar="${tomcat.home}/bin/bootstrap.jar" fork="true">
			<jvmarg value="-Dcatalina.home=${tomcat.home}"/>
			<arg line="stop"/>
		</java>
	</target>

	<target name="configure" description="Configures the project based on settings." depends="defineAntTask">
		<!-- These are the template files we are copying from -->
		<fileset id="templates.fileset" dir="${basedir}">
			<include name="*.template" />
		</fileset>
		<!-- We need to basically reverse the mapper used in the copy to 
	                     identify the target files -->
		<fileset id="template.results.fileset" dir="${basedir}">
			<include name="*" />
			<present targetdir="${basedir}">
				<mapper type="glob" from="*" to="*.template" />
			</present>
		</fileset>

		<!-- First, create any target file that doesn't exist; outofdate doesn't handle this case -->
		<copy todir="${basedir}">
			<fileset dir="${basedir}">
				<include name="*.template" />
				<not>
					<present targetdir="${basedir}">
						<mapper type="glob" from="*.template" to="*" />
					</present>
				</not>
			</fileset>
			<mapper type="glob" from="*.template" to="*" />
			<filterset filtersfile="${ext.targetgrid.dir}/service_urls.properties" />
		</copy>

		<!-- Next, re-template all the files, if either the filter value files or the template files 
	                     are newer than the their targets -->
		<outofdate verbose="true">
			<sourcefiles>
				<pathelement path="${ext.targetgrid.dir}/service_urls.properties" />
				<fileset refid="templates.fileset" />
			</sourcefiles>
			<targetfiles>
				<fileset refid="template.results.fileset" />
			</targetfiles>
			<sequential>
				<copy todir="${basedir}" overwrite="true">
					<fileset refid="templates.fileset" />
					<mapper type="glob" from="*.template" to="*" />
					<filterset filtersfile="${ext.targetgrid.dir}/service_urls.properties" />
				</copy>
			</sequential>
		</outofdate>
	</target>
	
	<target name="replace-tokens" depends="defineAntTask">
		<property name="env.COMPUTERNAME" value="${env.HOSTNAME}" />
		<filterset id="WEBSSO_SERVER" begintoken="@" endtoken="@">
			<filter token="WEBSSO.SERVER" value="${env.COMPUTERNAME}" />
		</filterset>
		<filterset id="USER_NAME" begintoken="@" endtoken="@">
			<filter token="USER.HOME" value="${user.home}" />
		</filterset>
		<antcall target="replacetoken-webcontent-templates" />
		<antcall target="replace-token-src-resources-templates" />
	</target>
	
	<target name="replacetoken-webcontent-templates">
		<copy todir="${webcontent.dir}" filtering="true">
			<fileset dir="${webcontent.dir}"/>
			<globmapper from="*-template.properties" to="*.properties"/>
			<filterset refid="WEBSSO_SERVER"/>
		</copy>

		<outofdate>
			<sourcefiles>
				<fileset dir="${webcontent.dir}" includes="**/*-template.properties" />
			</sourcefiles>
			<targetfiles>
				<fileset dir="${webcontent.dir}" includes="**/*.properties" />
			</targetfiles>
			<sequential>
				<copy todir="${webcontent.dir}" overwrite="true">
					<fileset dir="${webcontent.dir}" />
					<globmapper from="*-template.properties" to="*.properties" />
					<filterset refid="WEBSSO_SERVER" />
				</copy>
			</sequential>
		</outofdate>
	</target>

	<target name="replace-token-src-resources-templates">
		<copy todir="${src.resources.dir}" filtering="true">
			<fileset dir="${src.resources.dir}"/>
			<globmapper from="*-template.xml" to="*.xml"/>
			<filterset refid="USER_NAME"/>
		</copy>

		<outofdate>
			<sourcefiles>
				<fileset dir="${src.resources.dir}" includes="**/*-template.xml" />
			</sourcefiles>
			<targetfiles>
				<fileset dir="${src.resources.dir}" includes="**/*.xml" />
			</targetfiles>
			<sequential>
				<copy todir="${src.resources.dir}" overwrite="true">
					<fileset dir="${src.resources.dir}" />
					<globmapper from="*-template.xml" to="*.xml" />
					<filterset refid="USER_NAME" />
				</copy>
			</sequential>
		</outofdate>
	</target>


	<target name="all">
		<antcall target="clean" />
		<antcall target="war" />
	</target>

</project>
