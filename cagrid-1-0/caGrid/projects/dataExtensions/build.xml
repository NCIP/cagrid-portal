<!-- ======================================================================= -->
<!-- caGrid 1.1 (2.0) Data Service Extensions / Styles build file            -->
<!-- ======================================================================= -->
<project name="dataExtensions" default="all" basedir=".">
	<!-- Environment -->
	<property environment="env" />
	<property file="${basedir}/build.properties" />
	<property file="${user.dir}/build.properties" />
	<property file="${basedir}/ext/resources/cagrid.properties" />
	<property name="globus.dir" location="${env.GLOBUS_LOCATION}" />

	<!-- build with debugging information -->
	<property name="java.debug" value="on" />
	<!-- enforce java 1.5 compliance at build time -->
	<property name="java.source" value="1.5" />

	<!-- Information -->
	<property name="project.version" value="${cagrid.master.project.version}" />
	<property name="project.name" value="${cagrid.master.project.name}${cagrid.master.jar.separator}${project.version}${cagrid.master.jar.separator}${ant.project.name}" />
	<property name="project.jar.prefix" value="${cagrid.master.jar.prefix}${ant.project.name}${cagrid.master.jar.separator}" />

	<!-- build output dirs -->
	<property name="build.dir" location="build" />
	<property name="build.core.dest" location="${build.dir}/core/classes" />
	<property name="build.ui.dest" location="${build.dir}/ui/classes" />
	<property name="build.sdkstyle.dest" location="${build.dir}/sdkstyle/classes" />
	<property name="build.jars.dir" location="${build.dir}/lib" />

	<!-- jar names -->
	<property name="core.jar.name" value="${project.jar.prefix}core.jar" />
	<property name="ui.jar.name" value="${project.jar.prefix}ui.jar" />
	<property name="sdkstyle.jar.name" value="${project.jar.prefix}sdkstyle.jar" />
	<property name="tests.jar.name" value="${project.jar.prefix}tests.jar" />

	<!-- jar files -->
	<property name="core.jar.file" value="${build.jars.dir}/${core.jar.name}" />
	<property name="ui.jar.file" value="${build.jars.dir}/${ui.jar.name}" />
	<property name="sdkstyle.jar.file" value="${build.jars.dir}/${sdkstyle.jar.name}" />
	<property name="tests.jar.file" value="${build.jars.dir}/${tests.jar.name}" />

	<!-- extension -->
	<property name="extension.dir" location="${basedir}/extension" />
	<property name="extension.description.file" value="${extension.dir}/extension.xml" />
	<property name="introduce.extensions.dir" location="../introduce/extensions" />
	<property name="ext.schema.dir" location="${basedir}/ext/xsd"/>

	<!-- source directories -->
	<property name="src.dir" location="${basedir}/src/java" />
	<property name="templates.src.dir" location="${basedir}/src/jettemplates"/>
	<property name="core.src.dir" location="${src.dir}/core" />
	<property name="ui.src.dir" location="${src.dir}/ui"/>
	<property name="sdkstyle.src.dir" location="${src.dir}/sdkstyle"/>

	<!-- libraries -->
	<property name="lib.dir" location="${basedir}/lib" />
	<property name="ext.lib.dir" location="${basedir}/ext/lib" />
	<property name="ext.test.lib.dir" location="${basedir}/ext/test/lib" />

	<!-- testing stuff -->
	<property name="test.dir" location="${basedir}/test" />
	<property name="test.src.dir" location="${test.dir}/src/java" />
	<property name="test.resources.dir" location="${test.dir}/resources" />
	<property name="test.classes.dir" location="${build.dir}/test/classes" />
	<property name="test.lib.dir" location="${test.dir}/lib" />
	<property name="test.logs.dir" location="${test.dir}/logs" />
	<import file="test/test.xml" />

	<!-- using ant contrib for contidionals, looping, and runtarget -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
	    	<pathelement location="${lib.dir}/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- =============================================================== -->
	<!-- Classpaths                                                      -->
	<!-- =============================================================== -->
	<path id="base.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${ext.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${globus.dir}/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="test.classpath">
		<path refid="base.classpath" />
		<fileset dir="${test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${ext.test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${build.jars.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${globus.dir}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>


	<!-- creates output directories -->
    <target name="init" depends="configure">
		<mkdir dir="${build.dir}" />
    	<mkdir dir="${build.jars.dir}"/>
		<mkdir dir="${build.core.dest}" />
		<mkdir dir="${build.ui.dest}" />
    	<mkdir dir="${build.sdkstyle.dest}" />
		<mkdir dir="${test.classes.dir}" />
	
		<!-- using jet for templates -->
		<taskdef name="jetc" classname="ch.paranor.epla.structure.JETCTask">
			<classpath>
				<fileset dir="${ext.lib.dir}">
					<include name="boot.jar" />
					<include name="osgi.jar" />
					<include name="resources.jar" />
					<include name="runtime.jar" />
					<include name="codegen.jar" />
					<include name="jdtcore.jar" />
					<include name="jetc-task.jar" />
				</fileset>
			</classpath>
		</taskdef>
    </target>

    <target name="configure" description="Configures the project based on settings.">
        <copy todir="${extension.dir}" overwrite="true">
            <fileset dir="${extension.dir}">
                <include name="*.template" />
            </fileset>
            <mapper type="glob" from="*.template" to="*" />
            <filterset filtersfile="${basedir}/ext/resources/service_urls.properties" />
        </copy>
    </target>
	
	<!-- =================================================================== -->
	<!--  Generate JET template classes                                      -->
	<!-- =================================================================== -->
	<target name="generateJETClasses" depends="init">
		<jetc destdir="${core.src.dir}" template="${templates.src.dir}/codegen/CQLResultTypes.xsd.xmljet" />
		<jetc destdir="${core.src.dir}" template="${templates.src.dir}/codegen/EnumerationServiceClient.javajet" />
	</target>
	
	
	<!-- compiles the core classes for data service extensions -->
	<target name="compileCore" depends="init, generateJETClasses">
		<javac srcdir="${core.src.dir}" destdir="${build.core.dest}" debug="${java.debug}" source="${java.source}">
			<classpath>
				<path refid="base.classpath" />
			</classpath>
		</javac>
	</target>
	
	
	<!-- compiles the core UI classes for the data service extension -->
	<target name="compileUi" depends="compileCore">
		<javac srcdir="${ui.src.dir}" destdir="${build.ui.dest}" debug="${java.debug}" source="${java.source}">
			<classpath>
				<path refid="base.classpath"/>
				<pathelement path="${build.core.dest}" />
			</classpath>
		</javac>
	</target>
	
	
	<!-- compiles sdk style common classes -->
	<target name="compileSdkStyle" depends="compileCore, compileUi">
		<javac srcdir="${sdkstyle.src.dir}" destdir="${build.sdkstyle.dest}" debug="${java.debug}" source="${java.source}">
			<classpath>
				<pathelement path="${build.core.dest}"/>
				<pathelement path="${build.ui.dest}"/>
				<path refid="base.classpath"/>
			</classpath>
		</javac>
	</target>
	
	<!-- compiles the data service styles -->
	<target name="compileStyles" depends="compileCore, compileUi, compileSdkStyle">
		<!-- must not run in parallel due to use of a variable -->
		<for list="${data.service.styles}" parallel="false" param="style.name" trim="true">
			<sequential>
				<echo message="Compiling style @{style.name}"/>
				<!-- CANNOT USE A PROPERTY, since they are immutable once set -->
				<var name="build.style.dir" value="${build.dir}/@{style.name}/classes"/>
				<mkdir dir="${build.dir}/@{style.name}"/>
				<mkdir dir="${build.style.dir}"/>
				<javac srcdir="${src.dir}/style/@{style.name}" destdir="${build.style.dir}" debug="${java.debug}" source="${java.source}">
					<classpath>
						<pathelement location="${build.core.dest}" />
						<pathelement location="${build.ui.dest}" />
						<pathelement location="${build.sdkstyle.dest}" />
						<path refid="base.classpath"/>
					</classpath>
				</javac>
			</sequential>
		</for>
	</target>

	<!-- compiles the test code -->
	<target name="compileTests" depends="compileCore, compileUi">
		<javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" debug="${java.debug}" source="${java.source}">
			<classpath refid="test.classpath" />
		</javac>
	</target>


	<!-- jars the common classes -->
	<target name="jarCore" depends="compileCore" description="Builds and jars the core classes">
		<jar destfile="${core.jar.file}">
			<fileset dir="${build.core.dest}">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="${core.src.dir}">
				<include name="**/*.java" />
				<include name="**/*.xml" />
			</fileset>
			<fileset dir="${basedir}/src">
				<include name="resources/**/*"/>
			</fileset>
		</jar>
	</target>
	

	<!-- jars the core UI -->
	<target name="jarUi" depends="compileUi" description="Jars the core UI">
		<jar destfile="${ui.jar.file}">
			<fileset dir="${build.ui.dest}">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="${ui.src.dir}">
				<include name="**/*.java"/>
			</fileset>
		</jar>
	</target>
	
	
	<!-- jars the sdk style classes -->
	<target name="jarSdkStyle" depends="compileSdkStyle" description="Jars the sdk style base classes">
		<jar destfile="${sdkstyle.jar.file}">
			<fileset dir="${build.sdkstyle.dest}">
				<include name="**/*.class"/>
			</fileset>
			<fileset dir="${sdkstyle.src.dir}">
				<include name="**/*"/>
			</fileset>
		</jar>
	</target>
	
	<!-- jars the styles -->
	<target name="jarStyles" depends="compileStyles" description="Jars the styles">
		<!-- must not run in parallel due to use of a variable -->
		<for list="${data.service.styles}" parallel="false" param="style.name" trim="true">
			<sequential>
				<echo message="Jaring style @{style.name}"/>
				<!-- CANNOT USE A PROPERTY, since they are immutable once set -->
				<var name="style.lib.file" value="${build.jars.dir}/${project.jar.prefix}style${cagrid.master.jar.separator}@{style.name}.jar"/>
				<var name="build.style.dir" value="${build.dir}/@{style.name}/classes"/>
				<var name="style.src.dir" value="${src.dir}/style/@{style.name}" />
				<jar destfile="${style.lib.file}">
					<fileset dir="${build.style.dir}">
						<include name="**/*.class"/>
					</fileset>
					<fileset dir="${style.src.dir}">
						<include name="**/*" />
					</fileset>
				</jar>
			</sequential>
		</for>
	</target>
	

	<!-- jars the tests -->
	<target name="jarTests" depends="compileTests" description="Jars the testing code and resources">
		<jar destfile="${tests.jar.file}">
			<fileset dir="${test.classes.dir}">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="${test.resources.dir}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${test.src.dir}">
				<include name="**/*.java" />
				<include name="**/*.xml" />
			</fileset>
		</jar>
	</target>


	<!-- removes all build output -->
	<target name="clean">
		<delete dir="tmp" />
		<delete dir="${build.dir}" />
	</target>


	<!-- Build and install extensions for introduce -->
	<target name="installIntroduceExtensions" description="Builds and installs the Data Services extensions into Introduce.">
		<mkdir dir="${introduce.extensions.dir}/data" />
		<mkdir dir="${introduce.extensions.dir}/data/lib" />
		<mkdir dir="${introduce.extensions.dir}/data/schema/Data" />
		<mkdir dir="${introduce.extensions.dir}/data/styles" />
		<!-- libraries -->
		<copy todir="${introduce.extensions.dir}/lib">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="*.jar" />
				<exclude name="*Introduce*.jar"/>
			</fileset>
			<fileset dir="${build.jars.dir}">
				<include name="**/*.jar" />
				<!-- keep out the style jars, they live in the style/lib dirs -->
				<exclude name="**/*-style-*.jar" />
			</fileset>
		</copy>
		<!-- data service schemas -->
		<copy todir="${introduce.extensions.dir}/data/schema/Data">
			<fileset dir="${ext.schema.dir}/Data">
				<include name="**/*.xsd" />
				<include name="**/*.wsdl" />
			</fileset>
		</copy>
		<!-- other schemas -->
		<copy todir="${introduce.extensions.dir}/data/schema">
			<fileset dir="${basedir}/ext">
				<include name="xsd/**/*.xsd"/>
				<include name="xsd/**/*.wsdl"/>
				<exclude name="xsd/Data/*"/>
			</fileset>
		</copy>
		<!-- DomainModel client-config.wsdd -->
		<copy todir="${introduce.extensions.dir}/data">
			<fileset dir="${basedir}">
				<include name="DomainModel-client-config.wsdd" />
			</fileset>
		</copy>
		<!-- everything else -->
		<copy todir="${introduce.extensions.dir}/data">
			<fileset dir="${extension.dir}">
				<include name="**/*" />
			    <exclude name="*.template" />
			</fileset>
		</copy>
	
		<!-- install the service styles -->
		<!-- must not run in parallel due to use of a variable -->
		<for list="${data.service.styles}" parallel="false" param="style.name" trim="true">
			<sequential>
				<echo message="Installing Data Service Style @{style.name}." />
				<!-- some properties for the install -->
				<!-- CANNOT USE A PROPERTY, since they are immutable once set -->
				<var name="style.dest.dir" value="${introduce.extensions.dir}/data/styles/@{style.name}"/>
				<var name="style.description" value="${basedir}/styles/@{style.name}/style.xml"/>
				<var name="style.lib.file" value="${build.jars.dir}/${project.jar.prefix}style${cagrid.master.jar.separator}@{style.name}.jar"/>
				<!-- make requisite directories -->
				<delete dir="${style.dest.dir}"/>
				<mkdir dir="${style.dest.dir}"/>
				<mkdir dir="${style.dest.dir}/lib"/>
				<!-- copy in the style.xml file -->
				<copy file="${style.description}" todir="${style.dest.dir}"/>
				<!-- copy in the style's jar file -->
				<copy todir="${style.dest.dir}/lib" file="${style.lib.file}"/>
				<!-- copy the SDK common style jar file -->
				<copy todir="${style.dest.dir}/lib" file="${sdkstyle.jar.file}"/>
			</sequential>
		</for>
	</target>

	<!-- build and jar everything -->
	<target name="all" depends="jarCore, jarUi, jarSdkStyle, jarStyles, jarTests" description="Builds and jars all the classes in the project" />
</project>
