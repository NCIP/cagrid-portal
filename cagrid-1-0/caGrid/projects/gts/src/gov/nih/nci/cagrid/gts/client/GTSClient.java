package gov.nih.nci.cagrid.gts.client;


import gov.nih.nci.cagrid.gts.common.GTSI;
import gov.nih.nci.cagrid.gts.stubs.GTSPortType;
import gov.nih.nci.cagrid.gts.stubs.service.GTSServiceAddressingLocator;

import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;
import org.globus.gsi.GlobusCredential;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class GTSClient implements GTSI {	
	private GlobusCredential proxy;
	private EndpointReferenceType epr;
	
	static{
		org.globus.axis.util.Util.registerTransport();
	}
	
	public GTSClient(String url) throws MalformedURIException {
		this(url,null);	
	}

	public GTSClient(String url, GlobusCredential proxy) throws MalformedURIException {
	   	this.proxy = proxy;
	   	this.epr = new EndpointReferenceType();
	   	this.epr.setAddress(new Address(url));
	}
	
	public GTSClient(EndpointReferenceType epr) throws MalformedURIException {
	   	this(epr,null);
	}
	
	public GTSClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException {
	   	this.proxy = proxy;
	   	this.epr = epr;
	}

	private GTSPortType getPortType() throws RemoteException {

		GTSServiceAddressingLocator locator = new GTSServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		GTSPortType port = null;
		try {
			port = locator.getGTSPortTypePort(this.epr);
		} catch (Exception e) {
			throw new RemoteException("Unable to configured porttype:" + e.getMessage(), e);
		}

		return port;
	}
	
	public static void usage(){
		System.out.println(GTSClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  GTSClient client = new GTSClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	





































































































































































































































































































































































































































































































































































































































	     public gov.nih.nci.cagrid.gts.bean.TrustedAuthority addTrustedAuthority(gov.nih.nci.cagrid.gts.bean.TrustedAuthority ta) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.IllegalTrustedAuthorityFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.AddTrustedAuthorityRequest params = new gov.nih.nci.cagrid.gts.stubs.AddTrustedAuthorityRequest();
               gov.nih.nci.cagrid.gts.stubs.AddTrustedAuthorityRequestTa taContainer = new gov.nih.nci.cagrid.gts.stubs.AddTrustedAuthorityRequestTa();
               taContainer.setTrustedAuthority(ta);
               params.setTa(taContainer);
               gov.nih.nci.cagrid.gts.stubs.AddTrustedAuthorityResponse boxedResult = port.addTrustedAuthority(params);
               return boxedResult.getTrustedAuthority();

	}


	     public gov.nih.nci.cagrid.gts.bean.TrustedAuthority[] findTrustedAuthorities(gov.nih.nci.cagrid.gts.bean.TrustedAuthorityFilter filter) throws RemoteException {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS,Boolean.TRUE);
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.FindTrustedAuthoritiesRequest params = new gov.nih.nci.cagrid.gts.stubs.FindTrustedAuthoritiesRequest();
               gov.nih.nci.cagrid.gts.stubs.FindTrustedAuthoritiesRequestFilter filterContainer = new gov.nih.nci.cagrid.gts.stubs.FindTrustedAuthoritiesRequestFilter();
               filterContainer.setTrustedAuthorityFilter(filter);
               params.setFilter(filterContainer);
               gov.nih.nci.cagrid.gts.stubs.FindTrustedAuthoritiesResponse boxedResult = port.findTrustedAuthorities(params);
               return boxedResult.getTrustedAuthority();

	}


	     public void removeTrustedAuthority(java.lang.String trustedAuthorityName) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.InvalidTrustedAuthorityFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.RemoveTrustedAuthorityRequest params = new gov.nih.nci.cagrid.gts.stubs.RemoveTrustedAuthorityRequest();
               params.setTrustedAuthorityName(trustedAuthorityName);
               gov.nih.nci.cagrid.gts.stubs.RemoveTrustedAuthorityResponse boxedResult = port.removeTrustedAuthority(params);
               
	}


	     public void addPermission(gov.nih.nci.cagrid.gts.bean.Permission permission) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.IllegalPermissionFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.AddPermissionRequest params = new gov.nih.nci.cagrid.gts.stubs.AddPermissionRequest();
               gov.nih.nci.cagrid.gts.stubs.AddPermissionRequestPermission permissionContainer = new gov.nih.nci.cagrid.gts.stubs.AddPermissionRequestPermission();
               permissionContainer.setPermission(permission);
               params.setPermission(permissionContainer);
               gov.nih.nci.cagrid.gts.stubs.AddPermissionResponse boxedResult = port.addPermission(params);
               
	}


	     public gov.nih.nci.cagrid.gts.bean.Permission[] findPermissions(gov.nih.nci.cagrid.gts.bean.PermissionFilter filter) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.FindPermissionsRequest params = new gov.nih.nci.cagrid.gts.stubs.FindPermissionsRequest();
               gov.nih.nci.cagrid.gts.stubs.FindPermissionsRequestFilter filterContainer = new gov.nih.nci.cagrid.gts.stubs.FindPermissionsRequestFilter();
               filterContainer.setPermissionFilter(filter);
               params.setFilter(filterContainer);
               gov.nih.nci.cagrid.gts.stubs.FindPermissionsResponse boxedResult = port.findPermissions(params);
               return boxedResult.getPermission();

	}


	     public void revokePermission(gov.nih.nci.cagrid.gts.bean.Permission permission) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.InvalidPermissionFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.RevokePermissionRequest params = new gov.nih.nci.cagrid.gts.stubs.RevokePermissionRequest();
               gov.nih.nci.cagrid.gts.stubs.RevokePermissionRequestPermission permissionContainer = new gov.nih.nci.cagrid.gts.stubs.RevokePermissionRequestPermission();
               permissionContainer.setPermission(permission);
               params.setPermission(permissionContainer);
               gov.nih.nci.cagrid.gts.stubs.RevokePermissionResponse boxedResult = port.revokePermission(params);
               
	}


	     public void updateTrustedAuthority(gov.nih.nci.cagrid.gts.bean.TrustedAuthority ta) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.IllegalTrustedAuthorityFault, gov.nih.nci.cagrid.gts.stubs.InvalidTrustedAuthorityFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.UpdateTrustedAuthorityRequest params = new gov.nih.nci.cagrid.gts.stubs.UpdateTrustedAuthorityRequest();
               gov.nih.nci.cagrid.gts.stubs.UpdateTrustedAuthorityRequestTa taContainer = new gov.nih.nci.cagrid.gts.stubs.UpdateTrustedAuthorityRequestTa();
               taContainer.setTrustedAuthority(ta);
               params.setTa(taContainer);
               gov.nih.nci.cagrid.gts.stubs.UpdateTrustedAuthorityResponse boxedResult = port.updateTrustedAuthority(params);
               
	}


	     public void addTrustLevel(gov.nih.nci.cagrid.gts.bean.TrustLevel trustLevel) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.IllegalTrustLevelFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.AddTrustLevelRequest params = new gov.nih.nci.cagrid.gts.stubs.AddTrustLevelRequest();
               gov.nih.nci.cagrid.gts.stubs.AddTrustLevelRequestTrustLevel trustLevelContainer = new gov.nih.nci.cagrid.gts.stubs.AddTrustLevelRequestTrustLevel();
               trustLevelContainer.setTrustLevel(trustLevel);
               params.setTrustLevel(trustLevelContainer);
               gov.nih.nci.cagrid.gts.stubs.AddTrustLevelResponse boxedResult = port.addTrustLevel(params);
               
	}


	     public void updateTrustLevel(gov.nih.nci.cagrid.gts.bean.TrustLevel trustLevel) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.InvalidTrustLevelFault, gov.nih.nci.cagrid.gts.stubs.IllegalTrustLevelFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.UpdateTrustLevelRequest params = new gov.nih.nci.cagrid.gts.stubs.UpdateTrustLevelRequest();
               gov.nih.nci.cagrid.gts.stubs.UpdateTrustLevelRequestTrustLevel trustLevelContainer = new gov.nih.nci.cagrid.gts.stubs.UpdateTrustLevelRequestTrustLevel();
               trustLevelContainer.setTrustLevel(trustLevel);
               params.setTrustLevel(trustLevelContainer);
               gov.nih.nci.cagrid.gts.stubs.UpdateTrustLevelResponse boxedResult = port.updateTrustLevel(params);
               
	}


	     public gov.nih.nci.cagrid.gts.bean.TrustLevel[] getTrustLevels() throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS,Boolean.TRUE);
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.GetTrustLevelsRequest params = new gov.nih.nci.cagrid.gts.stubs.GetTrustLevelsRequest();
               gov.nih.nci.cagrid.gts.stubs.GetTrustLevelsResponse boxedResult = port.getTrustLevels(params);
               return boxedResult.getTrustLevel();

	}


	     public void removeTrustLevel(java.lang.String trustLevelName) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.InvalidTrustLevelFault, gov.nih.nci.cagrid.gts.stubs.IllegalTrustLevelFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.RemoveTrustLevelRequest params = new gov.nih.nci.cagrid.gts.stubs.RemoveTrustLevelRequest();
               params.setTrustLevelName(trustLevelName);
               gov.nih.nci.cagrid.gts.stubs.RemoveTrustLevelResponse boxedResult = port.removeTrustLevel(params);
               
	}


	     public void addAuthority(gov.nih.nci.cagrid.gts.bean.AuthorityGTS authorityGTS) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.IllegalAuthorityFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.AddAuthorityRequest params = new gov.nih.nci.cagrid.gts.stubs.AddAuthorityRequest();
               gov.nih.nci.cagrid.gts.stubs.AddAuthorityRequestAuthorityGTS authorityGTSContainer = new gov.nih.nci.cagrid.gts.stubs.AddAuthorityRequestAuthorityGTS();
               authorityGTSContainer.setAuthorityGTS(authorityGTS);
               params.setAuthorityGTS(authorityGTSContainer);
               gov.nih.nci.cagrid.gts.stubs.AddAuthorityResponse boxedResult = port.addAuthority(params);
               
	}


	     public void updateAuthority(gov.nih.nci.cagrid.gts.bean.AuthorityGTS authorityGTS) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.IllegalAuthorityFault, gov.nih.nci.cagrid.gts.stubs.InvalidAuthorityFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityRequest params = new gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityRequest();
               gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityRequestAuthorityGTS authorityGTSContainer = new gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityRequestAuthorityGTS();
               authorityGTSContainer.setAuthorityGTS(authorityGTS);
               params.setAuthorityGTS(authorityGTSContainer);
               gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityResponse boxedResult = port.updateAuthority(params);
               
	}


	     public void updateAuthorityPriorities(gov.nih.nci.cagrid.gts.bean.AuthorityPriorityUpdate authorityPriorityUpdate) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.IllegalAuthorityFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityPrioritiesRequest params = new gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityPrioritiesRequest();
               gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityPrioritiesRequestAuthorityPriorityUpdate authorityPriorityUpdateContainer = new gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityPrioritiesRequestAuthorityPriorityUpdate();
               authorityPriorityUpdateContainer.setAuthorityPriorityUpdate(authorityPriorityUpdate);
               params.setAuthorityPriorityUpdate(authorityPriorityUpdateContainer);
               gov.nih.nci.cagrid.gts.stubs.UpdateAuthorityPrioritiesResponse boxedResult = port.updateAuthorityPriorities(params);
               
	}


	     public gov.nih.nci.cagrid.gts.bean.AuthorityGTS[] getAuthorities() throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS,Boolean.TRUE);
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.GetAuthoritiesRequest params = new gov.nih.nci.cagrid.gts.stubs.GetAuthoritiesRequest();
               gov.nih.nci.cagrid.gts.stubs.GetAuthoritiesResponse boxedResult = port.getAuthorities(params);
               return boxedResult.getAuthorityGTS();

	}


	     public void removeAuthority(java.lang.String serviceURI) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.InvalidAuthorityFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.RemoveAuthorityRequest params = new gov.nih.nci.cagrid.gts.stubs.RemoveAuthorityRequest();
               params.setServiceURI(serviceURI);
               gov.nih.nci.cagrid.gts.stubs.RemoveAuthorityResponse boxedResult = port.removeAuthority(params);
               
	}


	     public void updateCRL(java.lang.String trustedAuthorityName,gov.nih.nci.cagrid.gts.bean.X509CRL crl) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.IllegalTrustedAuthorityFault, gov.nih.nci.cagrid.gts.stubs.InvalidTrustedAuthorityFault, gov.nih.nci.cagrid.gts.stubs.PermissionDeniedFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.UpdateCRLRequest params = new gov.nih.nci.cagrid.gts.stubs.UpdateCRLRequest();
               params.setTrustedAuthorityName(trustedAuthorityName);
               gov.nih.nci.cagrid.gts.stubs.UpdateCRLRequestCrl crlContainer = new gov.nih.nci.cagrid.gts.stubs.UpdateCRLRequestCrl();
               crlContainer.setX509CRL(crl);
               params.setCrl(crlContainer);
               gov.nih.nci.cagrid.gts.stubs.UpdateCRLResponse boxedResult = port.updateCRL(params);
               
	}


	     public boolean validate(gov.nih.nci.cagrid.gts.bean.X509Certificate[] chain,gov.nih.nci.cagrid.gts.bean.TrustedAuthorityFilter filter) throws RemoteException, gov.nih.nci.cagrid.gts.stubs.GTSInternalFault, gov.nih.nci.cagrid.gts.stubs.CertificateValidationFault {
               GTSPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS,Boolean.TRUE);
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.gts.stubs.ValidateRequest params = new gov.nih.nci.cagrid.gts.stubs.ValidateRequest();
               gov.nih.nci.cagrid.gts.stubs.ValidateRequestChain chainContainer = new gov.nih.nci.cagrid.gts.stubs.ValidateRequestChain();
               chainContainer.setX509Certificate(chain);
               params.setChain(chainContainer);
               gov.nih.nci.cagrid.gts.stubs.ValidateRequestFilter filterContainer = new gov.nih.nci.cagrid.gts.stubs.ValidateRequestFilter();
               filterContainer.setTrustedAuthorityFilter(filter);
               params.setFilter(filterContainer);
               gov.nih.nci.cagrid.gts.stubs.ValidateResponse boxedResult = port.validate(params);
               return boxedResult.isResponse();

	}


}
