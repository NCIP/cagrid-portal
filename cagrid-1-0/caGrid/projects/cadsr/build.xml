<?xml version="1.0"?>
<!-- adopted from GTBS and modified -->
<project default="all" name="Introduce Build File" basedir=".">

	<!-- Define the environment variable -->
	<property environment="env" />

	<!-- 
		Properties in these files will override the properties defined in this file.
    -->
	<property file="introduce.properties" />
	<property name="introduce.ns.excludes" value="" />
	<property name="package.name" value="${introduce.skeleton.package}" />
	<property name="package.dir" value="${introduce.skeleton.package.dir}" />
	<property name="gar.filename" value="${introduce.skeleton.service.name}" />
	<property name="schema.path" value="${introduce.skeleton.service.name}" />
	<property name="interface.name" value="${introduce.skeleton.service.name}" />
	<property name="factory.interface.name" value="${introduce.skeleton.factory.name}" />

	<!-- Important directories and files -->
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="ext.lib.dir" value="ext/lib" />
	<property name="etc.dir" value="etc" />
	<property name="schema.dir" value="schema" />
	<property name="mappings.file" value="${basedir}/namespace2package.mappings" />
	<property name="common.jar.name" value="${gar.filename}-common.jar" />
	<property name="client.jar.name" value="${gar.filename}-client.jar" />
	<property name="service.jar.name" value="${gar.filename}-service.jar" />
	<property name="stubs.jar.name" value="${gar.filename}-stubs.jar" />

	<!-- Important test directories and files -->
	<property name="test.dir" value="test" />
	<property name="test.src.dir" value="${test.dir}/src" />
	<property name="test.lib.dir" value="${test.dir}/lib" />
	<property name="test.log.dir" value="test/logs" />
	<property name="test.jar.name" value="${gar.filename}-tests.jar" />
	<property name="ext.test.lib.dir" value="ext/test/lib" />
	<property name="junit.results.dir" value="${test.log.dir}/junit" />
	<property name="force.config.replace" value="false" />

	<!-- Basic Build directories -->

	<!-- Auxiliary directory where all the intermediate files will be placed -->
	<property name="build.dir" location="build" />
	<!-- Directory for compiled service classes -->
	<property name="build.dest" location="${build.dir}/classes" />
	<property name="test.build.dest" value="${build.dir}/test/classes" />
	<!-- Directory for compiled JAR files (additional library files required by
	     the service will also be placed here) -->
	<property name="build.lib.dir" location="${build.dir}/lib" />
	<!-- Directory where stub source and class files are placed -->
	<property name="stubs.dir" location="${build.dir}/stubs-${gar.filename}" />
	<!-- Stub source files -->
	<property name="stubs.src" location="${stubs.dir}/src" />
	<!-- Compiled stub classes -->
	<property name="stubs.dest" location="${stubs.dir}/classes" />

	<!-- Where we have to copy schema files inside the build directory -->
	<property name="schema.dest" location="${build.dir}/schema" />

	<!-- Filesets -->
	<!-- JARs to be included in the GAR file -->
	<fileset dir="${build.lib.dir}" id="garjars" />
	<property name="garjars.id" value="garjars" />

	<!-- Schema files (WSDL, XSD, etc.) to be included in the GAR file -->
	<fileset dir="${schema.dest}" id="garschema">
		<include name="${schema.path}/**/*" />
	</fileset>
	<property name="garschema.id" value="garschema" />

	<!-- Configuration files (security, etc.) to be included in the GAR file -->
	<property name="garetc.id" value="garetc" />
	<fileset dir="${etc.dir}" id="garetc" />


	<!-- We want detailed error messages -->
	<property name="java.debug" value="on" />

	<!--import deployment ant files -->
	<import file="build-deploy.xml" />

	<condition property="isJDK1.5">
		<and>
			<equals arg1="${ant.java.version}" arg2="1.5" />
		</and>
	</condition>


	<!-- ============================================================== -->
	<!-- Tomcat properties                                              -->
	<!-- ============================================================== -->
	<target name="checkTomcat" depends="setTomcat">
		<condition property="tomcat.not.found">
			<or>
				<not>
					<isset property="ext.tomcat.dir" />
				</not>
				<equals arg1="${ext.tomcat.dir}" arg2="" />
			</or>
		</condition>
		<fail message="Tomcat directory is not set in either CATALINA_HOME or ext.tomcat.dir" if="tomcat.not.found" />
		<echo message="Tomcat: ${ext.tomcat.dir}" />
	</target>
	<target name="setTomcat" if="env.CATALINA_HOME">
		<property name="ext.tomcat.dir" value="${env.CATALINA_HOME}" />
	</target>


	<!-- ============================================================== -->
	<!-- Globus properties                                              -->
	<!-- ============================================================== -->
	<target name="checkGlobus" depends="setGlobus">
		<condition property="globus.not.found">
			<or>
				<not>
					<isset property="ext.globus.dir" />
				</not>
				<equals arg1="${ext.globus.dir}" arg2="" />
			</or>
		</condition>
		<fail message="Globus installation is not set in either GLOBUS_LOCATION or ext.globus.dir" if="globus.not.found" />
		<echo message="Globus: ${ext.globus.dir}" />
	</target>
	<target name="setGlobus" if="env.GLOBUS_LOCATION">
		<!-- GT4 build files and directories-->
		<property name="ext.globus.dir" value="${env.GLOBUS_LOCATION}" />
		<property name="build.stubs" location="${ext.globus.dir}/share/globus_wsrf_tools/build-stubs.xml" />
		<property name="schema.src" location="${ext.globus.dir}/share/schema" />
		<property name="build.packages" location="${ext.globus.dir}/share/globus_wsrf_common/build-packages.xml" />
		<!-- Copied from build.stubs file, as there is no way to "append" to the value in the remote file -->
		<property name="GT4.ns.excludes" value="-x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.wsdl -x http://schemas.xmlsoap.org/ws/2004/04/trust -x http://schemas.xmlsoap.org/ws/2002/12/policy -x http://schemas.xmlsoap.org/ws/2002/07/utility -x http://schemas.xmlsoap.org/ws/2004/04/sc -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd -x http://www.w3.org/2000/09/xmldsig# -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" />

	</target>


	<target name="checkJDK" unless="isJDK1.5">
		<fail message="JDK with version &lt; 1.5 is required to build this project!"/>
	</target>

	<!-- Sets up the build directory structure -->
	<target name="init" depends="checkGlobus, checkJDK">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dest}" />
		<mkdir dir="${test.build.dest}" />
		<delete dir="${build.lib.dir}" />
		<!-- Delete build lib dir to avoid JARs from previous builds from getting into our GAR file -->
		<mkdir dir="${build.lib.dir}" />

		<mkdir dir="${stubs.dir}" />
		<mkdir dir="${stubs.src}" />
		<mkdir dir="${stubs.dest}" />

		<mkdir dir="${schema.dest}" />
		<copy toDir="${schema.dest}">
			<fileset dir="${schema.src}" casesensitive="yes">
				<include name="wsrf/**/*" />
				<include name="ws/**/*" />
			</fileset>
			<fileset dir="${schema.dir}" casesensitive="yes">
				<include name="**" />
			</fileset>
		</copy>

		<!-- Creates etc.dir in case it doesn't exist. Has no effect if dir already exists -->
		<mkdir dir="${etc.dir}" />
	</target>


	<!-- "Flattens" the WSDL file. i.e. runs the WSDL Preprocessor and creates a single
	     WSDL file with all the operations and RPs in the portTypes specified in
	     the wsdlpp:extends attribute (plus, of course, those defined in our own WSDL file) -->
	<!-- Note that this is done with a GT4 tool -->
	<target name="flatten" depends="init">
		<ant antfile="${build.stubs}" target="flatten">
			<property name="source.flatten.dir" location="${schema.dest}/${schema.path}" />
			<property name="target.flatten.dir" location="${schema.dest}/${schema.path}" />
			<property name="wsdl.source" value="${interface.name}.wsdl" />
			<property name="wsdl.target" value="${interface.name}_flattened.wsdl" />
			<property name="wsdl.porttype" value="${interface.name}PortType" />
		</ant>
	</target>


	<!-- Same as above, but for the factory WSDL file (if any) -->
	<target name="factoryFlatten" depends="init" if="factory.schema.path">
		<ant antfile="${build.stubs}" target="flatten">
			<property name="source.flatten.dir" location="${schema.dest}/${factory.schema.path}" />
			<property name="target.flatten.dir" location="${schema.dest}/${factory.schema.path}" />
			<property name="wsdl.source" value="${factory.interface.name}.wsdl" />
			<property name="wsdl.target" value="${factory.interface.name}_flattened.wsdl" />
			<property name="wsdl.porttype" value="${factory.interface.name}PortType" />
		</ant>
	</target>


	<!-- Generate bindings for our WSDL file -->
	<!-- This is done with a GT4 tool -->
	<target name="generateBindings" depends="flatten">
		<ant antfile="${build.stubs}" target="generateBinding">
			<property name="source.binding.dir" value="${schema.dest}/${schema.path}" />
			<property name="target.binding.dir" value="${schema.dest}/${schema.path}" />
			<property name="porttype.wsdl" value="${interface.name}_flattened.wsdl" />
			<property name="binding.root" value="${interface.name}" />
		</ant>
	</target>


	<!-- Same as above, but for the factory WSDL file (if any) -->
	<target name="generateFactoryBindings" depends="factoryFlatten" if="factory.schema.path">
		<ant antfile="${build.stubs}" target="generateBinding">
			<property name="source.binding.dir" value="${schema.dest}/${factory.schema.path}" />
			<property name="target.binding.dir" value="${schema.dest}/${factory.schema.path}" />
			<property name="porttype.wsdl" value="${factory.interface.name}_flattened.wsdl" />
			<property name="binding.root" value="${factory.interface.name}" />
		</ant>
	</target>


	<!-- Generate the stub source files -->
	<!-- This is done with a GT4 tool -->
	<target name="stubs" depends="generateBindings">
		<!-- Merge our namespace mappings file with the GT4 mappins file -->
		<ant antfile="${build.stubs}" target="mergePackageMapping">
			<property name="mapping.src" location="${mappings.file}" />
			<property name="mapping.dst" location="${build.dir}/namespace2package.mappings" />
		</ant>
		<!-- Invoke the stub generator -->
		<ant antfile="${build.stubs}" target="generateStubs">
			<property name="mapping.file" location="${build.dir}/namespace2package.mappings" />
			<property name="source.stubs.dir" location="${schema.dest}/${schema.path}" />
			<property name="target.stubs.dir" location="${stubs.src}" />
			<property name="wsdl.file" value="${interface.name}_service.wsdl" />
			<property name="ns.excludes" value="${GT4.ns.excludes} ${introduce.ns.excludes}" />
		</ant>
	</target>


	<!-- Same as above, but for the factory service (if any) -->
	<target name="factoryStubs" depends="generateFactoryBindings" if="factory.schema.path">
		<ant antfile="${build.stubs}" target="mergePackageMapping">
			<property name="mapping.src" location="${mappings.file}" />
			<property name="mapping.dst" location="${build.dir}/namespace2package.mappings" />
		</ant>
		<ant antfile="${build.stubs}" target="generateStubs">
			<property name="mapping.file" location="${build.dir}/namespace2package.mappings" />
			<property name="source.stubs.dir" location="${schema.dest}/${factory.schema.path}" />
			<property name="target.stubs.dir" location="${stubs.src}" />
			<property name="wsdl.file" value="${factory.interface.name}_service.wsdl" />
		</ant>
	</target>


	<!-- Compile the stubs generated in the previous step -->
	<target name="compileStubs" depends="stubs, factoryStubs">
		<javac srcdir="${stubs.src}" destdir="${stubs.dest}" debug="${java.debug}">
			<include name="**/*.java" />
			<classpath>
				<!-- need to include libs incase they are using their own types -->
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${ext.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${ext.globus.dir}/lib">
					<include name="*.jar" />
					<exclude name="${stubs.jar.name}" />
					<exclude name="${common.jar.name}" />
					<exclude name="${client.jar.name}" />
					<exclude name="${service.jar.name}" />
				</fileset>
			</classpath>
		</javac>
	</target>


	<!-- Compile the implementation classes (service, resource, etc.) -->
	<target name="compile" depends="compileStubs">

		<javac srcdir="${src.dir}" includes="${package.dir}/**" destdir="${build.dest}" debug="${java.debug}" deprecation="${deprecation}">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${ext.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<pathelement location="${stubs.dest}" />
				<fileset dir="${ext.globus.dir}/lib">
					<include name="*.jar" />
					<exclude name="${stubs.jar.name}" />
					<exclude name="${common.jar.name}" />
					<exclude name="${client.jar.name}" />
					<exclude name="${service.jar.name}" />
				</fileset>
			</classpath>
		</javac>
		<copy toDir="${build.dest}">
			<fileset dir="${src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

	</target>

	<!-- Compile the test implementation classes (service, resource, etc.) -->
	<target name="compileTests" depends="compile">

		<javac srcdir="${test.src.dir}" destdir="${test.build.dest}" debug="${java.debug}" deprecation="${deprecation}">
			<classpath>
				<fileset dir="${test.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${ext.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<pathelement location="${build.dest}" />
				<pathelement location="${stubs.dest}" />
				<fileset dir="${ext.globus.dir}/lib">
					<include name="*.jar" />
					<exclude name="${stubs.jar.name}" />
					<exclude name="${common.jar.name}" />
					<exclude name="${client.jar.name}" />
					<exclude name="${service.jar.name}" />
				</fileset>
			</classpath>
		</javac>

	</target>


	<!-- Create a JAR file with the implementation classes -->
	<target name="jar" depends="compile">
		<jar jarfile="${build.lib.dir}/${client.jar.name}" basedir="${build.dest}">
			<include name="${package.dir}/client/**" />
		</jar>
		<jar jarfile="${build.lib.dir}/${service.jar.name}" basedir="${build.dest}">
			<include name="${package.dir}/service/**" />
		</jar>
		<jar jarfile="${build.lib.dir}/${common.jar.name}" basedir="${build.dest}">
			<include name="**/*.xml" />
			<include name="**/*.dtd" />
			<include name="**/*.properties" />
			<include name="**/*.xsd" />
			<include name="${package.dir}/**" />
			<exclude name="${package.dir}/client/**" />
			<exclude name="${package.dir}/service/**" />
		</jar>
	</target>


	<!-- Create a JAR file with the test implementation classes -->
	<target name="jarTests" depends="jar,compileTests">
		<jar jarfile="${build.lib.dir}/${test.jar.name}" basedir="${test.build.dest}" />
	</target>


	<!-- Create a JAR file with the stub classes -->
	<target name="jarStubs" depends="compileStubs">
		<jar destfile="${build.lib.dir}/${stubs.jar.name}" basedir="${stubs.dest}" />
	</target>


	<!-- Empty target, in case we simply want to generate the JAR files -->
	<target name="jars" depends="jarStubs, jar, jarTests" />

	<mkdir dir="${test.log.dir}" />
	<!-- call the test target for each project and aggregates the log resutls  -->
	<target name="test" depends="checkGlobus,create_config_files">
		<echo message="Test results dir: ${junit.results.dir}" />
		<mkdir dir="${junit.results.dir}" />
		<junit dir="${basedir}" printsummary="yes" haltonfailure="true" haltonerror="true" showoutput="true">
			<sysproperty key="basedir" value="${basedir}" />
			<jvmarg value="-Xmx512M" />
			<jvmarg value="-Dbuild.dir=${build.dir}" />
			<jvmarg value="-Djava.endorsed.dirs=${ext.endorsed.dir}" />
			<classpath>
				<fileset dir="${ext.globus.dir}/lib">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${build.lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${ext.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${ext.test.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<pathelement location="${test.dir}/resources" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" haltonfailure="true" haltonerror="true" todir="${junit.results.dir}">
				<fileset dir="${test.src.dir}">
					<include name="**/Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	<!-- ============================================================== -->
	<!-- Creates conf files from examples                               -->
	<!-- ============================================================== -->
	<target name="create_config_files" description="Creates conf files from examples.
		Set property force.config.replace to true to force replacement.">
		<copy todir="${test.dir}/resources" overwrite="${force.config.replace}">
			<fileset dir="${test.dir}/resources">
				<include name="**/*.example" />
			</fileset>
			<mapper type="glob" from="*.example" to="*" />
		</copy>
	</target>


	<!-- Clean up all the intermediate files -->
	<target name="clean">
		<delete dir="tmp" />
		<delete dir="${build.dir}" />
		<delete file="${gar.name}" />
	</target>

	<!-- Default target "all" builds and jars everything, including test....does not make a GAR-->
	<target name="all" depends="jars" />

</project>
