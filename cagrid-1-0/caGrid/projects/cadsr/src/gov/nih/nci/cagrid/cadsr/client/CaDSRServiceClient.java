package gov.nih.nci.cagrid.cadsr.client;

import gov.nih.nci.cadsr.umlproject.domain.Project;
import gov.nih.nci.cadsr.umlproject.domain.SemanticMetadata;
import gov.nih.nci.cadsr.umlproject.domain.UMLAttributeMetadata;
import gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata;
import gov.nih.nci.cadsr.umlproject.domain.UMLPackageMetadata;
import gov.nih.nci.cagrid.cadsr.common.CaDSRServiceI;
import gov.nih.nci.cagrid.cadsr.stubs.CaDSRServicePortType;
import gov.nih.nci.cagrid.cadsr.stubs.service.CaDSRServiceAddressingLocator;
import gov.nih.nci.cagrid.cadsrservice.UMLAssociation;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.cagrid.metadata.dataservice.DomainModel;

import java.io.FileWriter;
import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;
import org.globus.wsrf.encoding.ObjectSerializer;


/**
 * This class is autogenerated, DO NOT EDIT. This class is not thread safe. A
 * new instance should be created for any threads using this class. On
 * construction the class instance will contact the remote service and retrieve
 * it's security metadata description which it will use to configure the Stub
 * specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class CaDSRServiceClient extends ServiceSecurityClient implements CaDSRServiceI {
    protected CaDSRServicePortType portType;
    private Object portTypeMutex;


    public CaDSRServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }


    public CaDSRServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
        initialize();
    }


    public CaDSRServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }


    public CaDSRServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException,
        RemoteException {
        super(epr, proxy);
        initialize();
    }


    private void initialize() throws RemoteException {
        this.portTypeMutex = new Object();
        this.portType = createPortType();
    }


    private CaDSRServicePortType createPortType() throws RemoteException {

        CaDSRServiceAddressingLocator locator = new CaDSRServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        // InputStream resourceAsStream =
        // ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
        InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        CaDSRServicePortType port = null;
        try {
            port = locator.getCaDSRServicePortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }


    public static void usage() {
        System.out.println(CaDSRServiceClient.class.getName() + " -url <service url>");
    }


    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    CaDSRServiceClient client = new CaDSRServiceClient(args[1]);

                    Project[] projects = client.findProjects("caCORE");
                    for (Project p : projects) {
                        System.out.println(p.getLongName());
                    }

                    System.out.println("Building domain model (this might take a while)...");
                    Project caCoreProj = new Project();
                    caCoreProj.setShortName("caCORE 3.2");
                    // caCoreProj.setVersion("3.0");
                    long start = System.currentTimeMillis();
                    DomainModel model = client.generateDomainModelForPackages(caCoreProj,
                        new String[]{"gov.nih.nci.cadsr.domain"});
                    System.out.println("Model retrieved in " + (System.currentTimeMillis() - start) + "ms");
                    System.out.println("Serializing to domainModel.xml");
                    start = System.currentTimeMillis();
                    FileWriter writer = new FileWriter("domainModel.xml");

                    ObjectSerializer.serialize(writer, model, new QName(
                        "gme://caGrid.caBIG/1.0/gov.nih.nci.cagrid.metadata.dataservice", "DomainModel"));
                    writer.flush();
                    writer.close();
                    System.out.println("Model serialized in " + (System.currentTimeMillis() - start) + "ms");

                    Project[] projs = client.findAllProjects();
                    if (projs != null) {
                        for (Project project : projs) {
                            System.out.println("\n" + project.getShortName());
                            UMLPackageMetadata[] packs = client.findPackagesInProject(project);
                            if (packs != null) {
                                for (UMLPackageMetadata pack : packs) {
                                    System.out.println("\t-" + pack.getName());

                                    UMLClassMetadata[] classes = client.findClassesInPackage(project, pack.getName());
                                    if (classes != null) {
                                        for (UMLClassMetadata clazz : classes) {
                                            System.out.println("\t\t-" + clazz.getName());
                                            UMLAttributeMetadata[] atts = client.findAttributesInClass(project, clazz);
                                            if (atts != null) {
                                                for (UMLAttributeMetadata att : atts) {
                                                    System.out.println("\t\t\t-" + att.getName());
                                                }
                                            }

                                            UMLAssociation[] assocs = client.findAssociationsForClass(project, clazz);
                                            if (assocs != null) {
                                                for (UMLAssociation assoc : assocs) {
                                                    System.out.println("\t\t\t("
                                                        + assoc.getSourceRoleName()
                                                        + ")---> ("
                                                        + assoc.getTargetRoleName()
                                                        + ")"
                                                        + assoc.getTargetUMLClassMetadata().getUMLClassMetadata()
                                                            .getFullyQualifiedName());
                                                }
                                            }

                                            SemanticMetadata[] semantics = client.findSemanticMetadataForClass(project,
                                                clazz);
                                            if (assocs != null) {
                                                for (SemanticMetadata semantic : semantics) {
                                                    System.out.println("\t\t\t(concept code " + semantic.getOrder()
                                                        + "):" + semantic.getConceptCode());
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }

                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @Override
    public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata()
        throws RemoteException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "getServiceSecurityMetadata");
            gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
            gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = this.portType
                .getServiceSecurityMetadata(params);
            return boxedResult.getServiceSecurityMetadata();
        }
    }


    public gov.nih.nci.cadsr.umlproject.domain.Project[] findAllProjects() throws RemoteException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findAllProjects");
            gov.nih.nci.cagrid.cadsr.stubs.FindAllProjectsRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindAllProjectsRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindAllProjectsResponse boxedResult = this.portType.findAllProjects(params);
            return boxedResult.getProject();
        }
    }


    public gov.nih.nci.cadsr.umlproject.domain.Project[] findProjects(java.lang.String context) throws RemoteException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findProjects");
            gov.nih.nci.cagrid.cadsr.stubs.FindProjectsRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindProjectsRequest();
            params.setContext(context);
            gov.nih.nci.cagrid.cadsr.stubs.FindProjectsResponse boxedResult = this.portType.findProjects(params);
            return boxedResult.getProject();
        }
    }


    public gov.nih.nci.cadsr.umlproject.domain.UMLPackageMetadata[] findPackagesInProject(
        gov.nih.nci.cadsr.umlproject.domain.Project project) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findPackagesInProject");
            gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProjectRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProjectRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProjectRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProjectRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProjectResponse boxedResult = this.portType
                .findPackagesInProject(params);
            return boxedResult.getUMLPackageMetadata();
        }
    }


    public gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata[] findClassesInProject(
        gov.nih.nci.cadsr.umlproject.domain.Project project) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findClassesInProject");
            gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProjectRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProjectRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProjectRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProjectRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProjectResponse boxedResult = this.portType
                .findClassesInProject(params);
            return boxedResult.getUMLClassMetadata();
        }
    }


    public gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata[] findClassesInPackage(
        gov.nih.nci.cadsr.umlproject.domain.Project project, java.lang.String packageName) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findClassesInPackage");
            gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackageRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackageRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackageRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackageRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            params.setPackageName(packageName);
            gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackageResponse boxedResult = this.portType
                .findClassesInPackage(params);
            return boxedResult.getUMLClassMetadata();
        }
    }


    public gov.nih.nci.cagrid.metadata.dataservice.DomainModel generateDomainModelForProject(
        gov.nih.nci.cadsr.umlproject.domain.Project project) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "generateDomainModelForProject");
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProjectRequest params = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProjectRequest();
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProjectRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProjectRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProjectResponse boxedResult = this.portType
                .generateDomainModelForProject(params);
            return boxedResult.getDomainModel();
        }
    }


    public gov.nih.nci.cagrid.metadata.dataservice.DomainModel generateDomainModelForPackages(
        gov.nih.nci.cadsr.umlproject.domain.Project project, java.lang.String[] packageNames) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "generateDomainModelForPackages");
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackagesRequest params = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackagesRequest();
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackagesRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackagesRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            params.setPackageNames(packageNames);
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackagesResponse boxedResult = this.portType
                .generateDomainModelForPackages(params);
            return boxedResult.getDomainModel();
        }
    }


    public gov.nih.nci.cagrid.metadata.dataservice.DomainModel generateDomainModelForClassesWithExcludes(
        gov.nih.nci.cadsr.umlproject.domain.Project project, java.lang.String[] fullClassNames,
        gov.nih.nci.cagrid.cadsrservice.UMLAssociationExclude[] associationExcludes) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "generateDomainModelForClassesWithExcludes");
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesWithExcludesRequest params = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesWithExcludesRequest();
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesWithExcludesRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesWithExcludesRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            params.setFullClassNames(fullClassNames);
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesWithExcludesRequestAssociationExcludes associationExcludesContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesWithExcludesRequestAssociationExcludes();
            associationExcludesContainer.setUMLAssociationExclude(associationExcludes);
            params.setAssociationExcludes(associationExcludesContainer);
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesWithExcludesResponse boxedResult = this.portType
                .generateDomainModelForClassesWithExcludes(params);
            return boxedResult.getDomainModel();
        }
    }


    public gov.nih.nci.cadsr.umlproject.domain.UMLAttributeMetadata[] findAttributesInClass(
        gov.nih.nci.cadsr.umlproject.domain.Project project, gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata clazz)
        throws RemoteException, gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findAttributesInClass");
            gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassRequestClazz clazzContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassRequestClazz();
            clazzContainer.setUMLClassMetadata(clazz);
            params.setClazz(clazzContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassResponse boxedResult = this.portType
                .findAttributesInClass(params);
            return boxedResult.getUMLAttributeMetadata();
        }
    }


    public gov.nih.nci.cadsr.umlproject.domain.SemanticMetadata[] findSemanticMetadataForClass(
        gov.nih.nci.cadsr.umlproject.domain.Project project, gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata clazz)
        throws RemoteException, gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findSemanticMetadataForClass");
            gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassRequestClazz clazzContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassRequestClazz();
            clazzContainer.setUMLClassMetadata(clazz);
            params.setClazz(clazzContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassResponse boxedResult = this.portType
                .findSemanticMetadataForClass(params);
            return boxedResult.getSemanticMetadata();
        }
    }


    public gov.nih.nci.cadsr.domain.ValueDomain findValueDomainForAttribute(
        gov.nih.nci.cadsr.umlproject.domain.Project project,
        gov.nih.nci.cadsr.umlproject.domain.UMLAttributeMetadata attribute) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findValueDomainForAttribute");
            gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeRequestAttribute attributeContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeRequestAttribute();
            attributeContainer.setUMLAttributeMetadata(attribute);
            params.setAttribute(attributeContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeResponse boxedResult = this.portType
                .findValueDomainForAttribute(params);
            return boxedResult.getValueDomain();
        }
    }


    public gov.nih.nci.cagrid.cadsrservice.UMLAssociation[] findAssociationsForClass(
        gov.nih.nci.cadsr.umlproject.domain.Project project, gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata clazz)
        throws RemoteException, gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findAssociationsForClass");
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassRequestClazz clazzContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassRequestClazz();
            clazzContainer.setUMLClassMetadata(clazz);
            params.setClazz(clazzContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassResponse boxedResult = this.portType
                .findAssociationsForClass(params);
            return boxedResult.getUMLAssociation();
        }
    }


    public gov.nih.nci.cagrid.cadsrservice.UMLAssociation[] findAssociationsInPackage(
        gov.nih.nci.cadsr.umlproject.domain.Project project, java.lang.String packageName) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findAssociationsInPackage");
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackageRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackageRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackageRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackageRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            params.setPackageName(packageName);
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackageResponse boxedResult = this.portType
                .findAssociationsInPackage(params);
            return boxedResult.getUMLAssociation();
        }
    }


    public gov.nih.nci.cagrid.cadsrservice.UMLAssociation[] findAssociationsInProject(
        gov.nih.nci.cadsr.umlproject.domain.Project project) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findAssociationsInProject");
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProjectRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProjectRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProjectRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProjectRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProjectResponse boxedResult = this.portType
                .findAssociationsInProject(params);
            return boxedResult.getUMLAssociation();
        }
    }


    public gov.nih.nci.cagrid.metadata.dataservice.DomainModel generateDomainModelForClasses(
        gov.nih.nci.cadsr.umlproject.domain.Project project, java.lang.String[] fullClassNames) throws RemoteException,
        gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "generateDomainModelForClasses");
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesRequest params = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesRequest();
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            params.setFullClassNames(fullClassNames);
            gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesResponse boxedResult = this.portType
                .generateDomainModelForClasses(params);
            return boxedResult.getDomainModel();
        }
    }


    public gov.nih.nci.cagrid.metadata.ServiceMetadata annotateServiceMetadata(
        gov.nih.nci.cagrid.metadata.ServiceMetadata serviceMetadata) throws RemoteException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "annotateServiceMetadata");
            gov.nih.nci.cagrid.cadsr.stubs.AnnotateServiceMetadataRequest params = new gov.nih.nci.cagrid.cadsr.stubs.AnnotateServiceMetadataRequest();
            gov.nih.nci.cagrid.cadsr.stubs.AnnotateServiceMetadataRequestServiceMetadata serviceMetadataContainer = new gov.nih.nci.cagrid.cadsr.stubs.AnnotateServiceMetadataRequestServiceMetadata();
            serviceMetadataContainer.setServiceMetadata(serviceMetadata);
            params.setServiceMetadata(serviceMetadataContainer);
            gov.nih.nci.cagrid.cadsr.stubs.AnnotateServiceMetadataResponse boxedResult = this.portType
                .annotateServiceMetadata(params);
            return boxedResult.getServiceMetadata();
        }
    }


    public gov.nih.nci.cadsr.domain.Context findContextForProject(gov.nih.nci.cadsr.umlproject.domain.Project project)
        throws RemoteException, gov.nih.nci.cagrid.cadsr.stubs.types.InvalidProjectException {
        synchronized (this.portTypeMutex) {
            configureStubSecurity((Stub) this.portType, "findContextForProject");
            gov.nih.nci.cagrid.cadsr.stubs.FindContextForProjectRequest params = new gov.nih.nci.cagrid.cadsr.stubs.FindContextForProjectRequest();
            gov.nih.nci.cagrid.cadsr.stubs.FindContextForProjectRequestProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindContextForProjectRequestProject();
            projectContainer.setProject(project);
            params.setProject(projectContainer);
            gov.nih.nci.cagrid.cadsr.stubs.FindContextForProjectResponse boxedResult = this.portType
                .findContextForProject(params);
            return boxedResult.getContext();
        }
    }

}
