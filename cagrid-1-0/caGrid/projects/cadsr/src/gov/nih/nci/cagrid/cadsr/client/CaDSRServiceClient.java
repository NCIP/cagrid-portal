package gov.nih.nci.cagrid.cadsr.client;

import gov.nih.nci.cadsr.umlproject.domain.Project;
import gov.nih.nci.cadsr.umlproject.domain.UMLAttributeMetadata;
import gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata;
import gov.nih.nci.cadsr.umlproject.domain.UMLPackageMetadata;
import gov.nih.nci.cagrid.cadsr.common.CaDSRServiceI;
import gov.nih.nci.cagrid.cadsr.stubs.CaDSRServicePortType;
import gov.nih.nci.cagrid.cadsr.stubs.service.CaDSRServiceAddressingLocator;

import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.utils.ClassUtils;
import org.globus.gsi.GlobusCredential;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by caGrid toolkit version 0.5
 */
public class CaDSRServiceClient implements CaDSRServiceI {

	private GlobusCredential proxy;
	private String url;


	public CaDSRServiceClient(String url) {
		this(url, null);
	}


	public CaDSRServiceClient(String url, GlobusCredential proxy) {
		this.proxy = proxy;
		this.url = url;
	}


	private CaDSRServicePortType getPortType() throws RemoteException {

		CaDSRServiceAddressingLocator locator = new CaDSRServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		CaDSRServicePortType port = null;
		EndpointReferenceType endpoint = new EndpointReferenceType();
		try {
			endpoint.setAddress(new Address(url));
			port = locator.getCaDSRServicePortTypePort(endpoint);
		} catch (Exception e) {
			throw new RemoteException("Unable to configured porttype:" + e.getMessage(), e);
		}

		return port;
	}


	public static void usage() {
		System.out.println(CaDSRServiceClient.class.getName() + " -url <service's url>");
	}


	public static void main(String[] args) {
		try {
			if (!(args.length < 2)) {
				if (args[0].equals("-url")) {
					CaDSRServiceClient client = new CaDSRServiceClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....

					Project[] projs = client.findAllProjects();
					if (projs != null) {
						for (int i = 0; i < projs.length; i++) {
							Project project = projs[i];
							System.out.println("\n" + project.getShortName());
							UMLPackageMetadata[] packs = client.findPackagesInProject(project);
							if (packs != null) {
								for (int j = 0; j < packs.length; j++) {
									UMLPackageMetadata pack = packs[j];
									System.out.println("\t-" + pack.getName());

									UMLClassMetadata[] classes = client.findClassesInPackage(project, pack.getName());
									if (classes != null) {
										for (int k = 0; k < classes.length; k++) {
											UMLClassMetadata clazz = classes[k];
											System.out.println("\t\t-" + clazz.getName());

											// UMLAssociation[] assocs =
											// client.findAssociationsForClass(project,
											// clazz);
											// if (assocs != null) {
											// for (int index = 0; index <
											// assocs.length; index++) {
											// UMLAssociation assoc =
											// assocs[index];
											//
											// System.out.println("\t\t\t("
											// + assoc.getSourceRoleName()
											// + ")---> ("
											// + assoc.getTargetRoleName()
											// + ")"
											// +
											// assoc.getTargetUMLClassMetadata().getUMLClassMetadata()
											// .getFullyQualifiedName());
											// }
											// }

											UMLAttributeMetadata[] atts = client.findAttributesInClass(project, clazz);
											if (atts != null) {
												for (int l = 0; l < atts.length; l++) {
													UMLAttributeMetadata att = atts[l];
													System.out.println("\t\t\t-" + att.getName());
												}
											}

										}
									}
								}
							}
						}
					}
				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	public gov.nih.nci.cadsr.umlproject.domain.Project[] findAllProjects() throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindAllProjects params = new gov.nih.nci.cagrid.cadsr.stubs.FindAllProjects();
		gov.nih.nci.cagrid.cadsr.stubs.FindAllProjectsResponse boxedResult = port.findAllProjects(params);
		return boxedResult.getProject();

	}


	public gov.nih.nci.cadsr.umlproject.domain.Project[] findProjects(java.lang.String context) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindProjects params = new gov.nih.nci.cagrid.cadsr.stubs.FindProjects();
		params.setContext(context);
		gov.nih.nci.cagrid.cadsr.stubs.FindProjectsResponse boxedResult = port.findProjects(params);
		return boxedResult.getProject();

	}


	public gov.nih.nci.cadsr.umlproject.domain.UMLPackageMetadata[] findPackagesInProject(
		gov.nih.nci.cadsr.umlproject.domain.Project project) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProject params = new gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProject();
		gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProjectProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProjectProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindPackagesInProjectResponse boxedResult = port.findPackagesInProject(params);
		return boxedResult.getUMLPackageMetadata();

	}


	public gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata[] findClassesInProject(
		gov.nih.nci.cadsr.umlproject.domain.Project project) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProject params = new gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProject();
		gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProjectProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProjectProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindClassesInProjectResponse boxedResult = port.findClassesInProject(params);
		return boxedResult.getUMLClassMetadata();

	}


	public gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata[] findClassesInPackage(
		gov.nih.nci.cadsr.umlproject.domain.Project project, java.lang.String packageName) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackage params = new gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackage();
		gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackageProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackageProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		params.setPackageName(packageName);
		gov.nih.nci.cagrid.cadsr.stubs.FindClassesInPackageResponse boxedResult = port.findClassesInPackage(params);
		return boxedResult.getUMLClassMetadata();

	}


	public gov.nih.nci.cagrid.metadata.dataservice.DomainModel generateDomainModelForProject(
		gov.nih.nci.cadsr.umlproject.domain.Project project) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProject params = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProject();
		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProjectProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProjectProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForProjectResponse boxedResult = port
			.generateDomainModelForProject(params);
		return boxedResult.getDomainModel();

	}


	public gov.nih.nci.cagrid.metadata.dataservice.DomainModel generateDomainModelForPackages(
		gov.nih.nci.cadsr.umlproject.domain.Project project, java.lang.String[] packageNames) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackages params = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackages();
		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackagesProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackagesProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		params.setPackageNames(packageNames);
		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForPackagesResponse boxedResult = port
			.generateDomainModelForPackages(params);
		return boxedResult.getDomainModel();

	}


	public gov.nih.nci.cagrid.metadata.dataservice.DomainModel generateDomainModelForClasses(
		gov.nih.nci.cadsr.umlproject.domain.Project project,
		gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata[] classes,
		gov.nih.nci.cagrid.cadsr.domain.UMLAssociation[] associations) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClasses params = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClasses();
		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesClasses classesContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesClasses();
		classesContainer.setUMLClassMetadata(classes);
		params.setClasses(classesContainer);
		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesAssociations associationsContainer = new gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesAssociations();
		associationsContainer.setUMLAssociation(associations);
		params.setAssociations(associationsContainer);
		gov.nih.nci.cagrid.cadsr.stubs.GenerateDomainModelForClassesResponse boxedResult = port
			.generateDomainModelForClasses(params);
		return boxedResult.getDomainModel();

	}


	public gov.nih.nci.cadsr.umlproject.domain.UMLAttributeMetadata[] findAttributesInClass(
		gov.nih.nci.cadsr.umlproject.domain.Project project, gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata clazz)
		throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClass params = new gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClass();
		gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassClazz clazzContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassClazz();
		clazzContainer.setUMLClassMetadata(clazz);
		params.setClazz(clazzContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindAttributesInClassResponse boxedResult = port.findAttributesInClass(params);
		return boxedResult.getUMLAttributeMetadata();

	}


	public gov.nih.nci.cadsr.umlproject.domain.SemanticMetadata[] findSemanticMetadataForClass(
		gov.nih.nci.cadsr.umlproject.domain.Project project, gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata clazz)
		throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClass params = new gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClass();
		gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassClazz clazzContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassClazz();
		clazzContainer.setUMLClassMetadata(clazz);
		params.setClazz(clazzContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindSemanticMetadataForClassResponse boxedResult = port
			.findSemanticMetadataForClass(params);
		return boxedResult.getSemanticMetadata();

	}


	public gov.nih.nci.cadsr.domain.ValueDomain findValueDomainForAttribute(
		gov.nih.nci.cadsr.umlproject.domain.Project project,
		gov.nih.nci.cadsr.umlproject.domain.UMLAttributeMetadata attribute) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttribute params = new gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttribute();
		gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeAttribute attributeContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeAttribute();
		attributeContainer.setUMLAttributeMetadata(attribute);
		params.setAttribute(attributeContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindValueDomainForAttributeResponse boxedResult = port
			.findValueDomainForAttribute(params);
		return boxedResult.getValueDomain();

	}


	public gov.nih.nci.cagrid.cadsr.domain.UMLAssociation[] findAssociationsForClass(
		gov.nih.nci.cadsr.umlproject.domain.Project project, gov.nih.nci.cadsr.umlproject.domain.UMLClassMetadata clazz)
		throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClass params = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClass();
		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassClazz clazzContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassClazz();
		clazzContainer.setUMLClassMetadata(clazz);
		params.setClazz(clazzContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsForClassResponse boxedResult = port
			.findAssociationsForClass(params);
		return boxedResult.getUMLAssociation();

	}


	public gov.nih.nci.cagrid.cadsr.domain.UMLAssociation[] findAssociationsInPackage(
		gov.nih.nci.cadsr.umlproject.domain.Project project, java.lang.String packageName) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackage params = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackage();
		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackageProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackageProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		params.setPackageName(packageName);
		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInPackageResponse boxedResult = port
			.findAssociationsInPackage(params);
		return boxedResult.getUMLAssociation();

	}


	public gov.nih.nci.cagrid.cadsr.domain.UMLAssociation[] findAssociationsInProject(
		gov.nih.nci.cadsr.umlproject.domain.Project project) throws RemoteException {
		CaDSRServicePortType port = this.getPortType();
		org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProject params = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProject();
		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProjectProject projectContainer = new gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProjectProject();
		projectContainer.setProject(project);
		params.setProject(projectContainer);
		gov.nih.nci.cagrid.cadsr.stubs.FindAssociationsInProjectResponse boxedResult = port
			.findAssociationsInProject(params);
		return boxedResult.getUMLAssociation();

	}

}
