package gov.nih.nci.cagrid.cadsr.service.globus;


import java.rmi.RemoteException;
import javax.security.auth.Subject;
import javax.xml.namespace.QName;
import javax.xml.rpc.handler.MessageContext;

import org.globus.wsrf.impl.security.authorization.exceptions.AuthorizationException;
import org.globus.wsrf.impl.security.authorization.exceptions.CloseException;
import org.globus.wsrf.impl.security.authorization.exceptions.InitializeException;
import org.globus.wsrf.impl.security.authorization.exceptions.InvalidPolicyException;
import org.globus.wsrf.security.authorization.PDP;
import org.globus.wsrf.security.authorization.PDPConfig;
import org.w3c.dom.Node;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This is a PDP for use with the globus authorization callout.
 * This class will have a authorize<methodName> method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version 1.1
 * 
 */
public class CaDSRServiceAuthorization implements PDP {

	public static final String SERVICE_NAMESPACE = "http://cadsr.cagrid.nci.nih.gov";
	
	
	public CaDSRServiceAuthorization() {
	}
	
	protected String getServiceNamespace(){
		return SERVICE_NAMESPACE;
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
					
	public static void authorizeGetServiceSecurityMetadata() throws RemoteException {
		
		
	}
					
	public static void authorizeFindAllProjects() throws RemoteException {
		
		
	}
					
	public static void authorizeFindProjects() throws RemoteException {
		
		
	}
					
	public static void authorizeFindPackagesInProject() throws RemoteException {
		
		
	}
					
	public static void authorizeFindClassesInProject() throws RemoteException {
		
		
	}
					
	public static void authorizeFindClassesInPackage() throws RemoteException {
		
		
	}
					
	public static void authorizeGenerateDomainModelForProject() throws RemoteException {
		
		
	}
					
	public static void authorizeGenerateDomainModelForPackages() throws RemoteException {
		
		
	}
					
	public static void authorizeGenerateDomainModelForClassesWithExcludes() throws RemoteException {
		
		
	}
					
	public static void authorizeFindAttributesInClass() throws RemoteException {
		
		
	}
					
	public static void authorizeFindSemanticMetadataForClass() throws RemoteException {
		
		
	}
					
	public static void authorizeFindValueDomainForAttribute() throws RemoteException {
		
		
	}
					
	public static void authorizeFindAssociationsForClass() throws RemoteException {
		
		
	}
					
	public static void authorizeFindAssociationsInPackage() throws RemoteException {
		
		
	}
					
	public static void authorizeFindAssociationsInProject() throws RemoteException {
		
		
	}
					
	public static void authorizeGenerateDomainModelForClasses() throws RemoteException {
		
		
	}
					
	public static void authorizeAnnotateServiceMetadata() throws RemoteException {
		
		
	}
					
	public static void authorizeFindContextForProject() throws RemoteException {
		
		
	}
	
	
	public boolean isPermitted(Subject peerSubject, MessageContext context, QName operation)
		throws AuthorizationException {
		
		if(!operation.getNamespaceURI().equals(getServiceNamespace())){
		  return false;
		}
		if(operation.getLocalPart().equals("getServiceSecurityMetadata")){
			try{
				authorizeGetServiceSecurityMetadata();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findAllProjects")){
			try{
				authorizeFindAllProjects();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findProjects")){
			try{
				authorizeFindProjects();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findPackagesInProject")){
			try{
				authorizeFindPackagesInProject();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findClassesInProject")){
			try{
				authorizeFindClassesInProject();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findClassesInPackage")){
			try{
				authorizeFindClassesInPackage();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("generateDomainModelForProject")){
			try{
				authorizeGenerateDomainModelForProject();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("generateDomainModelForPackages")){
			try{
				authorizeGenerateDomainModelForPackages();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("generateDomainModelForClassesWithExcludes")){
			try{
				authorizeGenerateDomainModelForClassesWithExcludes();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findAttributesInClass")){
			try{
				authorizeFindAttributesInClass();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findSemanticMetadataForClass")){
			try{
				authorizeFindSemanticMetadataForClass();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findValueDomainForAttribute")){
			try{
				authorizeFindValueDomainForAttribute();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findAssociationsForClass")){
			try{
				authorizeFindAssociationsForClass();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findAssociationsInPackage")){
			try{
				authorizeFindAssociationsInPackage();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findAssociationsInProject")){
			try{
				authorizeFindAssociationsInProject();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("generateDomainModelForClasses")){
			try{
				authorizeGenerateDomainModelForClasses();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("annotateServiceMetadata")){
			try{
				authorizeAnnotateServiceMetadata();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("findContextForProject")){
			try{
				authorizeFindContextForProject();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} 		
		return false;
	}
	

	public Node getPolicy(Node query) throws InvalidPolicyException {
		return null;
	}


	public String[] getPolicyNames() {
		return null;
	}


	public Node setPolicy(Node policy) throws InvalidPolicyException {
		return null;
	}


	public void close() throws CloseException {


	}


	public void initialize(PDPConfig config, String name, String id) throws InitializeException {

	}
	
	
}
