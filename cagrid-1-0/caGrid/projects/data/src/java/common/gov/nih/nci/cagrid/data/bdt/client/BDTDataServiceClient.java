package gov.nih.nci.cagrid.data.bdt.client;

import gov.nih.nci.cagrid.bdt.client.BulkDataHandlerClient;
import gov.nih.nci.cagrid.data.bdt.common.BDTDataServiceI;
import gov.nih.nci.cagrid.data.bdt.stubs.BDTDataServicePortType;
import gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryRequest;
import gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryRequestCqlQuery;
import gov.nih.nci.cagrid.data.bdt.stubs.BdtQueryResponse;
import gov.nih.nci.cagrid.data.bdt.stubs.service.BDTDataServiceAddressingLocator;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;
import org.globus.gsi.GlobusCredential;
import org.oasis.wsrf.properties.GetResourcePropertyResponse;


/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE METHODS.
 * 
 * This client is generated automatically by Introduce to provide a clean
 * unwrapped API to the service.
 * 
 * On construction the class instance will contact the remote service and
 * retrieve it's security metadata description which it will use to configure
 * the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class BDTDataServiceClient extends ServiceSecurityClient implements BDTDataServiceI {
    protected BDTDataServicePortType portType;
    private Object portTypeMutex;


    public BDTDataServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }


    public BDTDataServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
        initialize();
    }


    public BDTDataServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }


    public BDTDataServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException,
        RemoteException {
        super(epr, proxy);
        initialize();
    }


    private void initialize() throws RemoteException {
        this.portTypeMutex = new Object();
        this.portType = createPortType();
    }


    private BDTDataServicePortType createPortType() throws RemoteException {

        BDTDataServiceAddressingLocator locator = new BDTDataServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        BDTDataServicePortType port = null;
        try {
            port = locator.getBDTDataServicePortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }


    public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
        return portType.getResourceProperty(resourcePropertyQName);
    }


    public static void usage() {
        System.out.println(BDTDataServiceClient.class.getName() + " -url <service url>");
    }


    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    BDTDataServiceClient client = new BDTDataServiceClient(args[1]);
                    // place client calls here if you want to use this main as a
                    // test....
                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }


    public gov.nih.nci.cagrid.bdt.client.BulkDataHandlerClient bdtQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery)
        throws RemoteException, org.apache.axis.types.URI.MalformedURIException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "bdtQuery");
            BdtQueryRequest params = new BdtQueryRequest();
            BdtQueryRequestCqlQuery cqlQueryContainer = new BdtQueryRequestCqlQuery();
            cqlQueryContainer.setCQLQuery(cqlQuery);
            params.setCqlQuery(cqlQueryContainer);
            BdtQueryResponse boxedResult = portType.bdtQuery(params);
            EndpointReferenceType ref = boxedResult.getBulkDataHandlerReference().getEndpointReference();
            return new BulkDataHandlerClient(ref);
        }
    }
}
