package gov.nih.nci.cagrid.data.client;


import gov.nih.nci.cagrid.data.common.DataServiceI;
import gov.nih.nci.cagrid.data.stubs.DataServicePortType;
import gov.nih.nci.cagrid.data.stubs.service.DataServiceAddressingLocator;

import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;
import org.globus.gsi.GlobusCredential;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class DataServiceClient implements DataServiceI {	
	private GlobusCredential proxy;
	private EndpointReferenceType epr;
	private DataServicePortType portType;
	
	static{
		org.globus.axis.util.Util.registerTransport();
	}
	
	public DataServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}
	
	public DataServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		this.proxy = proxy;
		this.epr = new EndpointReferenceType();
		this.epr.setAddress(new Address(url));
		initialize();
	}
	
	public DataServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}
	
	public DataServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		this.proxy = proxy;
		this.epr = epr;
		initialize();
	}
	
	private void initialize() throws RemoteException {
		this.portType = createPortType();
	}
	
	public EndpointReferenceType getEndpointReference(){
		return this.epr;
	}
	
	private DataServicePortType createPortType() throws RemoteException {
		
		DataServiceAddressingLocator locator = new DataServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		DataServicePortType port = null;
		try {
			port = locator.getDataServicePortTypePort(this.epr);
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}
		
		return port;
	}
	
	public static void usage(){
		System.out.println(DataServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					DataServiceClient client = new DataServiceClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
		gov.nih.nci.cagrid.data.stubs.QueryRequest params = new gov.nih.nci.cagrid.data.stubs.QueryRequest();
		gov.nih.nci.cagrid.data.stubs.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.stubs.QueryRequestCqlQuery();
		cqlQueryContainer.setCQLQuery(cqlQuery);
		params.setCqlQuery(cqlQueryContainer);
		gov.nih.nci.cagrid.data.stubs.QueryResponse boxedResult = portType.query(params);
		return boxedResult.getCQLQueryResultCollection();
		
	}
	
	
}
