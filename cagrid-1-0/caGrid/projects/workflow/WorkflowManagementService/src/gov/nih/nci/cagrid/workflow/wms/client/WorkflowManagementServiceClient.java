package gov.nih.nci.cagrid.workflow.wms.client;


import java.io.File;
import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;
import org.globus.wsrf.utils.AnyHelper;

import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.workflow.stubs.Invoke;
import gov.nih.nci.cagrid.workflow.wms.stubs.WorkflowManagementServicePortType;
import gov.nih.nci.cagrid.workflow.wms.stubs.service.WMSInputType;
import gov.nih.nci.cagrid.workflow.wms.stubs.service.WMSOutputType;
import gov.nih.nci.cagrid.workflow.wms.stubs.service.WorkflowInputType;
import gov.nih.nci.cagrid.workflow.wms.stubs.service.WorkflowManagementServiceAddressingLocator;
import gov.nih.nci.cagrid.workflow.wms.common.WorkflowManagementServiceI;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class WorkflowManagementServiceClient implements WorkflowManagementServiceI {	
	private GlobusCredential proxy;
	private EndpointReferenceType epr;
	
	
	static{
		org.globus.axis.util.Util.registerTransport();
	}
	
	public WorkflowManagementServiceClient(String url) throws MalformedURIException {
		this(url,null);	
	}

	public WorkflowManagementServiceClient(String url, GlobusCredential proxy) throws MalformedURIException {
	   	this.proxy = proxy;
	   	this.epr = new EndpointReferenceType();
	   	this.epr.setAddress(new Address(url));
	}
	
	public WorkflowManagementServiceClient(EndpointReferenceType epr) throws MalformedURIException {
	   	this(epr,null);
	}
	
	public WorkflowManagementServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException {
	   	this.proxy = proxy;
	   	this.epr = epr;
	}
	
	public static WMSInputType createInput(String bpelFile) throws Exception {
		WMSInputType input = new WMSInputType();
		
		String bpelProcess = Utils.fileToStringBuffer(new File(bpelFile)).toString();
		
		WorkflowInputType inputArgs = new WorkflowInputType();
		Invoke invoke = new Invoke("Hello");
		inputArgs.set_any(AnyHelper.toAnyArray(invoke));
		input.setBpelDoc(bpelProcess);
		input.setInputArgs(inputArgs);
		input.setWorkflowName("Test");
		return input;
	}
	public EndpointReferenceType getEndpointReference(){
		return this.epr;
	}

	private WorkflowManagementServicePortType getPortType() throws RemoteException {

		WorkflowManagementServiceAddressingLocator locator = new WorkflowManagementServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		WorkflowManagementServicePortType port = null;
		try {
			port = locator.getWorkflowManagementServicePortTypePort(this.epr);
		} catch (Exception e) {
			throw new RemoteException("Unable to configured porttype:" + e.getMessage(), e);
		}

		return port;
	}
	
	public static void usage(){
		System.out.println(WorkflowManagementServiceClient.class.getName() + " -url <service url>" + " -bpel <bpelDoc>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
	    String url = null;
	    String fileName = null;
		try{
			if (args.length < 4) {
				usage();
				System.exit(-1);
			} else {
				if (args[0].equals("-url")) {
					url = args[1];
				} else {
					usage();
					System.exit(-1);
				}
				if (args[2].equals("-file")) {
					fileName = args[3];
				} else {
					usage();
					System.exit(-1);
				}
			}
			
		WorkflowManagementServiceClient client = 
			new WorkflowManagementServiceClient(url);
		WMSInputType input = WorkflowManagementServiceClient.createInput(fileName);
		WMSOutputType output = client.runWorkflow(input);
		System.out.println(AnyHelper.toString(output.getOutputType().get_any()));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	     public WMSOutputType runWorkflow(WMSInputType wmsInput) throws RemoteException {
               WorkflowManagementServicePortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.workflow.wms.stubs.RunWorkflowRequest params = new gov.nih.nci.cagrid.workflow.wms.stubs.RunWorkflowRequest();
               gov.nih.nci.cagrid.workflow.wms.stubs.RunWorkflowRequestWmsInput wmsInputContainer = new gov.nih.nci.cagrid.workflow.wms.stubs.RunWorkflowRequestWmsInput();
               wmsInputContainer.setWMSInputElement(wmsInput);
               params.setWmsInput(wmsInputContainer);
               gov.nih.nci.cagrid.workflow.wms.stubs.RunWorkflowResponse boxedResult = port.runWorkflow(params);
               return boxedResult.getWMSOutputElement();

	}


}
