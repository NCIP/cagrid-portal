package gov.nih.nci.cagrid.workflow.samples.secure.client;


import java.net.URL;
import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.workflow.samples.secure.stubs.SecureSamplePortType;
import gov.nih.nci.cagrid.workflow.samples.secure.stubs.service.SecureSampleServiceAddressingLocator;
import gov.nih.nci.cagrid.workflow.samples.secure.common.SecureSampleI;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class SecureSampleClient implements SecureSampleI {	
	private GlobusCredential proxy;
	private String url;
	
	static{
		org.globus.axis.util.Util.registerTransport();
	}
	
	public SecureSampleClient(String url) {
		this(url,null);	
	}

	public SecureSampleClient(String url, GlobusCredential proxy) {
	   	this.proxy = proxy;
	   	this.url = url;	
	}

	private SecureSamplePortType getPortType() throws RemoteException {

		SecureSampleServiceAddressingLocator locator = new SecureSampleServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		SecureSamplePortType port = null;
		EndpointReferenceType endpoint = new EndpointReferenceType();
		try {
			endpoint.setAddress(new Address(url));
			port = locator.getSecureSamplePortTypePort(endpoint);
		} catch (Exception e) {
			throw new RemoteException("Unable to configured porttype:" + e.getMessage(), e);
		}

		return port;
	}
	
	public static void usage(){
		System.out.println(SecureSampleClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  SecureSampleClient client = new SecureSampleClient(args[1]);
              System.out.println( client.invoke("Hello") );
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	













	     public java.lang.String invoke(java.lang.String string) throws RemoteException {
               SecureSamplePortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.SelfAuthorization.getInstance());
               gov.nih.nci.cagrid.workflow.samples.secure.stubs.InvokeRequest params = new gov.nih.nci.cagrid.workflow.samples.secure.stubs.InvokeRequest();
               params.setString(string);
               gov.nih.nci.cagrid.workflow.samples.secure.stubs.InvokeResponse boxedResult = port.invoke(params);
               return boxedResult.getResponse();

	}


}
