package gov.nih.nci.cagrid.workflow.context.common;

import gov.nih.nci.cagrid.workflow.context.stubs.types.CannotCancelWorkflowFault;

import java.rmi.RemoteException;

/**
 * Workflow Service that will let users start workflows, get status, pause, resume and get intermediate results
 *
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 * 
 */
public interface WorkflowServiceImplI {

    public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException ;

  public org.oasis.wsrf.lifetime.DestroyResponse destroy(org.oasis.wsrf.lifetime.Destroy params) throws RemoteException ;

  public org.oasis.wsrf.lifetime.SetTerminationTimeResponse setTerminationTime(org.oasis.wsrf.lifetime.SetTerminationTime params) throws RemoteException ;

  /**
   * Start the workflows with the input data
   *
   * @param startInputElement
   * @throws WorkflowException
   *	Workflow Exception
   * @throws StartCalledOnStartedWorkflow
   *	This Exception is thrown when start is called on already started workflows
   */
  public gov.nih.nci.cagrid.workflow.stubs.types.WorkflowStatusType start(gov.nih.nci.cagrid.workflow.stubs.types.StartInputType startInputElement) throws RemoteException, gov.nih.nci.cagrid.workflow.stubs.types.WorkflowException, gov.nih.nci.cagrid.workflow.context.stubs.types.StartCalledOnStartedWorkflow ;

  /**
   * Get Status of the workflows
   *
   * @throws WorkflowException
   *	
   */
  public gov.nih.nci.cagrid.workflow.stubs.types.WorkflowStatusType getStatus() throws RemoteException, gov.nih.nci.cagrid.workflow.stubs.types.WorkflowException ;

  /**
   * Pause the active workflows
   *
   * @throws WorkflowException
   *	
   * @throws CannotPauseWorkflowFault
   *	This is thrown when Workflow cannot be paused
   */
  public gov.nih.nci.cagrid.workflow.stubs.types.WorkflowStatusType pause() throws RemoteException, gov.nih.nci.cagrid.workflow.stubs.types.WorkflowException, gov.nih.nci.cagrid.workflow.context.stubs.types.CannotPauseWorkflowFault ;

  /**
   * Resumes paused Workflows
   *
   * @throws WorkflowException
   *	
   * @throws CannotResumeWorkflowFault
   *	This exception is thrown when a workflow cannot resumed
   */
  public gov.nih.nci.cagrid.workflow.stubs.types.WorkflowStatusType resume() throws RemoteException, gov.nih.nci.cagrid.workflow.stubs.types.WorkflowException, gov.nih.nci.cagrid.workflow.context.stubs.types.CannotResumeWorkflowFault ;

  /**
   * Cancel the workflow
   *
   * @throws WorkflowException
   *	
   * @throws CannotCancelWorkflowFault
   *	This exception is thrown when a workflow cannot be cancelled
   */
  public void cancel() throws RemoteException, gov.nih.nci.cagrid.workflow.stubs.types.WorkflowException, gov.nih.nci.cagrid.workflow.context.stubs.types.CannotCancelWorkflowFault ;

  /**
   * This operation is used to get intermediate output from the workflows
   *
   * @throws WorkflowException
   *	
   */
  public gov.nih.nci.cagrid.workflow.stubs.types.WorkflowOutputType getWorkflowOutput() throws RemoteException, gov.nih.nci.cagrid.workflow.stubs.types.WorkflowException ;

  /**
   * Gives a detailed status of the workflows
   *
   * @throws WorkflowException
   *	
   */
  public gov.nih.nci.cagrid.workflow.stubs.types.WorkflowStatusEventType[] getDetailedStatus() throws RemoteException, gov.nih.nci.cagrid.workflow.stubs.types.WorkflowException ;

}
