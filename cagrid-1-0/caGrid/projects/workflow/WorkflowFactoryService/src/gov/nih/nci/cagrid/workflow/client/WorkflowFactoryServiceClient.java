package gov.nih.nci.cagrid.workflow.client;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.MessageElement;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;
import org.globus.wsrf.encoding.ObjectSerializer;
import org.globus.wsrf.utils.AddressingUtils;
import org.globus.wsrf.utils.AnyHelper;
import org.globus.wsrf.utils.XmlUtils;
import org.w3c.dom.Element;

import gov.nih.nci.cagrid.workflow.stubs.WorkflowFactoryServicePortType;
import gov.nih.nci.cagrid.workflow.stubs.service.WorkflowFactoryServiceAddressingLocator;
import gov.nih.nci.cagrid.workflow.stubs.types.StartInputType;
import gov.nih.nci.cagrid.workflow.stubs.types.WMSInputType;
import gov.nih.nci.cagrid.workflow.stubs.types.WMSOutputType;
import gov.nih.nci.cagrid.workflow.stubs.types.WSDLReferences;
import gov.nih.nci.cagrid.workflow.stubs.types.WorkflowInputType;
import gov.nih.nci.cagrid.workflow.common.WorkflowFactoryServiceI;
import gov.nih.nci.cagrid.workflow.context.client.WorkflowServiceImplClient;
import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class WorkflowFactoryServiceClient extends ServiceSecurityClient implements WorkflowFactoryServiceI {	
	protected WorkflowFactoryServicePortType portType;
	private Object portTypeMutex;

	public WorkflowFactoryServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WorkflowFactoryServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	   	initialize();
	}
	
	public WorkflowFactoryServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public WorkflowFactoryServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
		initialize();
	}
	
	private void initialize() throws RemoteException {
	    this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private WorkflowFactoryServicePortType createPortType() throws RemoteException {

		WorkflowFactoryServiceAddressingLocator locator = new WorkflowFactoryServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		WorkflowFactoryServicePortType port = null;
		try {
			port = locator.getWorkflowFactoryServicePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage(){
		System.out.println(WorkflowFactoryServiceClient.class.getName() + " -url <service url>");
	}
	
	public static WMSInputType createInput(String bpelFile) throws Exception {
		WMSInputType input = new WMSInputType();
		String bpelProcess = Utils.fileToStringBuffer(new File(bpelFile)).toString();
		input.setBpelDoc(bpelProcess);
		input.setWorkflowName("Simple");
		WSDLReferences[] wsdlRefArray = new WSDLReferences[1];
		wsdlRefArray[0] = new WSDLReferences();
		wsdlRefArray[0].setServiceUrl(new URI("http://localhost:8080/wsrf/services/cagrid/SampleService1"));
		wsdlRefArray[0].setWsdlLocation("http://localhost:8080/wsrf/share/schema/SampleService1/SampleService1_flattened.wsdl");
		wsdlRefArray[0].setWsdlNamespace(new URI("http://workflow.cagrid.nci.nih.gov/SampleService1"));
		input.setWsdlReferences(wsdlRefArray);
		return input;
	}
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
	    FileWriter writer = null;
		try{
			String url = null;
		    String fileName = null;
		    if (args.length < 4) {
					usage();
					System.exit(-1);
				} else {
					if (args[0].equals("-url")) {
						url = args[1];
					} else {
						usage();
						System.exit(-1);
					}
					if (args[2].equals("-file")) {
						fileName = args[3];
					} else {
						usage();
						System.exit(-1);
					}
				}
		    WorkflowFactoryServiceClient client = new WorkflowFactoryServiceClient(url);
		    WMSInputType input = createInput(fileName);
		    WMSOutputType output = client.createWorkflow(input);
		    EndpointReferenceType epr = output.getWorkflowEPR();
		    writer = new FileWriter("workflow_" + input.getWorkflowName() + "_epr");
            writer.write( 
					ObjectSerializer.toString(epr, new QName("", "WMS_EPR")));
            WorkflowServiceImplClient wclient = new WorkflowServiceImplClient(epr);
            StartInputType startInput = new StartInputType();
            WorkflowInputType inputArgs = new WorkflowInputType();
            FileInputStream in = new FileInputStream("input1.xml");
    		Element e2 = XmlUtils.newDocument(in).getDocumentElement();
    		System.out.println(XmlUtils.toString(e2));
    		MessageElement anyContent = AnyHelper.toAny(new MessageElement(e2));
    		inputArgs.set_any(new MessageElement[] {anyContent});
    		startInput.setInputArgs(inputArgs);
            wclient.start(startInput);
            
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				try {
					writer.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			System.exit(1);
		}
	}

	public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");
        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
        gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);
        return boxedResult.getServiceSecurityMetadata();
      }
    }
	public WMSOutputType createWorkflow(WMSInputType wMSInputElement) throws RemoteException, gov.nih.nci.cagrid.workflow.stubs.types.WorkflowExceptionType {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"createWorkflow");
        gov.nih.nci.cagrid.workflow.stubs.CreateWorkflowRequest params = new gov.nih.nci.cagrid.workflow.stubs.CreateWorkflowRequest();
        gov.nih.nci.cagrid.workflow.stubs.CreateWorkflowRequestWMSInputElement wMSInputElementContainer = new gov.nih.nci.cagrid.workflow.stubs.CreateWorkflowRequestWMSInputElement();
        wMSInputElementContainer.setWMSInputElement(wMSInputElement);
        params.setWMSInputElement(wMSInputElementContainer);
        gov.nih.nci.cagrid.workflow.stubs.CreateWorkflowResponse boxedResult = portType.createWorkflow(params);
        return boxedResult.getWMSOutputElement();
      }
    }

}
