package org.cagrid.gaards.cds.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.cagrid.gaards.cds.stubs.CredentialDelegationServicePortType;
import org.cagrid.gaards.cds.stubs.service.CredentialDelegationServiceAddressingLocator;
import org.cagrid.gaards.cds.common.CredentialDelegationServiceI;
import org.cagrid.gaards.cds.common.GroupDelegationPolicy;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS
 * METHODS. This client is generated automatically by Introduce to provide a
 * clean unwrapped API to the service. On construction the class instance will
 * contact the remote service and retrieve it's security metadata description
 * which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class CredentialDelegationServiceClient extends ServiceSecurityClient implements CredentialDelegationServiceI {
	protected CredentialDelegationServicePortType portType;
	private Object portTypeMutex;

	public CredentialDelegationServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url, null);
	}

	public CredentialDelegationServiceClient(String url, GlobusCredential proxy) throws MalformedURIException,
		RemoteException {
		super(url, proxy);
		initialize();
	}

	public CredentialDelegationServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr, null);
	}

	public CredentialDelegationServiceClient(EndpointReferenceType epr, GlobusCredential proxy)
		throws MalformedURIException, RemoteException {
		super(epr, proxy);
		initialize();
	}

	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private CredentialDelegationServicePortType createPortType() throws RemoteException {

		CredentialDelegationServiceAddressingLocator locator = new CredentialDelegationServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		CredentialDelegationServicePortType port = null;
		try {
			port = locator.getCredentialDelegationServicePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
		return portType.getResourceProperty(resourcePropertyQName);
	}

	public static void usage() {
		System.out.println(CredentialDelegationServiceClient.class.getName() + " -url <service url>");
	}

	public static void main(String[] args) {
		System.out.println("Running the Grid Service Client");
		try {
			CredentialDelegationServiceClient client = new CredentialDelegationServiceClient(
				"https://localhost:8443/wsrf/services/cagrid/CredentialDelegationService");
			GroupDelegationPolicy policy = new GroupDelegationPolicy();
			policy.setGridGrouperServiceURI("fasjlk");
			policy.setGroupId("fsha");
			client.delegateCredential(policy);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

  public void delegateCredential(org.cagrid.gaards.cds.common.DelegationPolicy policy) throws RemoteException, org.cagrid.gaards.cds.stubs.types.CDSInternalFault, org.cagrid.gaards.cds.stubs.types.InvalidPolicyFault, org.cagrid.gaards.cds.stubs.types.PermissionDeniedFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"delegateCredential");
    org.cagrid.gaards.cds.stubs.DelegateCredentialRequest params = new org.cagrid.gaards.cds.stubs.DelegateCredentialRequest();
    org.cagrid.gaards.cds.stubs.DelegateCredentialRequestPolicy policyContainer = new org.cagrid.gaards.cds.stubs.DelegateCredentialRequestPolicy();
    policyContainer.setDelegationPolicy(policy);
    params.setPolicy(policyContainer);
    org.cagrid.gaards.cds.stubs.DelegateCredentialResponse boxedResult = portType.delegateCredential(params);
    }
  }

}
