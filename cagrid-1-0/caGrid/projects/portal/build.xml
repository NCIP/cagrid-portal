<?xml version="1.0"?>
<project name="portal" default="war" basedir=".">

    <!-- Local Environment -->
    <property environment="env"/>
    <property name="project.name" value="portal"/>

    <!--If installer has written a property file then use that-->
    <property file="${user.home}/.portal-build.properties"/>
    <!--else use local default file -->
    <property file="portal-build.properties"/>

    <property name="globus.dir" location="${env.GLOBUS_LOCATION}"/>
    <property name="globus.lib.dir" location="${globus.dir}/lib"/>

    <!-- ext directories -->
    <property name="ext.dir" value="${basedir}/ext"/>

    <!--        Source folders          -->
    <property name="src.dir" value="${basedir}/src"/>
    <property name='java.src.dir' value='${src.dir}/java'/>
    <property name='generated.src.dir' value='${src.dir}/generated'/>
    <property name='props.src.dir' value='${src.dir}/properties'/>
    <property name='scripts.src.dir' value='${src.dir}/scripts'/>

    <!-- web folder                     -->
    <property name="webcontent.dir" value="${basedir}/webcontent"/>
    <property name='webinf.dir' value='${webcontent.dir}/WEB-INF'/>
    <property name='webinf.classes.dir' value='${webinf.dir}/classes'/>
    <property name='webinf.lib.dir' value='${webinf.dir}/lib'/>
    <property name="webcontent.resources.dir" value="${webcontent.dir}/resources"/>

    <!-- Library folders -->
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="ext.lib.dir" value="${ext.dir}/lib"/>

    <!-- Resource folders -->
    <property name="resources.dir" value="${basedir}/resources"/>
    <property name="ext.resources.dir" value="${ext.dir}/resources"/>

    <!-- build directories -->
    <property name='build.dir' value='${webinf.dir}'/>
    <property name='build.classes.dir' value='${build.dir}/classes'/>
    <property name="war.build.dir" value="${basedir}/build"/>

    <!-- Important test directories and files -->
    <property name="test.dir" value="${basedir}/test"/>
    <property name="test.src.dir" value="${test.dir}/src"/>
    <property name="test.classes.dir" value="${build.classes.dir}"/>
    <property name="test.log.dir" value="test/logs"/>
    <property name="test.lib.dir" value="test/lib"/>
    <property name="ext.test.lib.dir" value="${ext.dir}/test/lib"/>
    <property name="junit.results.dir" value="${test.log.dir}/junit"/>

    <!-- Tomcat directories -->
    <property name="tomcat.dir" location="${env.CATALINA_HOME}"/>
    <property name="tomcat.webapps.dir" location="${tomcat.dir}/webapps"/>

    <!--Set logging levels if not defined by ${username}-portal.properties file -->
    <property name="log.level.root" value="WARN"/>
    <property name="log.level.portal" value="WARN"/>
    <property name="log.level.spring" value="WARN"/>

    <property name='javac.debug' value='true'/>
    <property name='javac.deprecation' value='true'/>

    <!--Custom javac                        -->
    <presetdef name="portal.javac">
        <javac source="1.4"/>
    </presetdef>

    <target name="setClasspath">
        <path id="portal.classpath">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}/nocopy">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}/poi">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}/myfaces">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${ext.lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${globus.lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </path>

        <path id="portal.run.classpath">
            <path refid="portal.classpath"/>
            <pathelement location="${build.classes.dir}"/>
        </path>

        <path id="test.classpath">
            <pathelement location="${build.classes.dir}"/>
            <pathelement path="${test.dir}/resources"/>
            <fileset dir="${ext.test.lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${test.lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${ext.lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${globus.lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </path>

        <path id="xdoclet.classpath">
            <fileset dir="${lib.dir}/xdoclet">
                <include name="*.jar"/>
            </fileset>
        </path>
    </target>

    <!-- ============================================================== -->
    <!-- Target for continous build. Use war/deploy target to build            -->
    <!-- actual app                                                     -->
    <!-- ============================================================== -->
    <target name="all" depends="clean,compile, compileTests, hibernate.xdoclet,copyLibsLocal,copyResourcesLocal"
            description="Builds the entire application"/>

    <!-- ============================================================== -->
    <!-- Initialize build environment                                   -->
    <!-- ============================================================== -->
    <target name="init" depends="setClasspath">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${webinf.lib.dir}"/>
        <mkdir dir="${webinf.classes.dir}"/>
    </target>


    <!-- ============================================================== -->
    <!-- Cleans up generated stuff                                      -->
    <!-- Not to be called directly                                      -->
    <!-- ============================================================== -->
    <target name="clean">
        <delete dir="${test.log.dir}"/>
        <delete dir="${webinf.lib.dir}"/>
        <delete dir="${webinf.classes.dir}"/>
        <ant antfile="${basedir}/build-map.xml" dir="${basedir}" inheritall="true" target="cleanMapComponent"/>

        <delete file="${war.build.dir}" failonerror="false"/>
    </target>


    <target name="buildPortal" description="Will build it locally in the local directory"
            depends="clean,compile,hibernate.xdoclet,copyLibsLocal,copyResourcesLocal"/>


    <!-- ============================================================== -->
    <!-- Deploy Target                                               -->
    <!-- ============================================================== -->

    <target name="deployTomcatPreBuilt" description="Deploys pre-built webapp">
        <copy todir="${tomcat.webapps.dir}/${project.name}" overwrite="true">
            <fileset dir="${webcontent.dir}"/>
        </copy>
    </target>

    <target name="deployTomcatExploded"
            depends="cleanDeployment,deployTomcatPreBuilt"
            description="Deploy Application into tomcat"/>

    <target name="deployTomcatWar" depends="cleanDeployment,war"
            description="Deploy Application into Tomcat as a war">
        <copy file="${war.build.dir}/${project.name}.war" todir="${tomcat.webapps.dir}"/>
    </target>


    <!-- ============================================================== -->
    <!-- Create war for deployment                                      -->
    <!-- ============================================================== -->
    <target name="war" depends="clean,compile,hibernate,copyLibsLocal,copyResourcesLocal">
        <mkdir dir="${war.build.dir}"/>

        <war basedir="${webcontent.dir}"
             destfile="${war.build.dir}/${project.name}.war"
             webxml="${webinf.dir}/web.xml"
             excludesfile="${webinf.dir}/web.xml">
        </war>
    </target>


    <target name="cleanDeployment">
        <delete dir="${tomcat.webapps.dir}/${project.name}" failonerror="false"/>
        <!--Delete the war file if one exists-->
        <delete file="${tomcat.webapps.dir}/${project.name}.war"/>
    </target>

    <target name="copyLibsLocal">
        <!--Copy libraries-->
        <copy todir="${webinf.lib.dir}">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}/myfaces">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${ext.lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <!--Copy Globus libraries-->
            <fileset dir="${globus.lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>

    </target>


    <target name="copyResourcesLocal">
        <!--Setup the map component-->
        <ant antfile="${basedir}/build-map.xml" dir="${basedir}" inheritall="true" target="setUpMapComponent"/>

        <!-- copy syncgts description file -->
        <copy file="${ext.resources.dir}/sync-description.xml" todir="${webinf.classes.dir}"/>

        <!-- Copy Resources -->
        <copy
                file='${resources.dir}/hibernate.properties.template'
                tofile='${webinf.classes.dir}/hibernate.properties'
                filtering='true'
                overwrite='true'>
            <filterset>
                <filter token='hibernate.connection.driver_class' value='${db.connection.driver_class}'/>
                <filter token='hibernate.connection.url' value='${db.connection.url}'/>
                <filter token='hibernate.connection.username' value='${db.connection.username}'/>
                <filter token='hibernate.connection.password' value='${db.connection.password}'/>
                <filter token='hibernate.c3p0.min_size' value='${hibernate.c3p0.min_size}'/>
                <filter token='hibernate.c3p0.max_size' value='${hibernate.c3p0.max_size}'/>
                <filter token='hibernate.c3p0.timeout' value='${hibernate.c3p0.timeout}'/>
                <filter token='hibernate.c3p0.max_statements' value='${hibernate.c3p0.max_statements}'/>
                <filter token='hibernate.dialect' value='${hibernate.dialect}'/>
                <filter token='hibernate.use_outer_join' value='${hibernate.use_outer_join}'/>
                <filter token='hibernate.show_sql' value='${hibernate.show_sql}'/>
            </filterset>
        </copy>


        <!--Unix works for all environments -->
        <pathconvert targetos="unix" property="tomcat.log.dir">
            <path location="${tomcat.dir}/logs"/>
        </pathconvert>

        <copy
                file="${resources.dir}/log4j.xml.template"
                tofile='${webinf.classes.dir}/log4j.xml'
                filtering="true"
                overwrite="true">
            <filterset>
                <filter token='webapp.log.dir' value='${tomcat.log.dir}'/>
                <filter token="webapp.project.name" value="${project.name}"/>
                <filter token="log.level.root" value="${log.level.root}"/>
                <filter token="log.level.portal" value="${log.level.portal}"/>
                <filter token="log.level.portal.tests" value="${log.level.portal.tests}"/>
                <filter token="log.level.springframework" value="${log.level.spring}"/>
                <filter token="log.level.org.hibernate" value="${log.level.orm}"/>
                <filter token="log.level.javax.faces" value="${log.level.javax.faces}"/>
            </filterset>
        </copy>

        <copyReplaceProperties src.filename="${props.src.dir}/applicationContext-data-access.xml"
                               dest.filename="${webinf.classes.dir}/applicationContext-data-access.xml"/>


        <copyReplaceProperties src.filename="${props.src.dir}/applicationContext-data-access-mock.xml"
                               dest.filename="${webinf.classes.dir}/applicationContext-data-access-mock.xml"/>


        <copy todir="${webinf.classes.dir}"
              file="${props.src.dir}/applicationContext-aggregators.xml"
              filtering="true" overwrite="true">
            <filterset>
                <filter token="aggregator.frequency" value="${metadata.aggregator.frequncy}"/>
            </filterset>
        </copy>

        <copy todir="${webinf.classes.dir}"
              file="${props.src.dir}/applicationContext-utils.xml"
              filtering="false" overwrite="true">
        </copy>


        <copy todir="${webinf.classes.dir}">
            <fileset dir="${props.src.dir}">
                <include name="*.properties"/>
                <include name="*.wsdd"/>
            </fileset>
            <fileset dir="${webcontent.resources.dir}">
                <include name="Portal-Labels_en.properties"/>
            </fileset>
        </copy>


    </target>

    <!-- Copy and replace DB properties in the Spring config files -->
    <macrodef name="copyReplaceProperties">
        <attribute name="src.filename"/>
        <attribute name="dest.filename"/>
        <sequential>
            <copy file="@{src.filename}"
                  tofile="@{dest.filename}"
                  filtering="true" overwrite="true">
                <filterset>
                    <filter token="jdbc.driverClassName" value="${db.connection.driver_class}"/>
                    <filter token="jdbc.url" value="${db.connection.url}"/>
                    <filter token="jdbc.username" value="${db.connection.username}"/>
                    <filter token="jdbc.password" value="${db.connection.password}"/>
                    <filter token="geocoder.application.id" value="${geocoder.application.id}"/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>
    <!-- ============================================================== -->
    <!-- Compile up generated stuff                                      -->
    <!-- ============================================================== -->
    <target name="compile" depends="init">
        <javac source="1.4" destdir="${build.classes.dir}" classpathref="portal.classpath" debug="on">
            <src>
                <pathelement path="${generated.src.dir}"/>
                <pathelement path="${java.src.dir}"/>
            </src>
        </javac>
    </target>

    <target name="prepareTest">
        <delete dir="${test.log.dir}"/>
        <mkdir dir="${test.log.dir}"/>
    </target>

    <target name="compileTests" depends="compile">
        <javac srcdir="${test.src.dir}" classpathref="test.classpath" destdir="${test.classes.dir}" debug="on"
               failonerror="true"/>
    </target>

    <!-- call the test target for each project and aggregates the log resutls  -->
    <target name="testLocal" depends="prepareTest,compileTests" description="Runs the service's tests.">
        <echo message="Test results dir: ${junit.results.dir}"/>
        <mkdir dir="${junit.results.dir}"/>
        <junit dir="${junit.results.dir}" printsummary="yes" errorproperty="test.failed" failureproperty="test.failed"
               showoutput="true">
            <classpath refid="test.classpath"/>
            <classpath>
                <pathelement path="${test.classes.dir}"/>
            </classpath>
            <sysproperty key="build.dir" value="${test.classes.dir}"/>
            <jvmarg value="-Dbuild.dir=${test.classes.dir}"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${junit.results.dir}">
                <fileset dir="${test.src.dir}">

                    <include name="**/*LocalTestCase.java"/>
                </fileset>
            </batchtest>
        </junit>
        <fail message="Tests failed! Check test reports." if="test.failed"/>
    </target>

    <target name="hibernate"
            depends="hibernate.xdoclet,file-list"/>

    <target name="hibernate.xdoclet" depends="compile">
        <taskdef name="hibernatedoclet"
                 classname="xdoclet.modules.hibernate.HibernateDocletTask">
            <classpath refid="xdoclet.classpath"/>
        </taskdef>

        <hibernatedoclet
                destdir="${build.classes.dir}"
                excludedtags="@version,@author,@todo"
                force="false"
                mergedir="merge"
                verbose="false">
            <fileset dir="${generated.src.dir}">
                <include name="**/domain/**/*.java"/>
            </fileset>
            <hibernate version='3.0'/>
        </hibernatedoclet>
    </target>

    <target name="file-list">
        <taskdef name="scriptdef" classname="org.apache.tools.ant.taskdefs.optional.Script">
            <classpath>
                <fileset dir="${lib.dir}/xdoclet">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <property name="generated.dir" location="${build.classes.dir}"/>
        <property name="hibernate.list.file" location="${build.classes.dir}/hibernate.cfg.xml"/>
        <scriptdef language="beanshell" src="${scripts.src.dir}/create_hbnfile.sh"/>
    </target>

    <!-- will create Portal DB and drop seed data -->
    <!-- Read the Readme.txt for more infor -->
    <target name="createDatabase" depends="setClasspath" description="Will drop the Portal Database">
        <java classname="gov.nih.nci.cagrid.portal.db.CreatePortalDatabase"
              failonerror="true" logerror="true">
            <classpath>
                <path refid="portal.run.classpath"/>
                <dirset dir="${resources.dir}"/>
                <dirset dir="${props.src.dir}"/>
            </classpath>
        </java>
    </target>


    <target name="populateDBWithSeedData" depends="setClasspath">
        <java classname="gov.nih.nci.cagrid.portal.db.CreatePortalSeedData"
              failonerror="true" logerror="true">
            <classpath>
                <path refid="portal.run.classpath"/>
                <dirset dir="${resources.dir}"/>
                <dirset dir="${props.src.dir}"/>
            </classpath>
        </java>
    </target>

</project>