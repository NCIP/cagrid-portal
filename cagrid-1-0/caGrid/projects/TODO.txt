
remove cagrid-core jar from lib and add build dependency

make introduce depend on this

until there is a public 3.1 server, this uses nci internal ones with a localhost sshtunnel

extract property for nci service to contact

caching using resources?




serialization stuff:
====================
http://gforge.nci.nih.gov/plugins/scmcvs/cvsweb.php/cacoretoolkit/src/gov/nih/nci/common/util/?cvsroot=cacoretoolkit
http://cvs.apache.org/viewcvs.cgi/webservices/axis/trunk/java/src/org/apache/axis/encoding/ser/castor/

make generic and more to core project

get mapper and marshaller staticly?

had to hand edit:
 -stub to associate proper ser/desr [CRITICAL]
 	defined:
 		java.lang.Class castorsf = SDKSerializerFactory.class;
		java.lang.Class castordf = SDKDeserializerFactory.class;
	edited:
		qName = new javax.xml.namespace.QName("gme://caCORE.cabig/3.0/gov.nih.nci.cadsr.umlproject.domain", "Project");
		cachedSerQNames.add(qName);
		cls = gov.nih.nci.cadsr.umlproject.domain.Project.class;
		cachedSerClasses.add(cls);
		cachedSerFactories.add(beansf);
		cachedDeserFactories.add(beandf)
	to be:
		qName = new javax.xml.namespace.QName("gme://caCORE.cabig/3.0/gov.nih.nci.cadsr.umlproject.domain", "Project");
		cachedSerQNames.add(qName);
		cls = gov.nih.nci.cadsr.umlproject.domain.Project.class;
		cachedSerClasses.add(cls);
		cachedSerFactories.add(castorsf);
		cachedDeserFactories.add(castordf)
 
 -wsdl to use right element name
	 -introduce expects all output elements to be of the "name" response... custom types need to use custom names.. should default to Classname
 -client and serviec impl to use the right name
 	-based on wsdl change
 -protocol bean to use right element name
 	 	-based on wsdl change

NOT necessary to edit:
 - client type mapping