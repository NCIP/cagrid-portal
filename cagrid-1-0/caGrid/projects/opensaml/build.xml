<!-- Build configutaion for OpenSAML/Java - Walter Hoehn 06/05/2002 -->

<project name="OpenSAML" default="all" basedir=".">
	<!-- Define the environment variable -->
	<property environment="env" />
    <property file="${basedir}/ext/resources/cagrid.properties" />
	<!-- Directory where GT4 is installed --> 
	<!-- Note that the buildfile requires an environment variable GLOBUS_LOCATION
	     pointing to that directory -->
	<property name="globus.location" location="${env.GLOBUS_LOCATION}" />
	<!-- Set global properties for this build -->
	<property name="distname" value="${cagrid.master.jar.prefix}opensaml" />
	<property name="root" value="." />
	<property name="src" value="src" />
    <property name="data" value="data" />
	<property name="build" value="build" />
	<property name="libdir" value="lib" />
	<property name="endorsed" value="endorsed" />
	<property name="dist" value="dist" />
	<property name="docs" value="doc" />
	<property name="javadocs" value="${docs}/api" />
    <property name="version" value="1.1" />
	<property name="year" value="2005"/>
	<property name="copyright" value="Copyright &#169; ${year} UCAID. All Rights Reserved."/>
	<property name="javaversion" value="1.4" />
	
    <property name="jarfile" value="${dist}/${distname}${cagrid.master.jar.separator}${version}.jar"/>
    <property name="tarfile" value="${dist}/${distname}-java-${version}.tar"/>
    <property name="gzipfile" value="${dist}/${distname}-java-${version}.tar.gz"/>
   
	<!-- Macro substitutions for conditional compilation. -->

	<!-- Disable JDK4 code if javaversion is 1.3 -->
	<condition property="ifjdk4.token" value="/*">
        <equals arg1="${javaversion}" arg2="1.3"/>
    </condition>
    <condition property="endjdk4.token" value="*/">
        <equals arg1="${javaversion}" arg2="1.3"/>
    </condition>
	<property name="ifjdk4.token" value=""/>
	<property name="endjdk4.token" value=""/>

	<!-- Disable JDK5 code if javaversion is 1.3 or 1.4 -->
	<condition property="ifjdk5.token" value="/*">
		<or>
        	<equals arg1="${javaversion}" arg2="1.3"/>
        	<equals arg1="${javaversion}" arg2="1.4"/>
		</or>
    </condition>
    <condition property="endjdk5.token" value="*/">
		<or>
        	<equals arg1="${javaversion}" arg2="1.3"/>
        	<equals arg1="${javaversion}" arg2="1.4"/>
		</or>
    </condition>
	<property name="ifjdk5.token" value=""/>
	<property name="endjdk5.token" value=""/>
	
	<!-- Construct the CLASSPATH -->
	<path id="build.path">
		<pathelement path="${classpath}" />
		<pathelement location="${build}" />
		<fileset dir="${libdir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${globus.location}/lib">
			<include name="commons-logging.jar" />
			<include name="cryptix.jar" />
			<include name="cryptix32.jar" />
			<include name="cryptix-asn1.jar" />
			<include name="jce-jdk13-125.jar" />
			<include name="jgss.jar"/>
			<include name="log4j-1.2.8.jar" />
			<include name="servlet.jar" />
			<include name="xalan.jar" />
			<include name="xmlsec.jar" />
		</fileset>
	</path>


	<!-- Prepare directory structure for project build-->
	<target name="init">
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	</target>


	<!-- Compile classes and move them to ${build} -->
	<target name="compile" depends="init">
        <copy todir="${src}/${javaversion}">
            <fileset dir="${src}">
            	<exclude name="${javaversion}/**"/>
                <include name="**/*.java"/>
            </fileset>
            <filterset begintoken="/*[" endtoken="]/">
                <filter token="if JDK4" value="${ifjdk4.token}"/>
                <filter token="if JDK5" value="${ifjdk5.token}"/>
            </filterset>
            <filterset begintoken="/[" endtoken="]*/">
                <filter token="end JDK4" value="${endjdk4.token}"/>
                <filter token="end JDK5" value="${endjdk5.token}"/>
            </filterset>
        </copy>
		<javac srcdir="${src}/${javaversion}" destdir="${build}" includes="**/*.java" fork="no" source="${javaversion}">
			<compilerarg line="-endorseddirs ${endorsed}" />
			<classpath refid="build.path" />
		</javac>
		<copy todir="${build}/schemas">
			<fileset dir="${src}/schemas"/>
		</copy>
		<copy todir="${build}/conf">
			<fileset dir="${src}/conf"/>
		</copy>
		<delete dir="${src}/${javaversion}"/>
	</target>
    <target name="compile-debug" depends="init">
        <copy todir="${src}/${javaversion}">
            <fileset dir="${src}">
            	<exclude name="${javaversion}/**"/>
                <include name="**/*.java"/>
            </fileset>
            <filterset begintoken="/*[" endtoken="]/">
                <filter token="if JDK4" value="${ifjdk4.token}"/>
                <filter token="if JDK5" value="${ifjdk5.token}"/>
            </filterset>
            <filterset begintoken="/[" endtoken="]*/">
                <filter token="end JDK4" value="${endjdk4.token}"/>
                <filter token="end JDK5" value="${endjdk5.token}"/>
            </filterset>
        </copy>
    	<javac srcdir="${src}/${javaversion}" destdir="${build}" includes="**/*.java" fork="yes" debug="yes" source="${javaversion}">
            <compilerarg line="-J-Djava.endorsed.dirs=${endorsed}" />
            <classpath refid="build.path" />
        </javac>
        <copy todir="${build}/schemas">
            <fileset dir="${src}/schemas"/>
        </copy>
        <copy todir="${build}/conf">
            <fileset dir="${src}/conf"/>
        </copy>
		<delete dir="${src}/${javaversion}"/>
    </target>
    
	<!-- Generate API docs -->
	<target name="javadocs">
		<mkdir dir="${docs}" />
		<mkdir dir="${javadocs}" />
		<javadoc packagenames='org.opensaml.*'
			sourcepath='${src}' destdir='${javadocs}'
			author='true' version='true'
			windowtitle='OpenSAML ${version} Java API' doctitle='OpenSAML ${version} Java API'
			bottom='${copyright}'>
                <classpath refid="build.path" />
                <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
                <link href="http://jakarta.apache.org/commons/codec/apidocs/"/>
        </javadoc>
	</target>

	<!-- Create product distribution and move it to ${dist} -->	
    <target name="dist-debug" depends="clean-build, compile-debug, create-jar" />
	<target name="create-jar">
        <jar jarfile="${jarfile}" basedir="${build}" />
	</target>
    <target name="create-gzip" depends="all, javadocs"
        description="Create a gzip file">
        <tar destfile="${tarfile}">
            <tarfileset dir=".">
                <patternset id="dist-fileset">
                    <include name="${data}/**"/>
                    <include name="${docs}/**"/>
                    <include name="${lib}/**"/>
                    <include name="${endorsed}/**"/>
                    <include name="${src}/**"/>
                    <include name="build.xml"/>
                    <include name="${jarfile}"/>   
                </patternset>
            </tarfileset>
        </tar>
        <gzip src="${tarfile}" destfile="${gzipfile}"/>
        <delete file="${tarfile}"/>
    </target>

	<target name="create-zip" depends="all, javadocs"
        description="Create a zip file">
        <zip destfile="${zipfile}">
            <fileset dir=".">
                <patternset refid="dist-fileset"/>
            </fileset>
        </zip>
    </target>
   
	<!-- Cleanup after the build, test, and distribution processes -->
	<target name="clean" depends="clean-build, clean-dist" />
	<target name="clean-build">
		<delete dir="${build}" />
	</target>
	
	<target name="clean-dist">
		<delete dir="${dist}" />
	</target>

	<target name="clean-javadocs">
		<delete dir="${javadocs}" />
	</target>
	
	
	<target name="all" depends="compile, create-jar" />
</project>
