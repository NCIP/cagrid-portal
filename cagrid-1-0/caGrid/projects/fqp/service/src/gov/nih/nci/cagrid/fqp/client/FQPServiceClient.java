package gov.nih.nci.cagrid.fqp.client;


import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.fqp.stubs.FQPServicePortType;
import gov.nih.nci.cagrid.fqp.stubs.service.FQPServiceAddressingLocator;
import gov.nih.nci.cagrid.fqp.common.FQPServiceI;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class FQPServiceClient implements FQPServiceI {	
	private GlobusCredential proxy;
	private EndpointReferenceType epr;
	
	static{
		org.globus.axis.util.Util.registerTransport();
	}
	
	public FQPServiceClient(String url) throws MalformedURIException {
		this(url,null);	
	}

	public FQPServiceClient(String url, GlobusCredential proxy) throws MalformedURIException {
	   	this.proxy = proxy;
	   	this.epr = new EndpointReferenceType();
	   	this.epr.setAddress(new Address(url));
	}
	
	public FQPServiceClient(EndpointReferenceType epr) throws MalformedURIException {
	   	this(epr,null);
	}
	
	public FQPServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException {
	   	this.proxy = proxy;
	   	this.epr = epr;
	}
	
	public EndpointReferenceType getEndpointReference(){
		return this.epr;
	}

	private FQPServicePortType getPortType() throws RemoteException {

		FQPServiceAddressingLocator locator = new FQPServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		FQPServicePortType port = null;
		try {
			port = locator.getFQPServicePortTypePort(this.epr);
		} catch (Exception e) {
			throw new RemoteException("Unable to configured porttype:" + e.getMessage(), e);
		}

		return port;
	}
	
	public static void usage(){
		System.out.println(FQPServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  FQPServiceClient client = new FQPServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	










	     public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults processDCQLQuery(gov.nih.nci.cagrid.dcql.DCQLQuery DCQLQuery) throws RemoteException {
               FQPServicePortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

               gov.nih.nci.cagrid.fqp.stubs.ProcessDCQLQueryRequest params = new gov.nih.nci.cagrid.fqp.stubs.ProcessDCQLQueryRequest();
               gov.nih.nci.cagrid.fqp.stubs.ProcessDCQLQueryRequestDCQLQuery DCQLQueryContainer = new gov.nih.nci.cagrid.fqp.stubs.ProcessDCQLQueryRequestDCQLQuery();
               DCQLQueryContainer.setDCQLQuery(DCQLQuery);
               params.setDCQLQuery(DCQLQueryContainer);
               gov.nih.nci.cagrid.fqp.stubs.ProcessDCQLQueryResponse boxedResult = port.processDCQLQuery(params);
               return boxedResult.getCQLQueryResultCollection();

	}


}
