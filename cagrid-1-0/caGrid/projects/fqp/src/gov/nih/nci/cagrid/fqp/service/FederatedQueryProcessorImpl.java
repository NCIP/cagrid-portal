package gov.nih.nci.cagrid.fqp.service;

import gov.nih.nci.cagrid.common.FaultHelper;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.dcql.DCQLQuery;
import gov.nih.nci.cagrid.dcqlresult.DCQLQueryResultsCollection;
import gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer;
import gov.nih.nci.cagrid.fqp.processor.FederatedQueryEngine;
import gov.nih.nci.cagrid.fqp.processor.exceptions.FederatedQueryProcessingException;
import gov.nih.nci.cagrid.fqp.results.service.globus.resource.FQPResultResource;
import gov.nih.nci.cagrid.fqp.results.service.globus.resource.FQPResultResourceHome;
import gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault;
import gov.nih.nci.cagrid.fqp.stubs.types.InternalErrorFault;

import java.rmi.RemoteException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.globus.wsrf.impl.work.WorkManagerImpl;

import commonj.work.Work;
import commonj.work.WorkManager;


/**
 * Federated Query Service server side implementation
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public class FederatedQueryProcessorImpl extends FederatedQueryProcessorImplBase {
    private static final int DEFAULT_POOL_SIZE = 10;

    protected static Log LOG = LogFactory.getLog(FederatedQueryProcessorImpl.class.getName());
    
    private FQPAsynchronousExecutionUtil asynchronousExecutor = null;
    private WorkManager workManager = null;


    public FederatedQueryProcessorImpl() throws RemoteException {
        super();
    }


    public gov.nih.nci.cagrid.dcqlresult.DCQLQueryResultsCollection execute(gov.nih.nci.cagrid.dcql.DCQLQuery query)
        throws RemoteException, gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault {
        FederatedQueryEngine engine = new FederatedQueryEngine();
        DCQLQueryResultsCollection results = null;
        try {
            results = engine.execute(query);
        } catch (FederatedQueryProcessingException e) {
            LOG.error("Problem executing query: " + e.getMessage());
            FederatedQueryProcessingFault fault = new FederatedQueryProcessingFault();
            fault.setFaultString("Problem executing query: " + e.getMessage());
            FaultHelper helper = new FaultHelper(fault);
            helper.addFaultCause(e);
            throw helper.getFault();
        }
        return results;
    }


    public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults executeAndAggregateResults(
        gov.nih.nci.cagrid.dcql.DCQLQuery query) throws RemoteException,
        gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault {
        FederatedQueryEngine engine = new FederatedQueryEngine();
        CQLQueryResults results = null;
        try {
            results = engine.executeAndAggregateResults(query);
        } catch (FederatedQueryProcessingException e) {
            LOG.error("Problem executing query: " + e.getMessage(), e);
            FederatedQueryProcessingFault fault = new FederatedQueryProcessingFault();
            fault.setFaultString("Problem executing query: " + e.getMessage());
            FaultHelper helper = new FaultHelper(fault);
            helper.addFaultCause(e);
            throw helper.getFault();
        }
        return results;
    }
    
    
    public gov.nih.nci.cagrid.fqp.results.stubs.types.FederatedQueryResultsReference executeAsynchronously(
        gov.nih.nci.cagrid.dcql.DCQLQuery query) throws RemoteException {
        // execute the query and return the result context
        return getAsynchronousExecutor().executeAsynchronousQuery(query);
    }


    public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer executeAndEnumerate(
        gov.nih.nci.cagrid.dcql.DCQLQuery query) throws RemoteException,
        gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault {
        // execute the query via the enumeration execution util
        // TODO: can pass the FQP Engine a globus credential (i.e. from CDS)
        FederatedQueryEngine fqpEngine = new FederatedQueryEngine();
        EnumerationResponseContainer response = null;
        try {
            response = FQPEnumerationExecutionUtil.executeAndEnumerate(fqpEngine, query);
        } catch (FederatedQueryProcessingException ex) {
            LOG.error("Problem executing enumeration query: " + ex.getMessage(), ex);
            FederatedQueryProcessingFault fault = new FederatedQueryProcessingFault();
            FaultHelper helper = new FaultHelper(fault);
            helper.addDescription(ex.getMessage());
            helper.addFaultCause(ex);
            throw (FederatedQueryProcessingFault) helper.getFault();
        }
        return response;
    }


    public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference executeAndTransfer(
        gov.nih.nci.cagrid.dcql.DCQLQuery query) throws RemoteException {
        // TODO: Implement this autogenerated method
        throw new RemoteException("Not yet implemented");
    }


    public synchronized WorkManager getWorkManager() {
        if (this.workManager == null) {
            int poolSize = DEFAULT_POOL_SIZE;
            try {
                String poolString = getConfiguration().getThreadPoolSize();
                LOG.debug("ThreadPoolSize property was:" + poolString);
                poolSize = Integer.parseInt(poolString);
            } catch (Exception e) {
                LOG.error("Problem determing pool size, using default(" + poolSize + ").", e);
            }
            this.workManager = new WorkManagerImpl(poolSize);
        }

        return this.workManager;
    }


    public synchronized void setWorkManager(WorkManager workManager) {
        this.workManager = workManager;
    }
    
    
    private synchronized FQPAsynchronousExecutionUtil getAsynchronousExecutor() throws InternalErrorFault {
        if (asynchronousExecutor == null) {
            // get FQP result resource home
            FQPResultResourceHome resultHome = null;
            try {
                resultHome = (FQPResultResourceHome) getFederatedQueryResultsResourceHome();
            } catch (Exception e) {
                LOG.error("Problem locating result home: " + e.getMessage(), e);
                InternalErrorFault fault = new InternalErrorFault();
                fault.setFaultString("Problem locating result home:" + e.getMessage());
                FaultHelper helper = new FaultHelper(fault);
                helper.addFaultCause(e);
                throw (InternalErrorFault) helper.getFault();
            }

            // determine the resource lease time
            int leaseMinutes = -1;
            try {
                String leaseProp = getConfiguration().getInitialResultLeaseInMinutes();
                LOG.debug("Result Lease Minutes property was:" + leaseProp);
                leaseMinutes = Integer.parseInt(leaseProp);
            } catch (Exception e) {
                LOG.error("Problem determing result lease duration, using default");
            }

            // create the executor instance
            if (leaseMinutes == -1) {
                asynchronousExecutor = new FQPAsynchronousExecutionUtil(resultHome, getWorkManager());
            } else {
                asynchronousExecutor = new FQPAsynchronousExecutionUtil(resultHome, getWorkManager());
            }
        }
        return asynchronousExecutor;
    }
}

/**
 * Work implemenation which uses the federated query engine to execute the query
 * and store the results in the provided resource.
 * 
 * TODO: use delegation to execute queries
 * 
 * @author oster
 */
class QueryExecutionWork implements Work {
    FQPResultResource resource;
    DCQLQuery query;


    public QueryExecutionWork(FQPResultResource resource, DCQLQuery query) {
        this.resource = resource;
        this.query = query;
    }


    public void run() {
        FederatedQueryEngine engine = new FederatedQueryEngine();

        try {
            this.resource.setStatusMessage("Processing");
            this.resource.setComplete(false);
            DCQLQueryResultsCollection collection = engine.execute(query);
            this.resource.setResults(collection);
            this.resource.setStatusMessage("Completed");
            this.resource.setComplete(true);
        } catch (Exception e) {
            this.resource.setResults(null);
            this.resource.setComplete(true);
            this.resource.setProcessingException(e);
        }
    }


    public boolean isDaemon() {
        return false;
    }


    public void release() {
        // Do nothing
    }
}
