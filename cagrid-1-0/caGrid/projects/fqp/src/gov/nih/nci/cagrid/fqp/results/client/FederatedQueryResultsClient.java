package gov.nih.nci.cagrid.fqp.results.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.fqp.results.stubs.FederatedQueryResultsPortType;
import gov.nih.nci.cagrid.fqp.results.stubs.service.FederatedQueryResultsServiceAddressingLocator;
import gov.nih.nci.cagrid.fqp.results.common.FederatedQueryResultsI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class FederatedQueryResultsClient extends FederatedQueryResultsClientBase implements FederatedQueryResultsI {	

	public FederatedQueryResultsClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public FederatedQueryResultsClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public FederatedQueryResultsClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public FederatedQueryResultsClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(FederatedQueryResultsClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  FederatedQueryResultsClient client = new FederatedQueryResultsClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.lifetime.DestroyResponse destroy(org.oasis.wsrf.lifetime.Destroy params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"destroy");
    return portType.destroy(params);
    }
  }

  public org.oasis.wsrf.lifetime.SetTerminationTimeResponse setTerminationTime(org.oasis.wsrf.lifetime.SetTerminationTime params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setTerminationTime");
    return portType.setTerminationTime(params);
    }
  }

  public org.oasis.wsn.SubscribeResponse subscribe(org.oasis.wsn.Subscribe params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"subscribe");
    return portType.subscribe(params);
    }
  }

  public gov.nih.nci.cagrid.dcqlresult.DCQLQueryResultsCollection getResults() throws RemoteException, gov.nih.nci.cagrid.fqp.results.stubs.types.ProcessingNotCompleteFault, gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault, gov.nih.nci.cagrid.fqp.results.stubs.types.InternalErrorFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResults");
    gov.nih.nci.cagrid.fqp.results.stubs.GetResultsRequest params = new gov.nih.nci.cagrid.fqp.results.stubs.GetResultsRequest();
    gov.nih.nci.cagrid.fqp.results.stubs.GetResultsResponse boxedResult = portType.getResults(params);
    return boxedResult.getDCQLQueryResultsCollection();
    }
  }

  public boolean isProcessingComplete() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"isProcessingComplete");
    gov.nih.nci.cagrid.fqp.results.stubs.IsProcessingCompleteRequest params = new gov.nih.nci.cagrid.fqp.results.stubs.IsProcessingCompleteRequest();
    gov.nih.nci.cagrid.fqp.results.stubs.IsProcessingCompleteResponse boxedResult = portType.isProcessingComplete(params);
    return boxedResult.isResponse();
    }
  }

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults getAggregateResults() throws RemoteException, gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault, gov.nih.nci.cagrid.fqp.results.stubs.types.ProcessingNotCompleteFault, gov.nih.nci.cagrid.fqp.results.stubs.types.InternalErrorFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAggregateResults");
    gov.nih.nci.cagrid.fqp.results.stubs.GetAggregateResultsRequest params = new gov.nih.nci.cagrid.fqp.results.stubs.GetAggregateResultsRequest();
    gov.nih.nci.cagrid.fqp.results.stubs.GetAggregateResultsResponse boxedResult = portType.getAggregateResults(params);
    return boxedResult.getCQLQueryResultCollection();
    }
  }

  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerate() throws RemoteException, gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault, gov.nih.nci.cagrid.fqp.results.stubs.types.ProcessingNotCompleteFault, gov.nih.nci.cagrid.fqp.results.stubs.types.InternalErrorFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"enumerate");
    gov.nih.nci.cagrid.fqp.results.stubs.EnumerateRequest params = new gov.nih.nci.cagrid.fqp.results.stubs.EnumerateRequest();
    gov.nih.nci.cagrid.fqp.results.stubs.EnumerateResponse boxedResult = portType.enumerate(params);
    return boxedResult.getEnumerationResponseContainer();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference transfer() throws RemoteException, gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault, gov.nih.nci.cagrid.fqp.results.stubs.types.ProcessingNotCompleteFault, gov.nih.nci.cagrid.fqp.results.stubs.types.InternalErrorFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"transfer");
    gov.nih.nci.cagrid.fqp.results.stubs.TransferRequest params = new gov.nih.nci.cagrid.fqp.results.stubs.TransferRequest();
    gov.nih.nci.cagrid.fqp.results.stubs.TransferResponse boxedResult = portType.transfer(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

}
