package gov.nih.nci.cagrid.fqp.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.fqp.stubs.FederatedQueryProcessorPortType;
import gov.nih.nci.cagrid.fqp.stubs.service.FederatedQueryProcessorServiceAddressingLocator;
import gov.nih.nci.cagrid.fqp.common.FederatedQueryProcessorI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class FederatedQueryProcessorClient extends FederatedQueryProcessorClientBase implements FederatedQueryProcessorI {	

	public FederatedQueryProcessorClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public FederatedQueryProcessorClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public FederatedQueryProcessorClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public FederatedQueryProcessorClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(FederatedQueryProcessorClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  FederatedQueryProcessorClient client = new FederatedQueryProcessorClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public gov.nih.nci.cagrid.dcqlresult.DCQLQueryResultsCollection execute(gov.nih.nci.cagrid.dcql.DCQLQuery query) throws RemoteException, gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"execute");
    gov.nih.nci.cagrid.fqp.stubs.ExecuteRequest params = new gov.nih.nci.cagrid.fqp.stubs.ExecuteRequest();
    gov.nih.nci.cagrid.fqp.stubs.ExecuteRequestQuery queryContainer = new gov.nih.nci.cagrid.fqp.stubs.ExecuteRequestQuery();
    queryContainer.setDCQLQuery(query);
    params.setQuery(queryContainer);
    gov.nih.nci.cagrid.fqp.stubs.ExecuteResponse boxedResult = portType.execute(params);
    return boxedResult.getDCQLQueryResultsCollection();
    }
  }

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults executeAndAggregateResults(gov.nih.nci.cagrid.dcql.DCQLQuery query) throws RemoteException, gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"executeAndAggregateResults");
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAndAggregateResultsRequest params = new gov.nih.nci.cagrid.fqp.stubs.ExecuteAndAggregateResultsRequest();
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAndAggregateResultsRequestQuery queryContainer = new gov.nih.nci.cagrid.fqp.stubs.ExecuteAndAggregateResultsRequestQuery();
    queryContainer.setDCQLQuery(query);
    params.setQuery(queryContainer);
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAndAggregateResultsResponse boxedResult = portType.executeAndAggregateResults(params);
    return boxedResult.getCQLQueryResultCollection();
    }
  }

  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer executeAndEnumerate(gov.nih.nci.cagrid.dcql.DCQLQuery query) throws RemoteException, gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"executeAndEnumerate");
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAndEnumerateRequest params = new gov.nih.nci.cagrid.fqp.stubs.ExecuteAndEnumerateRequest();
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAndEnumerateRequestQuery queryContainer = new gov.nih.nci.cagrid.fqp.stubs.ExecuteAndEnumerateRequestQuery();
    queryContainer.setDCQLQuery(query);
    params.setQuery(queryContainer);
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAndEnumerateResponse boxedResult = portType.executeAndEnumerate(params);
    return boxedResult.getEnumerationResponseContainer();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference executeAndTransfer(gov.nih.nci.cagrid.dcql.DCQLQuery query) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"executeAndTransfer");
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAndTransferRequest params = new gov.nih.nci.cagrid.fqp.stubs.ExecuteAndTransferRequest();
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAndTransferRequestQuery queryContainer = new gov.nih.nci.cagrid.fqp.stubs.ExecuteAndTransferRequestQuery();
    queryContainer.setDCQLQuery(query);
    params.setQuery(queryContainer);
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAndTransferResponse boxedResult = portType.executeAndTransfer(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public gov.nih.nci.cagrid.fqp.results.client.FederatedQueryResultsClient executeAsynchronously(gov.nih.nci.cagrid.dcql.DCQLQuery query) throws RemoteException, org.apache.axis.types.URI.MalformedURIException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"executeAsynchronously");
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAsynchronouslyRequest params = new gov.nih.nci.cagrid.fqp.stubs.ExecuteAsynchronouslyRequest();
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAsynchronouslyRequestQuery queryContainer = new gov.nih.nci.cagrid.fqp.stubs.ExecuteAsynchronouslyRequestQuery();
    queryContainer.setDCQLQuery(query);
    params.setQuery(queryContainer);
    gov.nih.nci.cagrid.fqp.stubs.ExecuteAsynchronouslyResponse boxedResult = portType.executeAsynchronously(params);
    EndpointReferenceType ref = boxedResult.getFederatedQueryResultsReference().getEndpointReference();
    return new gov.nih.nci.cagrid.fqp.results.client.FederatedQueryResultsClient(ref);
    }
  }

}
