package gov.nih.nci.cagrid.fqp.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gov.nih.nci.cagrid.dcql.DCQLQuery;
import gov.nih.nci.cagrid.fqp.stubs.FederatedQueryProcessorPortType;
import gov.nih.nci.cagrid.fqp.stubs.service.FederatedQueryProcessorServiceAddressingLocator;
import gov.nih.nci.cagrid.fqp.common.FederatedQueryProcessorI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * On construction the class instance will contact the remote service and
 * retrieve it's security metadata description which it will use to configure
 * the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class FederatedQueryProcessorClient extends ServiceSecurityClient implements FederatedQueryProcessorI {
	protected FederatedQueryProcessorPortType portType;
	private Object portTypeMutex;

	public FederatedQueryProcessorClient(String url) throws MalformedURIException, RemoteException {
		this(url, null);
	}

	public FederatedQueryProcessorClient(String url, GlobusCredential proxy) throws MalformedURIException,
		RemoteException {
		super(url, proxy);
		initialize();
	}

	public FederatedQueryProcessorClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr, null);
	}

	public FederatedQueryProcessorClient(EndpointReferenceType epr, GlobusCredential proxy)
		throws MalformedURIException, RemoteException {
		super(epr, proxy);
		initialize();
	}

	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private FederatedQueryProcessorPortType createPortType() throws RemoteException {

		FederatedQueryProcessorServiceAddressingLocator locator = new FederatedQueryProcessorServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		FederatedQueryProcessorPortType port = null;
		try {
			port = locator.getFederatedQueryProcessorPortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage() {
		System.out.println(FederatedQueryProcessorClient.class.getName() + " -url <service url> -dcql <DCQL file>");
	}

	public static void main(String[] args) {
		System.out.println("Running the Grid Service Client");
		try {
			if (!(args.length < 4)) {
				if (args[0].equals("-url")) {
					FederatedQueryProcessorClient client = new FederatedQueryProcessorClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....

					if (!args[2].equals("-dcql")) {
						usage();
						System.exit(1);
					}

					DCQLQuery dcql = (DCQLQuery) Utils.deserializeDocument(args[3], DCQLQuery.class);
					CQLQueryResults results = client.query(dcql);
					CQLQueryResultsIterator iterator = new CQLQueryResultsIterator(results, true);
					int resultCount = 0;
					while (iterator.hasNext()) {
						System.out.println("=====RESULT [" + resultCount++ + "] =====");
						System.out.println(iterator.next());
						System.out.println("=====END RESULT=====\n\n");
					}

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

    public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");
        gov.nih.nci.cagrid.introduce.security.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.GetServiceSecurityMetadataRequest();
        gov.nih.nci.cagrid.introduce.security.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);
        return boxedResult.getServiceSecurityMetadata();
      }
    }
    public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.dcql.DCQLQuery DCQLQuery) throws RemoteException {
      synchronized(portTypeMutex){
        configureStubSecurity((Stub)portType,"query");
        gov.nih.nci.cagrid.fqp.stubs.QueryRequest params = new gov.nih.nci.cagrid.fqp.stubs.QueryRequest();
        gov.nih.nci.cagrid.fqp.stubs.QueryRequestDCQLQuery DCQLQueryContainer = new gov.nih.nci.cagrid.fqp.stubs.QueryRequestDCQLQuery();
        DCQLQueryContainer.setDCQLQuery(DCQLQuery);
        params.setDCQLQuery(DCQLQueryContainer);
        gov.nih.nci.cagrid.fqp.stubs.QueryResponse boxedResult = portType.query(params);
        return boxedResult.getCQLQueryResultCollection();
      }
    }

}
