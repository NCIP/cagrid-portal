<?xml version="1.0"?>
<!-- ================================================================= -->
<!-- caGrid 1.0 caBIG Introduce Extensions build file                  -->
<!-- ================================================================= -->

<project name="core" default="compile" basedir=".">
	<!-- Environment -->
	<property environment="env" />
	<property file="${basedir}/build.properties" />
	<property file="${user.dir}/build.properties" />
	<property name="globus.dir" location="${env.GLOBUS_LOCATION}" />

	<!-- Information -->
	<property name="project.name" value="caGrid-cabigextensions" />
	<property name="project.version" value="1.0" />

	<property name="src.dir" value="${basedir}/src/java" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="jar.dir" value="${build.dir}/jars" />
	<property name="project.jarfile" value="${jar.dir}/${project.name}-${project.version}.jar" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="ext.lib.dir" value="${basedir}/ext/lib" />
	<property name="ext.test.lib.dir" location="${basedir}/ext/test/lib" />
	<property name="ext.schema.dir" location="${basedir}/ext/xsd" />

	<!-- testing stuff -->
	<property name="test.dir" location="${basedir}/test" />
	<property name="test.src.dir" location="${test.dir}/src/java" />
	<property name="test.classes.dir" location="${classes.dir}/test" />
	<property name="test.lib.dir" location="${test.dir}/lib" />
	<property name="test.logs.dir" location="${test.dir}/logs" />
	<property name="test.project.jar" location="${jar.dir}/${project.name}-tests-${project.version}.jar" />

	<import file="test/test.xml" />

	<!-- extension info -->
	<property name="extensions.dir" location="${basedir}/extensions" />
	<!-- ================================================================================ -->
	<!--                          DEFINE THE EXTENSIONS                                   -->
	<!-- ================================================================================ -->
	<!-- The name should be the path relative from extensions.dir.  Its strongly encouraged you use a flat layout -->
	<property name="extensions.list" value="cagrid_metadata,cagrid_wsEnum" />
	<property name="introduce.extensions.dir" location="../introduce/extensions" />

	<fileset dir="${ext.schema.dir}" id="cagrid_metadata.schema.fileset">
		<include name="**/*.xsd" />
	</fileset>

	<fileset dir="${ext.schema.dir}" id="cagrid_wsEnum.schema.fileset">
		<include name="*.xsd" />
		<include name="*.wsdl" />
	</fileset>
	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${ext.lib.dir}/ant-contrib.jar" />
		</classpath>
	</taskdef>


	<!-- ============================================================== -->
	<!-- Globus properties                                              -->
	<!-- ============================================================== -->
	<target name="checkGlobus" depends="setGlobus">
		<condition property="globus.not.found">
			<or>
				<not>
					<isset property="ext.globus.dir" />
				</not>
				<equals arg1="${ext.globus.dir}" arg2="" />
			</or>
		</condition>
		<fail message="Globus installation is not set in either GLOBUS_LOCATION or ext.globus.dir" if="globus.not.found" />
		<echo message="Globus: ${ext.globus.dir}" />
	</target>
	<target name="setGlobus" if="env.GLOBUS_LOCATION">
		<property name="ext.globus.dir" value="${env.GLOBUS_LOCATION}" />
	</target>

	<!-- =============================================================== -->
	<!-- Define the Classpaths                                           -->
	<!-- =============================================================== -->
	<target name="defineClasspaths" depends="checkGlobus">
		<path id="build.classpath">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${globus.dir}/lib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<path id="run.classpath">
			<pathelement location="${classes.dir}" />
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${globus.dir}/lib">
				<include name="**/*.jar" />
			</fileset>
			<pathelement location="${ext.globus.dir}" />
		</path>

		<path id="test.classpath">
			<pathelement path="${classes.dir}" />
			<pathelement path="${test.dir}/resources" />
			<fileset dir="${test.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${ext.test.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${globus.dir}/lib">
				<include name="**/*.jar" />
			</fileset>
			<pathelement location="${ext.globus.dir}" />
		</path>
	</target>


	<!-- =============================================================== -->
	<!-- Prepares the build directory                                    -->
	<!-- =============================================================== -->
	<target name="prepare">
		<tstamp />
		<mkdir dir="${build.dir}" />
	</target>


	<!-- =============================================================== -->
	<!-- Compiles the source code                                        -->
	<!-- =============================================================== -->
	<target name="compile" depends="prepare" description="compiles.">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}" source="1.3" target="1.1" debug="on" deprecation="off" optimize="off">
			<classpath refid="build.classpath" />
		</javac>
	</target>

	<!-- =============================================================== -->
	<!-- Compiles the test source code                                        -->
	<!-- =============================================================== -->
	<target name="compile-tests" depends="prepare" description="compiles.">
		<mkdir dir="${test.classes.dir}" />
		<javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" source="1.3" target="1.1" debug="on" deprecation="off" optimize="off">
			<classpath refid="test.classpath" />
		</javac>
	</target>


	<!-- ============================================================== -->
	<!-- Cleans up generated stuff                                      -->
	<!-- ============================================================== -->
	<target name="clean" depends="" description="Removes generated files.">
		<delete dir="${build.dir}" />
	</target>


	<!-- ============================================================== -->
	<!-- Creates the jar files                                          -->
	<!-- ============================================================== -->
	<target name="jar" depends="compile" description="Builds the Jar Files">
		<mkdir dir="${jar.dir}" />
		<jar jarfile="${project.jarfile}" basedir="${classes.dir}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main.class}" />
			</manifest>
		</jar>
	</target>

	<!-- ============================================================== -->
	<!-- Creates the test jar files                                     -->
	<!-- ============================================================== -->
	<target name="jar-tests" depends="compile-tests" description="Builds the Jar Files">
		<mkdir dir="${jar.dir}" />
		<jar jarfile="${test.project.jar}" basedir="${test.classes.dir}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
	</target>


	<!-- macrodef for installing an introduce extension -->
	<macrodef name="installExtension">
		<attribute name="extension.name" />
		<sequential>
			<delete dir="${introduce.extensions.dir}/@{extension.name}" />
			<mkdir dir="${introduce.extensions.dir}/@{extension.name}" />

			<!-- extension description file -->
			<copy todir="${introduce.extensions.dir}/@{extension.name}" file="${extensions.dir}/@{extension.name}/extension.xml" />

			<if>
				<isreference refid="@{extension.name}.schema.fileset" />
				<then>
					<echo message="Copying schemas for extension: @{extension.name}." />
					<mkdir dir="${introduce.extensions.dir}/@{extension.name}/schema" />
					<copy todir="${introduce.extensions.dir}/@{extension.name}/schema">
						<fileset refid="@{extension.name}.schema.fileset" />
					</copy>
				</then>
				<else>
					<echo message="Skipping copying of schemas for extension: @{extension.name}." />
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- Build and install extensions for introduce -->
	<target name="installIntroduceExtensions" depends="all" description="Builds and installs the caBIG extensions into Introduce.">

		<!-- copy libraries -->
		<copy todir="${introduce.extensions.dir}/lib">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${jar.dir}">
				<include name="**/*.jar" />
				<exclude name="**/*test*.jar" />
			</fileset>
		</copy>

		<!-- Install each extension-->
		<for list="${extensions.list}" parallel="true" param="extension.name" trim="true">
			<sequential>
				<echo message="Installing Extension @{extension.name}." />
				<installExtension extension.name="@{extension.name}" />
			</sequential>
		</for>
	</target>

	<!-- ============================================================== -->
	<!-- Builds from scratch                                                -->
	<!-- ============================================================== -->
	<target name="all" description="Builds the entire application" depends="jar,jar-tests" />
</project>