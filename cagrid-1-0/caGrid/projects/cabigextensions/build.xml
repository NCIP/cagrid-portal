<?xml version="1.0"?>
<!-- ================================================================= -->
<!-- caGrid 1.0 caBIG Introduce Extensions build file                  -->
<!-- ================================================================= -->

<project name="cabigextensions" default="compile" basedir=".">
    <!-- Environment -->
    <property environment="env" />
    <property file="${basedir}/build.properties" />
    <property file="${user.dir}/build.properties" />
    <property file="${basedir}/ext/resources/cagrid.properties" />
    <property name="globus.dir" location="${env.GLOBUS_LOCATION}" />

    <!-- Information -->
    <property name="project.version" value="${cagrid.master.project.version}" />
    <property name="project.name" value="${cagrid.master.project.name}-${project.version}-${ant.project.name}" />
    <property name="project.jar.prefix" value="${cagrid.master.jar.prefix}${ant.project.name}${cagrid.master.jar.separator}" />

    <property name="src.dir" value="${basedir}/src/java" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="stubs.src" value="${build.dir}/stubs/src" />
    <property name="javadoc.dir" value="${build.dir}/javadoc" />
    <property name="classes.dir" value="${build.dir}/classes" />
    <property name="stubs.classes.dir" value="${build.dir}/stubs/classes" />
    <property name="jar.dir" value="${build.dir}/jars" />
    <property name="project.jarfile" value="${jar.dir}/${project.jar.prefix}core.jar" />
    <property name="stubs.jarfile" value="${jar.dir}/${project.jar.prefix}stubs.jar" />
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="ext.lib.dir" value="${basedir}/ext/lib" />
    <property name="ext.test.lib.dir" location="${basedir}/ext/test/lib" />
    <property name="ext.schema.dir" location="${basedir}/ext/xsd" />
    <property name="mappings.file" location="${basedir}/namespace2package.mappings" />

    <!-- testing stuff -->
    <property name="test.dir" location="${basedir}/test" />
    <property name="test.src.dir" location="${test.dir}/src/java" />
    <property name="test.classes.dir" location="${build.dir}/test_classes" />
    <property name="test.lib.dir" location="${test.dir}/lib" />
    <property name="test.logs.dir" location="${test.dir}/logs" />
    <property name="test.project.jar" location="${jar.dir}/${project.jar.prefix}tests.jar" />

    <import file="test/test.xml" />

    <!-- extension info -->
    <property name="extensions.dir" location="${basedir}/extensions" />
    <!-- ================================================================================ -->
    <!--                          DEFINE THE EXTENSIONS                                   -->
    <!-- ================================================================================ -->
    <!-- The name should be the path relative from extensions.dir.  Its strongly encouraged you use a flat layout -->
    <property name="extensions.list" value="cagrid_metadata,cagrid_wsEnum,domainmodel_viewer,servicemetadata_editor" />
    <property name="introduce.extensions.dir" location="../introduce/extensions" />

    <fileset dir="${ext.schema.dir}" id="cagrid_metadata.schema.fileset">
        <include name="**/*.xsd" />
        <exclude name="*.xsd" />
        <exclude name="*.wsdl" />
    </fileset>

    <fileset dir="${ext.schema.dir}" id="cagrid_wsEnum.schema.fileset">
        <include name="*.xsd" />
        <include name="*.wsdl" />
    	<include name="CaGridEnumeration/**/*.xsd"/>
		<include name="CaGridEnumeration/**/*.wsdl"/>
    </fileset>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ext.lib.dir}/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>


    <!-- ============================================================== -->
    <!-- Globus properties                                              -->
    <!-- ============================================================== -->
    <target name="checkGlobus" depends="setGlobus">
        <condition property="globus.not.found">
            <or>
                <not>
                    <isset property="ext.globus.dir" />
                </not>
                <equals arg1="${ext.globus.dir}" arg2="" />
            </or>
        </condition>
        <fail message="Globus installation is not set in either GLOBUS_LOCATION or ext.globus.dir" if="globus.not.found" />
        <echo message="Globus: ${ext.globus.dir}" />
    </target>

    <target name="setGlobus" if="env.GLOBUS_LOCATION">
        <property name="ext.globus.dir" value="${env.GLOBUS_LOCATION}" />
        <property name="build.stubs" location="${ext.globus.dir}/share/globus_wsrf_tools/build-stubs.xml" />
        <property name="schema.src" location="${ext.globus.dir}/share/schema" />
        <property name="build.packages" location="${ext.globus.dir}/share/globus_wsrf_common/build-packages.xml" />
        <!-- Copied from build.stubs file, as there is no way to "append" to the value in the remote file -->
        <property name="GT4.ns.excludes" value="-x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.wsdl -x http://schemas.xmlsoap.org/ws/2004/04/trust -x http://schemas.xmlsoap.org/ws/2002/12/policy -x http://schemas.xmlsoap.org/ws/2002/07/utility -x http://schemas.xmlsoap.org/ws/2004/04/sc -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd -x http://www.w3.org/2000/09/xmldsig# -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd -x http://schemas.xmlsoap.org/ws/2004/09/enumeration" />
    </target>

    <!-- =============================================================== -->
    <!-- Define the Classpaths                                           -->
    <!-- =============================================================== -->
    <target name="defineClasspaths" depends="checkGlobus">
        <path id="build.classpath">
            <fileset dir="${lib.dir}">
                <include name="**/*.jar" />
            </fileset>
            <fileset dir="${ext.lib.dir}">
                <include name="**/*.jar" />
            </fileset>
            <fileset dir="${globus.dir}/lib">
                <include name="**/*.jar" />
            </fileset>
        </path>

        <path id="run.classpath">
            <pathelement location="${classes.dir}" />
            <fileset dir="${lib.dir}">
                <include name="**/*.jar" />
            </fileset>
            <fileset dir="${ext.lib.dir}">
                <include name="**/*.jar" />
            </fileset>
            <fileset dir="${globus.dir}/lib">
                <include name="**/*.jar" />
            </fileset>
            <pathelement location="${ext.globus.dir}" />
        </path>

        <path id="test.classpath">
            <pathelement path="${classes.dir}" />
            <pathelement path="${test.dir}/resources" />
            <fileset dir="${test.lib.dir}">
                <include name="**/*.jar" />
            </fileset>
            <fileset dir="${ext.test.lib.dir}">
                <include name="**/*.jar" />
            </fileset>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar" />
            </fileset>
            <fileset dir="${ext.lib.dir}">
                <include name="**/*.jar" />
            </fileset>
            <fileset dir="${globus.dir}/lib">
                <include name="**/*.jar" />
            </fileset>
            <pathelement location="${ext.globus.dir}" />
        </path>
    </target>


    <!-- =============================================================== -->
    <!-- Prepares the build directory                                    -->
    <!-- =============================================================== -->
    <target name="prepare" depends="checkGlobus, configure">
        <tstamp />
        <mkdir dir="${build.dir}" />
    </target>

    <target name="configure" description="Configures the project based on settings.">		
        <copy filtering="true" file="${extensions.dir}/cagrid_metadata/extension.xml.template" tofile="${extensions.dir}/cagrid_metadata/extension.xml" overwrite="true">
            <filterset filtersfile="${basedir}/ext/resources/service_urls.properties"/>
        </copy>
    </target>

    <target name="merge" depends="prepare">
        <!-- Merge our namespace mappings file with the GT4 mappins file -->
        <ant antfile="${build.stubs}" target="mergePackageMapping" inheritall="false">
            <property name="mapping.src" location="${mappings.file}" />
            <property name="mapping.dst" location="${build.dir}/namespace2package.mappings" />
        </ant>
    </target>


    <!-- Generate the stub source files -->
    <!-- This is done with a GT4 tool -->
    <target name="serviceStubs" depends="merge">
        <!-- Invoke the stub generator -->
        <ant antfile="${build.stubs}" target="generateStubs" inheritall="false">
            <property name="mapping.file" location="${build.dir}/namespace2package.mappings" />
            <property name="source.stubs.dir" location="${ext.schema.dir}" />
            <property name="target.stubs.dir" location="${stubs.src}" />
            <property name="wsdl.file" value="enumeration.wsdl" />
            <property name="ns.excludes" value="${GT4.ns.excludes} ${introduce.ns.excludes}" />
        </ant>
    </target>


    <!-- =============================================================== -->
    <!-- Compiles the source code                                        -->
    <!-- =============================================================== -->
    <target name="compile" depends="prepare" description="compiles.">
        <mkdir dir="${classes.dir}" />
        <javac srcdir="${src.dir}" destdir="${classes.dir}" source="1.5" debug="on" deprecation="off" optimize="off">
            <classpath refid="build.classpath" />
        </javac>
        <copy toDir="${classes.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>


    <!-- =============================================================== -->
    <!-- Compiles the source code                                        -->
    <!-- =============================================================== -->
    <target name="compileStubs" depends="serviceStubs">
        <mkdir dir="${stubs.classes.dir}" />
        <javac srcdir="${stubs.src}" destdir="${stubs.classes.dir}" source="1.5" debug="on">
            <classpath refid="build.classpath" />
        </javac>
    </target>

    <!-- =============================================================== -->
    <!-- Compiles the test source code                                        -->
    <!-- =============================================================== -->
    <target name="compile-tests" depends="prepare" description="compiles.">
        <mkdir dir="${test.classes.dir}" />
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" source="1.5" debug="on" deprecation="off" optimize="off">
            <classpath refid="test.classpath" />
        </javac>
    </target>


    <!-- ============================================================== -->
    <!-- Cleans up generated stuff                                      -->
    <!-- ============================================================== -->
    <target name="clean" depends="" description="Removes generated files.">
        <delete dir="${build.dir}" />
    </target>


    <!-- ============================================================== -->
    <!-- Creates the jar files                                          -->
    <!-- ============================================================== -->
    <target name="jar" depends="compile" description="Builds the Jar Files">
        <mkdir dir="${jar.dir}" />
        <jar jarfile="${project.jarfile}" basedir="${classes.dir}">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="${main.class}" />
            </manifest>
        </jar>
    </target>


    <!-- ============================================================== -->
    <!-- Creates the stubs jar files                                    -->
    <!-- ============================================================== -->
    <target name="jarStubs" depends="compileStubs" description="Builds the Stubs Jar Files">
        <mkdir dir="${jar.dir}" />
        <jar jarfile="${stubs.jarfile}" basedir="${stubs.classes.dir}">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
            </manifest>
        </jar>
    </target>


    <!-- ============================================================== -->
    <!-- Creates the test jar files                                     -->
    <!-- ============================================================== -->
    <target name="jar-tests" depends="compile-tests" description="Builds the Jar Files">
        <mkdir dir="${jar.dir}" />
        <jar jarfile="${test.project.jar}" basedir="${test.classes.dir}">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
            </manifest>
        </jar>
    </target>


    <!-- macrodef for installing an introduce extension -->
    <macrodef name="installExtension">
        <attribute name="extension.name" />
        <sequential>
            <delete dir="${introduce.extensions.dir}/@{extension.name}" />
            <mkdir dir="${introduce.extensions.dir}/@{extension.name}" />

            <!-- extension description file -->
            <copy todir="${introduce.extensions.dir}/@{extension.name}" file="${extensions.dir}/@{extension.name}/extension.xml" />

            <if>
                <isreference refid="@{extension.name}.schema.fileset" />
                <then>
                    <echo message="Copying schemas for extension: @{extension.name}." />
                    <mkdir dir="${introduce.extensions.dir}/@{extension.name}/schema" />
                    <copy todir="${introduce.extensions.dir}/@{extension.name}/schema">
                        <fileset refid="@{extension.name}.schema.fileset" />
                    </copy>
                </then>
                <else>
                    <echo message="Skipping copying of schemas for extension: @{extension.name}." />
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- Build and install extensions for introduce -->
    <target name="installIntroduceExtensions" description="Installs the caBIG extensions into Introduce (must build first).">

        <!-- copy libraries -->
        <copy todir="${introduce.extensions.dir}/lib">
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
            </fileset>
            <fileset dir="${ext.lib.dir}">
                <include name="*.jar" />
            	<exclude name="${cagrid.master.jar.prefix}*Introduce*.jar"/>
            </fileset>
            <fileset dir="${jar.dir}">
                <include name="**/*.jar" />
                <exclude name="**/*test*.jar" />
            </fileset>
        </copy>

        <!-- Install each extension-->
        <for list="${extensions.list}" parallel="true" param="extension.name" trim="true">
            <sequential>
                <echo message="Installing Extension @{extension.name}." />
                <installExtension extension.name="@{extension.name}" />
            </sequential>
        </for>
    </target>


    <!-- =================================================================== -->
    <!-- Builds Code Docuementation                                          -->
    <!-- =================================================================== -->
    <target name="javadoc" depends="compile" description="Creates the API documentation.">
        <javadoc packagenames="*" destdir="${javadoc.dir}" author="true" version="true" use="true" windowtitle="${project.name} API">
            <sourcepath>
                <pathelement path="${src.dir}" />
            </sourcepath>

            <classpath>
                <path refid="build.classpath" />
            </classpath>

            <tag name="todo" scope="all" description="To do:" />
            <tag name="created" scope="all" description="Created On:" />
        </javadoc>
    </target>

    <!-- ============================================================== -->
    <!-- Builds from scratch                                                -->
    <!-- ============================================================== -->
    <target name="all" description="Builds the entire application" depends="jarStubs, jar, jar-tests" />
</project>