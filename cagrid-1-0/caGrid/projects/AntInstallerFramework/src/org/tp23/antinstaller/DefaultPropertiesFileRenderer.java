/* 
 * Copyright 2005 Paul Hinds
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.tp23.antinstaller;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Iterator;
import java.util.Properties;

import org.tp23.antinstaller.input.InputField;
import org.tp23.antinstaller.input.OutputField;
import org.tp23.antinstaller.input.SecretPropertyField;
import org.tp23.antinstaller.page.Page;



/**
 *
 * <p>Outputs the completed Pages as a java Properties file. </p>
 * @author Paul Hinds
 * @version $Id: DefaultPropertiesFileRenderer.java,v 1.1 2006-08-19 15:35:36 kumarvi Exp $
 */
public class DefaultPropertiesFileRenderer
	implements PropertiesFileRenderer {

	public DefaultPropertiesFileRenderer() {
	}

	public void renderProperties(Installer installer, File baseDir){
		Page[] completedPages = installer.getPages();
		Properties props = new Properties();
		props.put(FILE_ROOT_PROPERTY,baseDir.getAbsolutePath());
		
		for (int i = 0; i < completedPages.length; i++) {
			OutputField[] fields = completedPages[i].getOutputField();

			for (int f = 0; f < fields.length; f++) {
				if (fields[f] instanceof SecretPropertyField) {
					InputField field = (InputField)fields[f];
					props.put(field.getProperty(), "XXXXXXXX");
				}
				else if (fields[f] instanceof InputField) {
					InputField field = (InputField)fields[f];
					String result = field.getInputResult();
					props.put(field.getProperty(), result);
				}
			}
		}
		 this.storeCustomProperties(props);
		try {
			File antInstallProperties = new File(baseDir.getAbsolutePath(), PROPERTIES_FILE_NAME);
			props.store(new FileOutputStream(antInstallProperties),
						"Ant Installer - AutoGenerated properties");
		}
		catch (Throwable ex) {
			//swallow Exceptions as in contract for this method
		}
	}
	
	private void storeCustomProperties(Properties props){
		/**
		 * First check if the custom property file is there
		 */
		String fileName = InstallerContext.getCustomPropertyFileName();
		if(fileName.equalsIgnoreCase(InstallerContext.DOES_NOT_EXIST)){
			return;
		}
		Properties toBeStoredProperties = new Properties();
		Properties customProperties = InstallerContext.getCustomProperties();
		System.out.println("Size before storing:"+customProperties.keySet().size());
		Iterator iter = customProperties.keySet().iterator();
		while (iter.hasNext()) {
			Object key = (Object)iter.next();
			String keyName = this.getCustomKey((String)key);
			if(props.keySet().contains(keyName)){
				String value = props.getProperty(keyName);
				toBeStoredProperties.put(keyName, value);
			}else{
				toBeStoredProperties.put(keyName, customProperties.getProperty((String)key));
			}
			
		}
		
		try {
			File customPropertiesFile = new File(System.getProperty("user.home"), fileName);
			toBeStoredProperties.store(new FileOutputStream(customPropertiesFile),"caGrid Installer - AutoGenerated properties");
		}
		catch (Throwable ex) {
			//swallow Exceptions as in contract for this method
		}
	}
	
	private String getCustomKey(String key){
		String str = key;
		if(key.startsWith(InstallerContext.CUSTOM_PREFIX)){
			str = key.substring(7);
		}
		return str;
	}

}
