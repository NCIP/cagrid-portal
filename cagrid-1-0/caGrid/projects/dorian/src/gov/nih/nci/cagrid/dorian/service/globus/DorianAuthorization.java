package gov.nih.nci.cagrid.dorian.service.globus;


import java.rmi.RemoteException;

/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class will have a authorize<methodName> method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either simple return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version 1.0
 * 
 */
public class DorianAuthorization{
	
	
	public DorianAuthorization() {
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
	
					
	public static void authorizeRegisterWithIdP() throws RemoteException {
		
		
	}
					
	public static void authorizeFindIdPUsers() throws RemoteException {
		
		
	}
					
	public static void authorizeUpdateIdPUser() throws RemoteException {
		
		
	}
					
	public static void authorizeRemoveIdPUser() throws RemoteException {
		
		
	}
					
	public static void authorizeAuthenticateWithIdP() throws RemoteException {
		
		
	}
					
	public static void authorizeCreateProxy() throws RemoteException {
		
		
	}
					
	public static void authorizeGetCACertificate() throws RemoteException {
		
		
	}
					
	public static void authorizeGetTrustedIdPs() throws RemoteException {
		
		
	}
					
	public static void authorizeAddTrustedIdP() throws RemoteException {
		
		
	}
					
	public static void authorizeUpdateTrustedIdP() throws RemoteException {
		
		
	}
					
	public static void authorizeRemoveTrustedIdP() throws RemoteException {
		
		
	}
					
	public static void authorizeFindIFSUsers() throws RemoteException {
		
		
	}
					
	public static void authorizeUpdateIFSUser() throws RemoteException {
		
		
	}
					
	public static void authorizeRemoveIFSUser() throws RemoteException {
		
		
	}
					
	public static void authorizeRenewIFSUserCredentials() throws RemoteException {
		
		
	}
					
	public static void authorizeGetIFSUserPolicies() throws RemoteException {
		
		
	}
					
	public static void authorizeAuthenticate() throws RemoteException {
		
		
	}
					
	public static void authorizeAddAdmin() throws RemoteException {
		
		
	}
					
	public static void authorizeRemoveAdmin() throws RemoteException {
		
		
	}
					
	public static void authorizeGetAdmins() throws RemoteException {
		
		
	}
					
	public static void authorizeRequestHostCertificate() throws RemoteException {
		
		
	}
					
	public static void authorizeGetOwnedHostCertificates() throws RemoteException {
		
		
	}
					
	public static void authorizeApproveHostCertificate() throws RemoteException {
		
		
	}
					
	public static void authorizeFindHostCertificates() throws RemoteException {
		
		
	}
					
	public static void authorizeUpdateHostCertificateRecord() throws RemoteException {
		
		
	}
					
	public static void authorizeRenewHostCertificate() throws RemoteException {
		
		
	}
	
	
}
