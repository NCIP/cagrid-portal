package gov.nih.nci.cagrid.dorian.client;

import gov.nih.nci.cagrid.dorian.common.DorianI;
import gov.nih.nci.cagrid.dorian.stubs.DorianPortType;
import gov.nih.nci.cagrid.dorian.stubs.service.DorianServiceAddressingLocator;

import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;
import org.globus.gsi.GlobusCredential;


/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class DorianClient implements DorianI {
	private GlobusCredential proxy;
	private EndpointReferenceType epr;

	static {
		org.globus.axis.util.Util.registerTransport();
	}


	public DorianClient(String url) throws MalformedURIException {
		this(url, null);
	}


	public DorianClient(String url, GlobusCredential proxy) throws MalformedURIException {
		this.proxy = proxy;
		this.epr = new EndpointReferenceType();
		this.epr.setAddress(new Address(url));
	}


	public DorianClient(EndpointReferenceType epr) throws MalformedURIException {
		this(epr, null);
	}


	public DorianClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException {
		this.proxy = proxy;
		this.epr = epr;
	}


	private DorianPortType getPortType() throws RemoteException {

		DorianServiceAddressingLocator locator = new DorianServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		DorianPortType port = null;
		try {
			port = locator.getDorianPortTypePort(this.epr);
		} catch (Exception e) {
			throw new RemoteException("Unable to configured porttype:" + e.getMessage(), e);
		}

		return port;
	}


	public static void usage() {
		System.out.println(DorianClient.class.getName() + " -url <service url>");
	}


	public static void main(String[] args) {
		System.out.println("Running the Grid Service Client");
		try {
			if (!(args.length < 2)) {
				if (args[0].equals("-url")) {
					DorianClient client = new DorianClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

















































































































































































































































































































































































































































































































































	     public java.lang.String registerWithIdP(gov.nih.nci.cagrid.dorian.idp.bean.Application application) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.InvalidUserPropertyFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS,Boolean.TRUE);
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.RegisterWithIdPRequest params = new gov.nih.nci.cagrid.dorian.stubs.RegisterWithIdPRequest();
               gov.nih.nci.cagrid.dorian.stubs.RegisterWithIdPRequestApplication applicationContainer = new gov.nih.nci.cagrid.dorian.stubs.RegisterWithIdPRequestApplication();
               applicationContainer.setApplication(application);
               params.setApplication(applicationContainer);
               gov.nih.nci.cagrid.dorian.stubs.RegisterWithIdPResponse boxedResult = port.registerWithIdP(params);
               return boxedResult.getResponse();

	}


	     public gov.nih.nci.cagrid.dorian.idp.bean.IdPUser[] findIdPUsers(gov.nih.nci.cagrid.dorian.idp.bean.IdPUserFilter filter) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.FindIdPUsersRequest params = new gov.nih.nci.cagrid.dorian.stubs.FindIdPUsersRequest();
               gov.nih.nci.cagrid.dorian.stubs.FindIdPUsersRequestFilter filterContainer = new gov.nih.nci.cagrid.dorian.stubs.FindIdPUsersRequestFilter();
               filterContainer.setIdPUserFilter(filter);
               params.setFilter(filterContainer);
               gov.nih.nci.cagrid.dorian.stubs.FindIdPUsersResponse boxedResult = port.findIdPUsers(params);
               return boxedResult.getIdPUser();

	}


	     public void updateIdPUser(gov.nih.nci.cagrid.dorian.idp.bean.IdPUser user) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.NoSuchUserFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.UpdateIdPUserRequest params = new gov.nih.nci.cagrid.dorian.stubs.UpdateIdPUserRequest();
               gov.nih.nci.cagrid.dorian.stubs.UpdateIdPUserRequestUser userContainer = new gov.nih.nci.cagrid.dorian.stubs.UpdateIdPUserRequestUser();
               userContainer.setIdPUser(user);
               params.setUser(userContainer);
               gov.nih.nci.cagrid.dorian.stubs.UpdateIdPUserResponse boxedResult = port.updateIdPUser(params);
               
	}


	     public void removeIdPUser(java.lang.String userId) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.RemoveIdPUserRequest params = new gov.nih.nci.cagrid.dorian.stubs.RemoveIdPUserRequest();
               params.setUserId(userId);
               gov.nih.nci.cagrid.dorian.stubs.RemoveIdPUserResponse boxedResult = port.removeIdPUser(params);
               
	}


	     public gov.nih.nci.cagrid.dorian.bean.SAMLAssertion authenticateWithIdP(gov.nih.nci.cagrid.dorian.idp.bean.BasicAuthCredential cred) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS,Boolean.TRUE);
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.AuthenticateWithIdPRequest params = new gov.nih.nci.cagrid.dorian.stubs.AuthenticateWithIdPRequest();
               gov.nih.nci.cagrid.dorian.stubs.AuthenticateWithIdPRequestCred credContainer = new gov.nih.nci.cagrid.dorian.stubs.AuthenticateWithIdPRequestCred();
               credContainer.setBasicAuthCredential(cred);
               params.setCred(credContainer);
               gov.nih.nci.cagrid.dorian.stubs.AuthenticateWithIdPResponse boxedResult = port.authenticateWithIdP(params);
               return boxedResult.getSAMLAssertion();

	}


	     public gov.nih.nci.cagrid.dorian.bean.X509Certificate[] createProxy(gov.nih.nci.cagrid.dorian.bean.SAMLAssertion saml,gov.nih.nci.cagrid.dorian.ifs.bean.PublicKey publicKey,gov.nih.nci.cagrid.dorian.ifs.bean.ProxyLifetime lifetime) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.InvalidAssertionFault, gov.nih.nci.cagrid.dorian.stubs.InvalidProxyFault, gov.nih.nci.cagrid.dorian.stubs.UserPolicyFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS,Boolean.TRUE);
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.CreateProxyRequest params = new gov.nih.nci.cagrid.dorian.stubs.CreateProxyRequest();
               gov.nih.nci.cagrid.dorian.stubs.CreateProxyRequestSaml samlContainer = new gov.nih.nci.cagrid.dorian.stubs.CreateProxyRequestSaml();
               samlContainer.setSAMLAssertion(saml);
               params.setSaml(samlContainer);
               gov.nih.nci.cagrid.dorian.stubs.CreateProxyRequestPublicKey publicKeyContainer = new gov.nih.nci.cagrid.dorian.stubs.CreateProxyRequestPublicKey();
               publicKeyContainer.setPublicKey(publicKey);
               params.setPublicKey(publicKeyContainer);
               gov.nih.nci.cagrid.dorian.stubs.CreateProxyRequestLifetime lifetimeContainer = new gov.nih.nci.cagrid.dorian.stubs.CreateProxyRequestLifetime();
               lifetimeContainer.setProxyLifetime(lifetime);
               params.setLifetime(lifetimeContainer);
               gov.nih.nci.cagrid.dorian.stubs.CreateProxyResponse boxedResult = port.createProxy(params);
               return boxedResult.getX509Certificate();

	}


	     public gov.nih.nci.cagrid.dorian.bean.X509Certificate getCACertificate() throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	stub._setProperty(org.globus.wsrf.security.Constants.GSI_ANONYMOUS,Boolean.TRUE);
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.GetCACertificateRequest params = new gov.nih.nci.cagrid.dorian.stubs.GetCACertificateRequest();
               gov.nih.nci.cagrid.dorian.stubs.GetCACertificateResponse boxedResult = port.getCACertificate(params);
               return boxedResult.getX509Certificate();

	}


	     public gov.nih.nci.cagrid.dorian.ifs.bean.TrustedIdP[] getTrustedIdPs() throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.GetTrustedIdPsRequest params = new gov.nih.nci.cagrid.dorian.stubs.GetTrustedIdPsRequest();
               gov.nih.nci.cagrid.dorian.stubs.GetTrustedIdPsResponse boxedResult = port.getTrustedIdPs(params);
               return boxedResult.getTrustedIdP();

	}


	     public gov.nih.nci.cagrid.dorian.ifs.bean.TrustedIdP addTrustedIdP(gov.nih.nci.cagrid.dorian.ifs.bean.TrustedIdP idp) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.InvalidTrustedIdPFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.AddTrustedIdPRequest params = new gov.nih.nci.cagrid.dorian.stubs.AddTrustedIdPRequest();
               gov.nih.nci.cagrid.dorian.stubs.AddTrustedIdPRequestIdp idpContainer = new gov.nih.nci.cagrid.dorian.stubs.AddTrustedIdPRequestIdp();
               idpContainer.setTrustedIdP(idp);
               params.setIdp(idpContainer);
               gov.nih.nci.cagrid.dorian.stubs.AddTrustedIdPResponse boxedResult = port.addTrustedIdP(params);
               return boxedResult.getTrustedIdP();

	}


	     public void updateTrustedIdP(gov.nih.nci.cagrid.dorian.ifs.bean.TrustedIdP trustedIdP) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.InvalidTrustedIdPFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.UpdateTrustedIdPRequest params = new gov.nih.nci.cagrid.dorian.stubs.UpdateTrustedIdPRequest();
               gov.nih.nci.cagrid.dorian.stubs.UpdateTrustedIdPRequestTrustedIdP trustedIdPContainer = new gov.nih.nci.cagrid.dorian.stubs.UpdateTrustedIdPRequestTrustedIdP();
               trustedIdPContainer.setTrustedIdP(trustedIdP);
               params.setTrustedIdP(trustedIdPContainer);
               gov.nih.nci.cagrid.dorian.stubs.UpdateTrustedIdPResponse boxedResult = port.updateTrustedIdP(params);
               
	}


	     public void removeTrustedIdP(gov.nih.nci.cagrid.dorian.ifs.bean.TrustedIdP trustedIdP) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.InvalidTrustedIdPFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.RemoveTrustedIdPRequest params = new gov.nih.nci.cagrid.dorian.stubs.RemoveTrustedIdPRequest();
               gov.nih.nci.cagrid.dorian.stubs.RemoveTrustedIdPRequestTrustedIdP trustedIdPContainer = new gov.nih.nci.cagrid.dorian.stubs.RemoveTrustedIdPRequestTrustedIdP();
               trustedIdPContainer.setTrustedIdP(trustedIdP);
               params.setTrustedIdP(trustedIdPContainer);
               gov.nih.nci.cagrid.dorian.stubs.RemoveTrustedIdPResponse boxedResult = port.removeTrustedIdP(params);
               
	}


	     public gov.nih.nci.cagrid.dorian.ifs.bean.IFSUser[] findIFSUsers(gov.nih.nci.cagrid.dorian.ifs.bean.IFSUserFilter filter) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.FindIFSUsersRequest params = new gov.nih.nci.cagrid.dorian.stubs.FindIFSUsersRequest();
               gov.nih.nci.cagrid.dorian.stubs.FindIFSUsersRequestFilter filterContainer = new gov.nih.nci.cagrid.dorian.stubs.FindIFSUsersRequestFilter();
               filterContainer.setIFSUserFilter(filter);
               params.setFilter(filterContainer);
               gov.nih.nci.cagrid.dorian.stubs.FindIFSUsersResponse boxedResult = port.findIFSUsers(params);
               return boxedResult.getIFSUser();

	}


	     public void updateIFSUser(gov.nih.nci.cagrid.dorian.ifs.bean.IFSUser user) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.InvalidUserFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.UpdateIFSUserRequest params = new gov.nih.nci.cagrid.dorian.stubs.UpdateIFSUserRequest();
               gov.nih.nci.cagrid.dorian.stubs.UpdateIFSUserRequestUser userContainer = new gov.nih.nci.cagrid.dorian.stubs.UpdateIFSUserRequestUser();
               userContainer.setIFSUser(user);
               params.setUser(userContainer);
               gov.nih.nci.cagrid.dorian.stubs.UpdateIFSUserResponse boxedResult = port.updateIFSUser(params);
               
	}


	     public void removeIFSUser(gov.nih.nci.cagrid.dorian.ifs.bean.IFSUser user) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.InvalidUserFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.RemoveIFSUserRequest params = new gov.nih.nci.cagrid.dorian.stubs.RemoveIFSUserRequest();
               gov.nih.nci.cagrid.dorian.stubs.RemoveIFSUserRequestUser userContainer = new gov.nih.nci.cagrid.dorian.stubs.RemoveIFSUserRequestUser();
               userContainer.setIFSUser(user);
               params.setUser(userContainer);
               gov.nih.nci.cagrid.dorian.stubs.RemoveIFSUserResponse boxedResult = port.removeIFSUser(params);
               
	}


	     public gov.nih.nci.cagrid.dorian.ifs.bean.IFSUser renewIFSUserCredentials(gov.nih.nci.cagrid.dorian.ifs.bean.IFSUser user) throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.InvalidUserFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.RenewIFSUserCredentialsRequest params = new gov.nih.nci.cagrid.dorian.stubs.RenewIFSUserCredentialsRequest();
               gov.nih.nci.cagrid.dorian.stubs.RenewIFSUserCredentialsRequestUser userContainer = new gov.nih.nci.cagrid.dorian.stubs.RenewIFSUserCredentialsRequestUser();
               userContainer.setIFSUser(user);
               params.setUser(userContainer);
               gov.nih.nci.cagrid.dorian.stubs.RenewIFSUserCredentialsResponse boxedResult = port.renewIFSUserCredentials(params);
               return boxedResult.getIFSUser();

	}


	     public gov.nih.nci.cagrid.dorian.ifs.bean.IFSUserPolicy[] getIFSUserPolicies() throws RemoteException, gov.nih.nci.cagrid.dorian.stubs.DorianInternalFault, gov.nih.nci.cagrid.dorian.stubs.PermissionDeniedFault {
               DorianPortType port = this.getPortType();
               org.apache.axis.client.Stub stub = (org.apache.axis.client.Stub) port;

stub._setProperty(org.globus.wsrf.security.Constants.GSI_TRANSPORT, org.globus.wsrf.security.Constants.ENCRYPTION);
	if (proxy != null) {
try{
		org.ietf.jgss.GSSCredential gss = new org.globus.gsi.gssapi.GlobusGSSCredentialImpl(proxy,org.ietf.jgss.GSSCredential.INITIATE_AND_ACCEPT);
		stub._setProperty(org.globus.axis.gsi.GSIConstants.GSI_CREDENTIALS, gss);
}catch(org.ietf.jgss.GSSException ex){
throw new RemoteException(ex.getMessage());
}
}
stub._setProperty(org.globus.wsrf.security.Constants.AUTHORIZATION, org.globus.wsrf.impl.security.authorization.NoAuthorization.getInstance());
               gov.nih.nci.cagrid.dorian.stubs.GetIFSUserPoliciesRequest params = new gov.nih.nci.cagrid.dorian.stubs.GetIFSUserPoliciesRequest();
               gov.nih.nci.cagrid.dorian.stubs.GetIFSUserPoliciesResponse boxedResult = port.getIFSUserPolicies(params);
               return boxedResult.getIFSUserPolicy();

	}


}
