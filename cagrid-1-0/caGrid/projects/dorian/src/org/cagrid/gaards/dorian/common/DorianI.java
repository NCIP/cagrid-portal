package org.cagrid.gaards.dorian.common;

import java.rmi.RemoteException;

/**
 * Dorian Grid Service
 *
 * This class is autogenerated, DO NOT EDIT.
 * 
 * @created by Introduce Toolkit version 1.0
 * 
 */
public interface DorianI {

    public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException ;

  /**
   * Submits an application for an account with a the Dorian Identity Provider.
   *
   * @param application
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws InvalidUserPropertyFault
   *	Invalid application submitted.
   */
  public java.lang.String registerWithIdP(org.cagrid.gaards.dorian.idp.Application application) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidUserPropertyFault ;

  /**
   * Obtain a list of users accounts within the Dorian IdP, meeting a specified search criteria.
   *
   * @param filter
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public org.cagrid.gaards.dorian.idp.IdPUser[] findIdPUsers(org.cagrid.gaards.dorian.idp.IdPUserFilter filter) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Update the account information for a Dorian IdP user.
   *
   * @param user
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws NoSuchUserFault
   *	The user specified does not exist.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public void updateIdPUser(org.cagrid.gaards.dorian.idp.IdPUser user) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.NoSuchUserFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Remove an IdP user account.
   *
   * @param userId
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public void removeIdPUser(java.lang.String userId) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Authenticate with the Dorian IdP.
   *
   * @param cred
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public org.cagrid.gaards.dorian.SAMLAssertion authenticateWithIdP(org.cagrid.gaards.dorian.idp.BasicAuthCredential cred) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Create a proxy certificate.
   *
   * @param saml
   * @param publicKey
   * @param lifetime
   * @param delegation
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws InvalidAssertionFault
   *	Invalid SAML Assertions provided.
   * @throws InvalidProxyFault
   *	Invalid proxy error.
   * @throws UserPolicyFault
   *	The IdP's user policy reported an error.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public org.cagrid.gaards.dorian.X509Certificate[] createProxy(org.cagrid.gaards.dorian.SAMLAssertion saml,org.cagrid.gaards.dorian.federation.PublicKey publicKey,org.cagrid.gaards.dorian.federation.ProxyLifetime lifetime,org.cagrid.gaards.dorian.federation.DelegationPathLength delegation) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidAssertionFault, org.cagrid.gaards.dorian.stubs.types.InvalidProxyFault, org.cagrid.gaards.dorian.stubs.types.UserPolicyFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Obtains the Dorian CA certificate.
   *
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   */
  public org.cagrid.gaards.dorian.X509Certificate getCACertificate() throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault ;

  /**
   * Gets a list of the IdPs trusted by Dorian.
   *
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public org.cagrid.gaards.dorian.federation.TrustedIdP[] getTrustedIdPs() throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Add a Trusted Identity Provider to Dorian.
   *
   * @param idp
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws InvalidTrustedIdPFault
   *	Invalid Trusted Identity Provider specified.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public org.cagrid.gaards.dorian.federation.TrustedIdP addTrustedIdP(org.cagrid.gaards.dorian.federation.TrustedIdP idp) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidTrustedIdPFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Update the information for a Trusted IdP.
   *
   * @param trustedIdP
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws InvalidTrustedIdPFault
   *	Invalid Trusted Identity Provider specified.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public void updateTrustedIdP(org.cagrid.gaards.dorian.federation.TrustedIdP trustedIdP) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidTrustedIdPFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Remove a TrustedIdP.
   *
   * @param trustedIdP
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws InvalidTrustedIdPFault
   *	Invalid Trusted Identity Provider specified.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public void removeTrustedIdP(org.cagrid.gaards.dorian.federation.TrustedIdP trustedIdP) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidTrustedIdPFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Obtain a list of grid users accounts within the Dorian, meeting a specified search criteria.
   *
   * @param filter
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public org.cagrid.gaards.dorian.federation.IFSUser[] findIFSUsers(org.cagrid.gaards.dorian.federation.IFSUserFilter filter) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  public void updateIFSUser(org.cagrid.gaards.dorian.federation.IFSUser user) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidUserFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Removes a grid user account.
   *
   * @param user
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws InvalidUserFault
   *	Invalid user specified.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public void removeIFSUser(org.cagrid.gaards.dorian.federation.IFSUser user) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidUserFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Renews a grid user's long term credentials.
   *
   * @param user
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws InvalidUserFault
   *	Invalid user specified.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public org.cagrid.gaards.dorian.federation.IFSUser renewIFSUserCredentials(org.cagrid.gaards.dorian.federation.IFSUser user) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidUserFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Get a list of the Trusted IdP user policies supported by Dorian.
   *
   * @throws DorianInternalFault
   *	An unexpected internal Dorian error.
   * @throws PermissionDeniedFault
   *	Client does not have permission to perform the request.
   */
  public org.cagrid.gaards.dorian.federation.IFSUserPolicy[] getIFSUserPolicies() throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * Authentication Service interface for authenticating with the Dorian IdP.
   *
   * @param credential
   * @throws InvalidCredentialFault
   *	An unexpected internal Dorian error.
   * @throws InsufficientAttributeFault
   *	The DorianIdP could obtain the attributes needed to issue a valid SAML assertion.
   * @throws AuthenticationProviderFault
   *	An error occurred in authenticating.
   */
  public gov.nih.nci.cagrid.authentication.bean.SAMLAssertion authenticate(gov.nih.nci.cagrid.authentication.bean.Credential credential) throws RemoteException, gov.nih.nci.cagrid.authentication.stubs.types.InvalidCredentialFault, gov.nih.nci.cagrid.authentication.stubs.types.InsufficientAttributeFault, gov.nih.nci.cagrid.authentication.stubs.types.AuthenticationProviderFault ;

  /**
   * Authentication Service interface for authenticating with the Dorian IdP.
   *
   * @param credential
   * @throws AuthenticationProviderFault
   *	
   * @throws CredentialNotSupportedFault
   *	
   * @throws InsufficientAttributeFault
   *	
   * @throws InvalidCredentialFault
   *	
   */
  public gov.nih.nci.cagrid.opensaml.SAMLAssertion authenticateUser(org.cagrid.gaards.authentication.Credential credential) throws RemoteException, org.cagrid.gaards.authentication.faults.AuthenticationProviderFault, org.cagrid.gaards.authentication.faults.CredentialNotSupportedFault, org.cagrid.gaards.authentication.faults.InsufficientAttributeFault, org.cagrid.gaards.authentication.faults.InvalidCredentialFault ;

  public void addAdmin(java.lang.String gridIdentity) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  public void removeAdmin(java.lang.String gridIdentity) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  public java.lang.String[] getAdmins() throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  public org.cagrid.gaards.dorian.federation.HostCertificateRecord requestHostCertificate(org.cagrid.gaards.dorian.federation.HostCertificateRequest req) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidHostCertificateRequestFault, org.cagrid.gaards.dorian.stubs.types.InvalidHostCertificateFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  public org.cagrid.gaards.dorian.federation.HostCertificateRecord[] getOwnedHostCertificates() throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  public org.cagrid.gaards.dorian.federation.HostCertificateRecord approveHostCertificate(java.math.BigInteger recordId) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidHostCertificateFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  public org.cagrid.gaards.dorian.federation.HostCertificateRecord[] findHostCertificates(org.cagrid.gaards.dorian.federation.HostCertificateFilter hostCertificateFilter) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  public void updateHostCertificateRecord(org.cagrid.gaards.dorian.federation.HostCertificateUpdate hostCertificateUpdate) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidHostCertificateFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  public org.cagrid.gaards.dorian.federation.HostCertificateRecord renewHostCertificate(java.math.BigInteger recordId) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.InvalidHostCertificateFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault ;

  /**
   * This method allows a user with a Dorian IdP account to change their password.
   *
   * @param credential
   * @param newPassword
   * @throws DorianInternalFault
   *	
   * @throws PermissionDeniedFault
   *	
   * @throws InvalidUserPropertyFault
   *	
   */
  public void changeIdPUserPassword(org.cagrid.gaards.dorian.idp.BasicAuthCredential credential,java.lang.String newPassword) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault, org.cagrid.gaards.dorian.stubs.types.PermissionDeniedFault, org.cagrid.gaards.dorian.stubs.types.InvalidUserPropertyFault ;

  /**
   * This method determines whether or not a IdP user exists.
   *
   * @param userId
   * @throws DorianInternalFault
   *	
   */
  public boolean doesIdPUserExist(java.lang.String userId) throws RemoteException, org.cagrid.gaards.dorian.stubs.types.DorianInternalFault ;

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException ;

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException ;

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException ;

}

