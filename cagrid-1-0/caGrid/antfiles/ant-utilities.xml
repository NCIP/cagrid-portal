<!-- ======================================================================= -->
<!-- caGrid Utilities build file                                             -->
<!-- ======================================================================= -->
<project name="caGrid_utilities" basedir="." default="usage">
	
	<property name="dart.props" location="${test.dir}/conf/dart.properties"/>
    
    <!-- Allows you define a new property with a value of ${${a}.${b}} which can't be done by the Property task alone.  -->
    <macrodef name="compose-property">
        <attribute name="name" />
        <attribute name="stem" />
        <attribute name="selector" />
        <sequential>
            <property name="@{name}" value="${@{stem}.@{selector}}" />
        </sequential>
    </macrodef>

    <macrodef name="make-relative-path-property">
        <attribute name="os" />
        <attribute name="relativeroot" default="${basedir}" />
        <attribute name="pathreplacement" />
        <attribute name="fullpath" />
        <attribute name="property" />
        <sequential>
            <pathconvert targetos="@{os}" property="@{property}">
                <path>
                    <pathelement path="@{fullpath}" />
                </path>
                <map from="@{relativeroot}" to="@{pathreplacement}" />
            </pathconvert>
            <echo message="Converted @{fullpath} to ${@{property}}" />
        </sequential>
    </macrodef>
    <macrodef name="load-filters">
        <attribute name="os" />
        <attribute name="fileseparator" />
        <attribute name="pathseparator" />
        <attribute name="attributemarker" />
        <attribute name="scriptsuffix" />

        <attribute name="logdir" default="${log.dir}" />
        <attribute name="libdir" default="${lib.dir}" />
        <attribute name="serverclasspath" />
        <attribute name="clientclasspath" />
        <attribute name="relativeroot" default="${basedir}" />
        <attribute name="pathreplacement" default="..${file.separator}.." />

        <sequential>
            <!-- until ant lets us have scoped properties, i need to fake some uniqueness
            of these properties so i can make filters from them 
            I'm assuming this triple is unique (@{os}-@{relativeroot}-@{pathreplacement}), if its not for you, you will have problems
            on successive calls to this macro-->
            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.client.classpath.relative"
                                         fullpath="@{clientclasspath}"
                                         pathreplacement="@{pathreplacement}" />

            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.server.classpath.relative"
                                         fullpath="@{serverclasspath}"
                                         pathreplacement="@{pathreplacement}" />

            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.lib.dir.relative"
                                         fullpath="@{libdir}"
                                         pathreplacement="@{pathreplacement}" />

            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.log.dir.relative"
                                         fullpath="@{logdir}"
                                         pathreplacement="@{pathreplacement}" />

            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.common.dir.relative"
                                         fullpath="@{relativeroot}"
                                         pathreplacement="@{pathreplacement}" />

            <filter token="path.separator" value="@{pathseparator}" />
            <filter token="file.separator" value="@{fileseparator}" />
            <filter token="client.classpath"
                    value="${@{os}-@{relativeroot}-@{pathreplacement}.client.classpath.relative}" />
            <filter token="server.classpath"
                    value="${@{os}-@{relativeroot}-@{pathreplacement}.server.classpath.relative}" />
            <filter token="lib.dir"
                    value="${@{os}-@{relativeroot}-@{pathreplacement}.lib.dir.relative}" />
            <filter token="log.dir"
                    value="${@{os}-@{relativeroot}-@{pathreplacement}.log.dir.relative}" />
            <filter token="logger.arg"
                    value="-Djava.util.logging.config.file=${@{os}-@{relativeroot}-@{pathreplacement}.common.dir.relative}@{fileseparator}logging.properties" />
            <filter token="attributeMarker" value="@{attributemarker}" />
            <filter token="platformScriptSuffix" value="@{scriptsuffix}" />
        </sequential>
    </macrodef>

    <target name="usage">
        <echo message="Not to be called directly.  This file contains utilities to be used in other build files." />
    </target>

    <!-- =================================================================== -->
    <!-- Create a Dependancy Report (requires jdepend.jar in ant/lib         -->
    <!-- =================================================================== -->
    <target name="jdepend"
            depends="clean"
            if="jdepend.available"
            description="Create a dependancy report (requires jdepend.jar in ant/lib)">
        <jdepend format="xml" outputfile="${doc.dir}/jdepend-report.xml">
            <classespath>
                <pathelement location="${classes.dir}" />
            </classespath>
        </jdepend>
        <style basedir="docs"
               destdir="docs"
               includes="jdepend-report.xml"
               style="${ant.home}/etc/jdepend.xsl" />
    </target>


    <target name="platformCheck"
            depends="cond-if-isWindows,cond-else-isWindows" />
    <target name="check-cond-isWindows">
        <condition property="isWindows">
            <os family="windows" />
        </condition>
    </target>
    <target name="cond-if-isWindows"
            depends="check-cond-isWindows"
            if="isWindows">
        <property name="platformScriptSuffix" value="bat" />
        <property name="attributeMarker" value="%" />
        <property name="platformPrefix" value="windows" />
        <property name="pause.command" value="pause" />
    </target>
    <target name="cond-else-isWindows"
            depends="check-cond-isWindows"
            unless="isWindows">
        <property name="platformScriptSuffix" value="sh" />
        <property name="attributeMarker" value="$" />
        <property name="platformPrefix" value="unix" />
        <property name="pause.command" value="read" />
    </target>

    <!-- =================================================================== -->
    <!-- Generates all the system files based off templates for a particular platform     -->
    <!-- =================================================================== -->
    <macrodef name="configure-scripts">
        <attribute name="scriptdir" />
        <attribute name="scriptsuffix" />
        <sequential>
            <copy todir="@{scriptdir}" filtering="true" overwrite="true">
                <fileset dir="@{scriptdir}">
                    <include name="*.script" />
                </fileset>
                <mapper type="glob" from="*.script" to="*.@{scriptsuffix}" />
            </copy>
            <chmod perm="ug+x">
                <fileset dir="@{scriptdir}">
                    <include name="*.@{scriptsuffix}" />
                </fileset>
            </chmod>
        </sequential>
    </macrodef>
    <macrodef name="configure-windows-scripts">
        <attribute name="scriptdir" />
        <attribute name="logdir" default="${log.dir}" />
        <attribute name="libdir" default="${lib.dir}" />
        <attribute name="serverclasspath" />
        <attribute name="clientclasspath" />
        <attribute name="relativeroot" default="${basedir}" />
        <attribute name="pathreplacement" default="..${file.separator}.." />
        <sequential>
            <load-filters attributemarker="%"
                          fileseparator="\"
                          os="windows"
                          pathseparator=";"
                          scriptsuffix="bat"
                          logdir="@{logdir}"
                          libdir="@{libdir}"
                          serverclasspath="@{serverclasspath}"
                          clientclasspath="@{clientclasspath}"
                          relativeroot="@{relativeroot}"
                          pathreplacement="@{pathreplacement}" />
            <configure-scripts scriptdir="@{scriptdir}" scriptsuffix="bat" />
        </sequential>
    </macrodef>
    <macrodef name="configure-unix-scripts">
        <attribute name="scriptdir" />
        <attribute name="logdir" default="${log.dir}" />
        <attribute name="libdir" default="${lib.dir}" />
        <attribute name="serverclasspath" />
        <attribute name="clientclasspath" />
        <attribute name="relativeroot" default="${basedir}" />
        <attribute name="pathreplacement" default="..${file.separator}.." />
        <sequential>
            <load-filters attributemarker="$"
                          fileseparator="/"
                          os="unix"
                          pathseparator=":"
                          scriptsuffix="sh"
                          logdir="@{logdir}"
                          libdir="@{libdir}"
                          serverclasspath="@{serverclasspath}"
                          clientclasspath="@{clientclasspath}"
                          relativeroot="@{relativeroot}"
                          pathreplacement="@{pathreplacement}" />
            <configure-scripts scriptdir="@{scriptdir}" scriptsuffix="sh" />
        </sequential>
    </macrodef>

    <macrodef name="configure-platform-scripts">
        <attribute name="scriptdir" />
        <attribute name="logdir" default="${log.dir}" />
        <attribute name="libdir" default="${lib.dir}" />
        <attribute name="serverclasspath" />
        <attribute name="clientclasspath" />
        <attribute name="relativeroot" default="${basedir}" />
        <attribute name="pathreplacement" default="..${file.separator}.." />
        <sequential>
            <configure-windows-scripts scriptdir="@{scriptdir}"
                                       logdir="@{logdir}"
                                       libdir="@{libdir}"
                                       serverclasspath="@{serverclasspath}"
                                       clientclasspath="@{clientclasspath}"
                                       relativeroot="@{relativeroot}"
                                       pathreplacement="@{pathreplacement}" />
            <configure-unix-scripts scriptdir="@{scriptdir}"
                                    logdir="@{logdir}"
                                    libdir="@{libdir}"
                                    serverclasspath="@{serverclasspath}"
                                    clientclasspath="@{clientclasspath}"
                                    relativeroot="@{relativeroot}"
                                    pathreplacement="@{pathreplacement}" />
        </sequential>
    </macrodef>


    <target name="check_build_properties">
        <condition property="build.props.present">
            <available file="${basedir}/build.properties" />
        </condition>
    </target>
    <target name="load_filters_file"
            depends="check_build_properties"
            if="build.props.present">
        <filter filtersfile="${basedir}/build.properties" />
    </target>
    <target name="default_filters">
        <filter token="java.command" value="java" />
    </target>
    <target name="build-filters" depends="default_filters,load_filters_file" />

    <!-- ============================================================== -->
    <!-- Creates conf files from examples                               -->
    <!-- ============================================================== -->
    <target name="check_config">
        <condition property="configuration.needed">
            <not>
                <available file="${basedir}/build.properties" />
            </not>
        </condition>
    </target>
    <target name="configure_example"
            depends="check_config"
            if="configuration.needed"
            description="Creates conf files from examples">
        <echo message="You have not configured build.properties.  Creating from example..." />
        <copy file="${basedir}/build.properties.example"
              tofile="${basedir}/build.properties" />
        <!--<fail message="Please edit ${basedir}/build.properties and set variables appropriate to your environment, before using ant again." />-->
    </target>

    <!-- =================================================================== -->
    <!-- Generates your DartConfiguration.tcl for you                        -->
    <!-- =================================================================== -->
    <target name="configure_dart"
            depends="configure_dart_properties"
            description="Generates your DartConfiguration.tcl for you ">
        <filter filtersfile="${dart.props}" />
        <copy file="${test.dir}/conf/Dart.conf.in"
              tofile="${basedir}/DartConfiguration.tcl"
              filtering="true"
              overwrite="true" />
        <echo message="Successfully configured ${basedir}/DartConfiguration.tcl you may further configure Dart by editing this file." />
    </target>
    <target name="check_dart_config">
        <condition property="dart.configuration.needed">
            <not>
                <available file="${dart.props}" />
            </not>
        </condition>
    </target>
    <target name="copy_dart_properties"
            depends="check_dart_config"
            if="dart.configuration.needed">
        <echo message="You have not configured dart.properties  Creating from defaults..." />
        <copy file="${dart.props}.default" tofile="${dart.props}" />
    </target>
    <target name="configure_dart_properties"
            depends="copy_dart_properties,platformCheck">
        <!-- DEFAULTS -->
        <property name="default.dart.root" location="${test.dir}/Dart" />
        <property environment="env" />
        <property name="default.site" value="${env.HOST}" />
        <property name="default.java.cmd"
                  location="${env.JAVA_HOME}\bin\java" />
        <!-- os.name may have spaces... which dart doesnt like -->
        <property name="default.build.name"
                  value="${platformPrefix}-${os.version}-java-${java.runtime.version}" />
        <property prefix="default" file="${dart.props}.default" />

        <!-- PROMPT FOR REQUIREMENTS -->
        <input message="Please enter the location of your Dart checkout [${default.dart.root}]:"
               addproperty="input.dart.root"
               defaultvalue="${default.dart.root}" />
        <input message="Please enter your machine name [${default.site}]:"
               addproperty="input.site"
               defaultvalue="${default.site}" />
        <input message="Please enter your desired build name (HINT: NO SPACES!) [${default.build.name}]:"
               addproperty="input.build.name"
               defaultvalue="${default.build.name}" />
        <input message="Please enter your java command (HINT: if you're in cygwin, use a cygwin-style path) [${default.java.cmd}]:"
               addproperty="input.java.cmd"
               defaultvalue="${default.java.cmd}" />
        <input message="Please enter your cvs command [${default.CVSCOMMAND}]:"
               addproperty="input.cvs.cmd"
               defaultvalue="${default.CVSCOMMAND}" />
        <input message="Please enter your tclsh command (HINT: most cygwin installs need /bin/tclsh.exe) [${default.TCL_TCLSH}]:"
               addproperty="input.tclsh.cmd"
               defaultvalue="${default.TCL_TCLSH}" />
        <input message="Please enter your scp command [${default.SCPCOMMAND}]:"
               addproperty="input.scp.cmd"
               defaultvalue="${default.SCPCOMMAND}" />
        <input message="Please your desired configure command [${default.CONFIGURE_COMMAND}]:"
               addproperty="input.config.cmd"
               defaultvalue="${default.CONFIGURE_COMMAND}" />
        <input message="Please your desired build command [${default.MAKECOMMAND}]:"
               addproperty="input.make.cmd"
               defaultvalue="${default.MAKECOMMAND}" />
        <input message="Please your desired prefix for executing test scripts [${default.SERVICE_STARTUP_PREFIX}]:"
               addproperty="input.scripts.prefix.cmd"
               defaultvalue="${default.SERVICE_STARTUP_PREFIX}" />

        <!-- EDIT THE PROPERTIES FILE -->
        <propertyfile file="${dart.props}" comment="Dart properties">
            <entry key="DART_ROOT" value="${input.dart.root}" />
            <entry key="SITE" value="${input.site}" />
            <entry key="BUILDNAME" value="${input.build.name}" />
            <entry key="JAVACOMMAND" value="${input.java.cmd}" />
            <entry key="CVSCOMMAND" value="${input.cvs.cmd}" />
            <entry key="TCL_TCLSH" value="${input.tclsh.cmd}" />
            <entry key="SCPCOMMAND" value="${input.scp.cmd}" />
            <entry key="CONFIGURE_COMMAND" value="${input.config.cmd}" />
            <entry key="MAKECOMMAND" value="${input.make.cmd}" />
            <entry key="SERVICE_STARTUP_PREFIX"
                   value="${input.scripts.prefix.cmd}" />

            <entry key="DOXYGEN_CONFIG" value="${etc.dir}/Doxyfile" />
            <entry key="PROJECT_SOURCE_DIR" value="${basedir}" />
            <entry key="PROJECT_BINARY_DIR" value="${basedir}" />
        </propertyfile>
    </target>


    <!-- =================================================================== -->
    <!-- Generates the Dart test file based off templates for a particular platform     -->
    <!-- =================================================================== -->
    <target name="configure-dart-templates">
        <copy todir="." filtering="true" overwrite="true">
            <fileset dir=".">
                <include name="**/DartTestfile.txt.template" />
                <exclude name="Testing/" />
            </fileset>
            <mapper type="glob" from="*.template" to="*" />
        </copy>
        <replace dir="." token="\" value="\\">
            <include name="**/DartTestfile.txt" />
            <exclude name="Testing/" />
        </replace>
    </target>

    <!-- =================================================================== -->
    <!-- Generates all the test scripts based off templates for a particular platform     -->
    <!-- =================================================================== -->
    <target name="configure-test-templates" depends="">
        <copy todir="." filtering="true" overwrite="true">
            <fileset dir=".">
                <include name="test/scripts/*.template" />
            </fileset>
            <mapper type="glob" from="*.template" to="*" />
        </copy>
        <chmod perm="ug+x">
            <fileset dir="${test.dir}/scripts">
                <include name="*.sh" />
            </fileset>
        </chmod>
    </target>

</project>