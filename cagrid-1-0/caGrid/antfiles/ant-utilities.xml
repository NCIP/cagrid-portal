<!-- ======================================================================= -->
<!-- caGrid Utilities build file                                             -->
<!-- ======================================================================= -->
<project name="caGrid_utilities" basedir="." default="usage">
	
	<property name="dart.props" location="${test.dir}/conf/dart.properties"/>
    
    <!-- Allows you define a new property with a value of ${${a}.${b}} which can't be done by the Property task alone.  -->
    <macrodef name="compose-property">
        <attribute name="name" />
        <attribute name="stem" />
        <attribute name="selector" />
        <sequential>
            <property name="@{name}" value="${@{stem}.@{selector}}" />
        </sequential>
    </macrodef>

    <macrodef name="make-relative-path-property">
        <attribute name="os" />
        <attribute name="relativeroot" default="${basedir}" />
        <attribute name="pathreplacement" />
        <attribute name="fullpath" />
        <attribute name="property" />
        <sequential>
            <pathconvert targetos="@{os}" property="@{property}">
                <path>
                    <pathelement path="@{fullpath}" />
                </path>
                <map from="@{relativeroot}" to="@{pathreplacement}" />
            </pathconvert>
            <echo message="Converted @{fullpath} to ${@{property}}" />
        </sequential>
    </macrodef>
    <macrodef name="load-filters">
        <attribute name="os" />
        <attribute name="fileseparator" />
        <attribute name="pathseparator" />
        <attribute name="attributemarker" />
        <attribute name="scriptsuffix" />

        <attribute name="logdir" default="${log.dir}" />
        <attribute name="libdir" default="${lib.dir}" />
        <attribute name="serverclasspath" />
        <attribute name="clientclasspath" />
        <attribute name="relativeroot" default="${basedir}" />
        <attribute name="pathreplacement" default="..${file.separator}.." />

        <sequential>
            <!-- until ant lets us have scoped properties, i need to fake some uniqueness
            of these properties so i can make filters from them 
            I'm assuming this triple is unique (@{os}-@{relativeroot}-@{pathreplacement}), if its not for you, you will have problems
            on successive calls to this macro-->
            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.client.classpath.relative"
                                         fullpath="@{clientclasspath}"
                                         pathreplacement="@{pathreplacement}" />

            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.server.classpath.relative"
                                         fullpath="@{serverclasspath}"
                                         pathreplacement="@{pathreplacement}" />

            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.lib.dir.relative"
                                         fullpath="@{libdir}"
                                         pathreplacement="@{pathreplacement}" />

            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.log.dir.relative"
                                         fullpath="@{logdir}"
                                         pathreplacement="@{pathreplacement}" />

            <make-relative-path-property os="@{os}"
                                         relativeroot="@{relativeroot}"
                                         property="@{os}-@{relativeroot}-@{pathreplacement}.common.dir.relative"
                                         fullpath="@{relativeroot}"
                                         pathreplacement="@{pathreplacement}" />

            <filter token="path.separator" value="@{pathseparator}" />
            <filter token="file.separator" value="@{fileseparator}" />
            <filter token="client.classpath"
                    value="${@{os}-@{relativeroot}-@{pathreplacement}.client.classpath.relative}" />
            <filter token="server.classpath"
                    value="${@{os}-@{relativeroot}-@{pathreplacement}.server.classpath.relative}" />
            <filter token="lib.dir"
                    value="${@{os}-@{relativeroot}-@{pathreplacement}.lib.dir.relative}" />
            <filter token="log.dir"
                    value="${@{os}-@{relativeroot}-@{pathreplacement}.log.dir.relative}" />
            <filter token="logger.arg"
                    value="-Djava.util.logging.config.file=${@{os}-@{relativeroot}-@{pathreplacement}.common.dir.relative}@{fileseparator}logging.properties" />
            <filter token="attributeMarker" value="@{attributemarker}" />
            <filter token="platformScriptSuffix" value="@{scriptsuffix}" />
        </sequential>
    </macrodef>

    <target name="usage">
        <echo message="Not to be called directly.  This file contains utilities to be used in other build files." />
    </target>


    <target name="platformCheck"
            depends="cond-if-isWindows,cond-else-isWindows" />
    <target name="check-cond-isWindows">
        <condition property="isWindows">
            <os family="windows" />
        </condition>
    </target>
    <target name="cond-if-isWindows"
            depends="check-cond-isWindows"
            if="isWindows">
        <property name="platformScriptSuffix" value="bat" />
        <property name="attributeMarker" value="%" />
        <property name="platformPrefix" value="windows" />
        <property name="pause.command" value="pause" />
    </target>
    <target name="cond-else-isWindows"
            depends="check-cond-isWindows"
            unless="isWindows">
        <property name="platformScriptSuffix" value="sh" />
        <property name="attributeMarker" value="$" />
        <property name="platformPrefix" value="unix" />
        <property name="pause.command" value="read" />
    </target>

</project>