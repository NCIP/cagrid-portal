package gov.nih.nci.cagrid.workflow.tests.sample2.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.workflow.tests.sample2.stubs.WorkflowTestService2PortType;
import gov.nih.nci.cagrid.workflow.tests.sample2.stubs.service.WorkflowTestService2ServiceAddressingLocator;
import gov.nih.nci.cagrid.workflow.tests.sample2.common.WorkflowTestService2I;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class WorkflowTestService2Client extends ServiceSecurityClient implements WorkflowTestService2I {	
	protected WorkflowTestService2PortType portType;
	private Object portTypeMutex;

	public WorkflowTestService2Client(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WorkflowTestService2Client(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	   	initialize();
	}
	
	public WorkflowTestService2Client(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public WorkflowTestService2Client(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
		initialize();
	}
	
	private void initialize() throws RemoteException {
	    this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private WorkflowTestService2PortType createPortType() throws RemoteException {

		WorkflowTestService2ServiceAddressingLocator locator = new WorkflowTestService2ServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		WorkflowTestService2PortType port = null;
		try {
			port = locator.getWorkflowTestService2PortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}
	
	public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
		return portType.getResourceProperty(resourcePropertyQName);
	}

	public static void usage(){
		System.out.println(WorkflowTestService2Client.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  WorkflowTestService2Client client = new WorkflowTestService2Client(args[1]);
              System.out.println( client.invoke("Test") );
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getServiceSecurityMetadata");
    gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
    gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType.getServiceSecurityMetadata(params);
    return boxedResult.getServiceSecurityMetadata();
    }
  }

  public java.lang.String invoke(java.lang.String invokeInput) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"invoke");
    gov.nih.nci.cagrid.workflow.tests.sample2.stubs.InvokeRequest params = new gov.nih.nci.cagrid.workflow.tests.sample2.stubs.InvokeRequest();
    params.setInvokeInput(invokeInput);
    gov.nih.nci.cagrid.workflow.tests.sample2.stubs.InvokeResponse boxedResult = portType.invoke(params);
    return boxedResult.getResponse();
    }
  }

}
