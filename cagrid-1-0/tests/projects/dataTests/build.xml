<?xml version="1.0"?>
<project name="DataTests" default="all" basedir=".">
	<property environment="env" />
	<property file="build.properties" />
	<property file="project.properties" />
	<property name="globus.dir" location="${env.GLOBUS_LOCATION}" />
	
	<!-- locations within the testing project -->
	<property name="src.dir" value="${basedir}/src" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="jar.dir" value="${build.dir}/lib" />
	<property name="project.jarfile" value="${jar.dir}/${project.name}-${project.version}.jar" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="ext.lib.dir" value="${basedir}/ext/dependencies/jars" />
	
	<!-- depends on Introduce toolkit -->
	<property name="introduce.dir" value="../../../caGrid/projects/introduce" />
	
	<!-- output directory for JUnit logs -->
	<property name="junit.results.dir" value="log/junit" />

	<!-- build with debugging information -->
	<property name="java.debug" value="on" />
	
	<!-- enforce java 1.5 compliance at build time -->
	<property name="java.source" value="1.5" />
	
	<!-- beans related properties -->
	<property name="schema.dest" location="${build.dir}/schema"/>
	<property name="stubs.dir" location="${build.dir}/stubs" />
	<property name="stubs.src" location="${stubs.dir}/src" />
	<property name="stubs.dest" location="${stubs.dir}/classes" />
	<property name="stubs.jar.file" value="${jars.dir}/${project.name}-stubs-${project.version}.jar"/>
	<property name="ant.build.stubs" location="${globus.dir}/share/globus_wsrf_tools/build-stubs.xml" />
	
	<property name="resources.dir" location="${basedir}/resources"/>
	<property name="bookstore.resources.dir" location="${resources.dir}/bookstore"/>
	<property name="bookstore.ns2pkg.properties" value="${bookstore.resources.dir}/NStoPKG.properties"/>

	<!-- sets the ext.globus.dir, schema.src, build.packages, and GT4.ns.excludes
	properties if the GLOBUS_LOCATION environment variable is set -->
	<target name="setGlobus" if="env.GLOBUS_LOCATION">
		<!-- GT4 build files and directories-->
		<property name="ext.globus.dir" value="${env.GLOBUS_LOCATION}" />
		<property name="globus.schema.src" location="${ext.globus.dir}/share/schema" />
		<property name="build.packages" location="${ext.globus.dir}/share/globus_wsrf_common/build-packages.xml" />
		<!-- Copied from build.stubs file, as there is no way to "append" to the value in the remote file -->
		<property name="GT4.ns.excludes" value="-x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.wsdl -x http://schemas.xmlsoap.org/ws/2004/04/trust -x http://schemas.xmlsoap.org/ws/2002/12/policy -x http://schemas.xmlsoap.org/ws/2002/07/utility -x http://schemas.xmlsoap.org/ws/2004/04/sc -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd -x http://www.w3.org/2000/09/xmldsig# -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd -x http://schemas.xmlsoap.org/ws/2004/09/enumeration" />
	</target>

	<!-- import the tests -->
	<import file="test.xml"/>
	

	<!-- =============================================================== -->
	<!-- Prepares the classpaths                                         -->
	<!-- =============================================================== -->
	<target name="defineClasspaths" depends="setGlobus">
		<path id="build.classpath">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<!-- this is kinda funny to make sure the testUtils jars get in ahead of the old testing stuff -->
			<fileset dir="${ext.lib.dir}">
				<include name="**/*.jar" />
				<exclude name="**/*testing-system*.jar"/>
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="**/*testing-system*.jar"/>
			</fileset>
			<fileset dir="${ext.globus.dir}/lib">
				<include name="**/*.jar" />
			</fileset>
			<!--
			<fileset dir="${ant.library.dir}">
				<include name="**/*.jar"/>
			</fileset>
			-->
			<pathelement location="${ext.globus.dir}" />
		</path>
		
		<path id="Introduce.test.classpath">
			<fileset dir="${introduce.dir}/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${introduce.dir}/ext/dependencies/jars">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${introduce.dir}/build/jars">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${introduce.dir}/test/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${introduce.dir}/ext/dependencies/test/jars">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${ant.library.dir}">
				<include name="*.jar" />
			</fileset>
		    <pathelement path="${introduce.dir}/test/resources"/>
		</path>
	
		<path id="test.run.classpath">
			<path refid="build.classpath"/>
			<path refid="Introduce.test.classpath"/>
		</path>
	</target>

	
	<target name="copyGlobusSchemas" depends="prepare">
		<copy toDir="${schema.dest}">
			<fileset dir="${globus.schema.src}" casesensitive="yes">
				<include name="wsrf/**/*" />
				<include name="ws/**/*" />
			</fileset>
		</copy>
	</target>


	<!-- merge namespace mappings with globus -->
	<target name="mergeNsMappings" depends="prepare">
		<!-- todo: if there get to be more than one of these, use a for.. loop -->
		<!-- bookstore -->
		<ant antfile="${ant.build.stubs}" target="mergePackageMapping">
			<property name="mapping.src" value="${bookstore.ns2pkg.properties}" />
			<property name="mapping.dst" location="${build.dir}/NStoPKG.properties" />
		</ant>
	</target>	

	
	<!-- =============================================================== -->
	<!-- Prepares the build directory                                    -->
	<!-- =============================================================== -->
	<target name="prepare" depends="defineClasspaths">
		<tstamp />
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${stubs.src}"/>
		<mkdir dir="${stubs.dest}"/>
		<mkdir dir="${schema.dest}"/>
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${jar.dir}"/>
		<!-- copy bookstore schemas -->
		<copy todir="${schema.dest}">
			<fileset dir="${bookstore.resources.dir}">
				<include name="**/*.xsd"/>
				<include name="**/*.wsdl"/>
			</fileset>
		</copy>
	</target>
	
	
	<!-- =============================================================== -->
	<!-- Generates beans used in testing                                 -->
	<!-- =============================================================== -->
	<target name="generateBeans" depends="prepare, setGlobus, copyGlobusSchemas, mergeNsMappings">
		<property name="mapping.file" value="${build.dir}/NStoPKG.properties" />
		<!-- generate bookstore beans -->
		<ant antfile="${ant.build.stubs}" target="generateStubs">
			<property name="source.stubs.dir" location="${schema.dest}" />
			<property name="wsdl.file" value="bookstore.wsdl" />
			<property name="target.stubs.dir" location="${stubs.src}" />
		</ant>
	</target>		


	<!-- =============================================================== -->
	<!-- Compiles the source code                                        -->
	<!-- =============================================================== -->
	<target name="compile" depends="prepare, generateBeans" description="compiles.">
		<!-- stubs -->
		<javac srcdir="${stubs.src}" destdir="${stubs.dest}" source="${java.source}" target="${java.source}" debug="${java.debug}">
			<classpath refid="build.classpath"/>
		</javac>
		<!-- test source -->
		<javac srcdir="${src.dir}" destdir="${classes.dir}" source="${java.source}" target="${java.source}" debug="${java.debug}" deprecation="off" optimize="off">
			<classpath refid="build.classpath" />
			<classpath>
				<pathelement path="${stubs.dest}"/>
			</classpath>
		</javac>
	</target>


	<!-- ============================================================== -->
	<!-- Cleans up generated stuff                                      -->
	<!-- ============================================================== -->
	<target name="clean" depends="" description="Removes generated files.">
		<delete dir="${build.dir}" />
	</target>


	<!-- ============================================================== -->
	<!-- Creates the jar files                                          -->
	<!-- ============================================================== -->
	<target name="jar" depends="compile" description="Builds the Jar Files">
		<mkdir dir="${jar.dir}" />
		<jar jarfile="${project.jarfile}" basedir="${classes.dir}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main.class}" />
			</manifest>
		</jar>
	</target>


	<!-- ============================================================== -->
	<!-- Builds everything                                              -->
	<!-- ============================================================== -->
	<target name="all" description="Builds the entire application" depends="clean, compile, jar" />


	<target name="configure">
		<!-- placeholder?? -->
	</target>
</project>

