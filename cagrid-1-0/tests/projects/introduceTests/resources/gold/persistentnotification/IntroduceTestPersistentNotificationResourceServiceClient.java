package org.test.persistentnotification.resource.client;

import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.List;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.test.persistentnotification.resource.stubs.IntroduceTestPersistentNotificationResourceServicePortType;
import org.test.persistentnotification.resource.stubs.service.IntroduceTestPersistentNotificationResourceServiceAddressingLocator;
import org.test.persistentnotification.resource.common.IntroduceTestPersistentNotificationResourceServiceI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class IntroduceTestPersistentNotificationResourceServiceClient extends IntroduceTestPersistentNotificationResourceServiceClientBase implements IntroduceTestPersistentNotificationResourceServiceI {	

    public static int recievedNotificationCount = 0;
    
	public IntroduceTestPersistentNotificationResourceServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public IntroduceTestPersistentNotificationResourceServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public IntroduceTestPersistentNotificationResourceServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public IntroduceTestPersistentNotificationResourceServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(IntroduceTestPersistentNotificationResourceServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  IntroduceTestPersistentNotificationResourceServiceClient client = new IntroduceTestPersistentNotificationResourceServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public projectmobius.org.BookType getBook() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getBook");
    org.test.persistentnotification.resource.stubs.GetBookRequest params = new org.test.persistentnotification.resource.stubs.GetBookRequest();
    org.test.persistentnotification.resource.stubs.GetBookResponse boxedResult = portType.getBook(params);
    return boxedResult.getBook();
    }
  }

  public org.oasis.wsn.SubscribeResponse subscribe(org.oasis.wsn.Subscribe params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"subscribe");
    return portType.subscribe(params);
    }
  }

  public void setBook(projectmobius.org.BookType book) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setBook");
    org.test.persistentnotification.resource.stubs.SetBookRequest params = new org.test.persistentnotification.resource.stubs.SetBookRequest();
    org.test.persistentnotification.resource.stubs.SetBookRequestBook bookContainer = new org.test.persistentnotification.resource.stubs.SetBookRequestBook();
    bookContainer.setBook(book);
    params.setBook(bookContainer);
    org.test.persistentnotification.resource.stubs.SetBookResponse boxedResult = portType.setBook(params);
    }
  }
  
  public void deliver(List topicPath, EndpointReferenceType producer, Object message) {
      org.oasis.wsrf.properties.ResourcePropertyValueChangeNotificationType changeMessage = ((org.globus.wsrf.core.notification.ResourcePropertyValueChangeNotificationElementType) message)
          .getResourcePropertyValueChangeNotification();

      if (changeMessage != null) {
          recievedNotificationCount++;
          try {
              System.out.println("GOT NOTIFICATION: " + changeMessage.getNewValue().get_any()[0].getAsString());
          } catch (Exception e) {
              // TODO Auto-generated catch block
              e.printStackTrace();
          }
      }
  }

}
