package org.test.notification.client;

import java.rmi.RemoteException;
import java.util.List;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;
import org.test.notification.common.IntroduceTestNotificationServiceI;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class IntroduceTestNotificationServiceClient extends IntroduceTestNotificationServiceClientBase implements IntroduceTestNotificationServiceI {   

    public int recievedNotificationCount = 0;
    
    public IntroduceTestNotificationServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url,null); 
    }

    public IntroduceTestNotificationServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url,proxy);
    }
    
    public IntroduceTestNotificationServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr,null);
    }
    
    public IntroduceTestNotificationServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(epr,proxy);
    }

    public static void usage(){
        System.out.println(IntroduceTestNotificationServiceClient.class.getName() + " -url <service url>");
    }
    
    public static void main(String [] args){

        System.out.println("Running the Grid Service Client");
        try{
        if(!(args.length < 2)){
            if(args[0].equals("-url")){
              IntroduceTestNotificationServiceClient client = new IntroduceTestNotificationServiceClient(args[1]);
              // place client calls here if you want to use this main as a
              // test....
              client.subscribe(org.test.notification.common.IntroduceTestNotificationServiceConstants.BOOK);
              Thread.sleep(5000);
              projectmobius.org.BookType book = new projectmobius.org.BookType();
              book.setAuthor("Shannon Hastings");
              client.setBook(book);
              book.setTitle("Life");
              Thread.sleep(3000);
              client.setBook(book);
              Thread.sleep(10000);
              if(client.recievedNotificationCount<=1){
                  System.err.println("Notification was not recieved");
                  System.exit(1);
              }
            } else {
                usage();
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
    
    public void deliver(List topicPath, EndpointReferenceType producer, Object message) {
        org.oasis.wsrf.properties.ResourcePropertyValueChangeNotificationType changeMessage = ((org.globus.wsrf.core.notification.ResourcePropertyValueChangeNotificationElementType) message)
            .getResourcePropertyValueChangeNotification();

        if (changeMessage != null) {
            recievedNotificationCount++;
            try {
                System.out.println("GOT NOTIFICATION: " + changeMessage.getNewValue().get_any()[0].getAsString());
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    
    

  public org.oasis.wsn.SubscribeResponse subscribe(org.oasis.wsn.Subscribe params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"subscribe");
    return portType.subscribe(params);
    }
  }

  public void setBook(projectmobius.org.BookType book) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setBook");
    org.test.notification.stubs.SetBookRequest params = new org.test.notification.stubs.SetBookRequest();
    org.test.notification.stubs.SetBookRequestBook bookContainer = new org.test.notification.stubs.SetBookRequestBook();
    bookContainer.setBook(book);
    params.setBook(bookContainer);
    org.test.notification.stubs.SetBookResponse boxedResult = portType.setBook(params);
    }
  }

}
