<?xml version="1.0"?>
<project name="caGrid-sdk4StyleTests" default="all" basedir=".">
	<property environment="env" />
	<property file="build.properties" />
	<property file="project.properties" />
	<property name="globus.dir" location="${env.GLOBUS_LOCATION}" />
	
	<!-- locations within the testing project -->
	<property name="project.name" value="${ant.project.name}" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="resources.dir" value="resources" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="jar.dir" value="${build.dir}/lib" />
	<property name="project.jarfile" value="${jar.dir}/${project.name}-${project.version}.jar" />
	<property name="resources.jarfile" value="${jar.dir}/${project.name}-resources-${project.version}.jar" />
	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="ext.lib.dir" value="${basedir}/ext/dependencies/jars" />
	
	<!-- dependencies on SDK clients -->
	<property name="ext.remote-client.dir" location="${build.dir}/remote-client" />
	<property name="ext.local-client.dir" location="${build.dir}/local-client" />
	<property name="ext.remote-client.lib.dir" location="${ext.remote-client.dir}/lib" />
	<property name="ext.local-client.lib.dir" location="${ext.local-client.dir}/lib" />
	
	<!-- depends on Introduce toolkit -->
	<property name="introduce.dir" value="../../../caGrid/projects/introduce" />
	
	<!-- output directory for JUnit logs -->
	<property name="junit.results.dir" value="log/junit" />

	<!-- build with debugging information -->
	<property name="java.debug" value="on" />
	
	<!-- enforce java 1.5 compliance at build time -->
	<property name="java.source" value="1.5" />
	
	<!-- import the tests -->
	<import file="test.xml"/>
	

	<!-- =============================================================== -->
	<!-- Prepares the classpaths                                         -->
	<!-- =============================================================== -->
	<target name="defineClasspaths">
		<path id="build.classpath">
			<!-- this is kinda funny to make sure the testUtils jars get in ahead of the old testing stuff -->
			<fileset dir="${ext.lib.dir}">
				<include name="**/*.jar" />
				<exclude name="**/*testing-system*.jar"/>
			</fileset>
			<fileset dir="${ext.lib.dir}">
				<include name="**/*testing-system*.jar"/>
			</fileset>
			<fileset dir="${globus.dir}/lib">
				<include name="**/*.jar" />
			</fileset>
			<pathelement location="${globus.dir}" />
		</path>
		
		<path id="Introduce.test.classpath">
			<fileset dir="${introduce.dir}/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${introduce.dir}/ext/dependencies/jars">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${introduce.dir}/build/jars">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${introduce.dir}/test/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${introduce.dir}/ext/dependencies/test/jars">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${ant.library.dir}">
				<include name="*.jar" />
			</fileset>
		    <pathelement path="${introduce.dir}/test/resources"/>
		</path>
	
		<path id="test.run.classpath">
			<path refid="build.classpath"/>
			<path refid="Introduce.test.classpath"/>
		</path>
	</target>

	
	<!-- =============================================================== -->
	<!-- Prepares the build directory                                    -->
	<!-- =============================================================== -->
	<target name="prepare" depends="defineClasspaths">
		<tstamp />
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${jar.dir}"/>
		<antcall target="unpackSdkClients"/>
	</target>
	
	
	<!-- unpacks the caCORE SDK client zip files -->
	<target name="unpackSdkClients">
		<unzip src="${lib.dir}/RemoteClient.zip" dest="${ext.remote-client.dir}" />
		<unzip src="${lib.dir}/LocalClient.zip" dest="${ext.local-client.dir}" />
	</target>
	

	<!-- =============================================================== -->
	<!-- Compiles the source code                                        -->
	<!-- =============================================================== -->
	<target name="compile" depends="prepare" description="compiles.">
		<!-- test source -->
		<javac srcdir="${src.dir}" destdir="${classes.dir}" source="${java.source}" target="${java.source}" debug="${java.debug}" deprecation="off" optimize="off">
			<classpath refid="build.classpath" />
		</javac>
	</target>


	<!-- ============================================================== -->
	<!-- Cleans up generated stuff                                      -->
	<!-- ============================================================== -->
	<target name="clean" depends="" description="Removes generated files.">
		<delete dir="${build.dir}" />
	</target>


	<!-- ============================================================== -->
	<!-- Creates the jar files                                          -->
	<!-- ============================================================== -->
	<target name="jar" depends="compile" description="Builds the Jar Files">
		<mkdir dir="${jar.dir}" />
		<jar destfile="${project.jarfile}">
			<fileset dir="${classes.dir}">
				<include name="**/*.class"/>
			</fileset>
			<fileset dir="${src.dir}">
				<include name="**/*"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
		<jar destfile="${resources.jarfile}">
			<fileset dir="${basedir}">
				<include name="${resources.dir}/**/*"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
	</target>


	<!-- ============================================================== -->
	<!-- Builds everything                                              -->
	<!-- ============================================================== -->
	<target name="all" description="Builds the entire application" depends="clean, compile, jar" />
</project>

