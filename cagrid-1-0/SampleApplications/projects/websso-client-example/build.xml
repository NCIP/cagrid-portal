<project name="caGrid-websso-sample-client-example" default="all">	<!-- Environment -->	<property environment="env" />	<property name="tomcat.home" location="${env.CATALINA_HOME}" />	<property file="${basedir}/project.properties" />	<property file="${basedir}/build.properties" />	<property name="src.java.dir" location="src/java" />	<property name="tools.lib.dir" location="tools/lib" />	<property name="build.dir" location="build" />	<property name="build.classes.dir" location="${build.dir}/classes" />	<property name="build.lib.dir" location="${build.dir}/lib" />	<property name="build.war.dir" location="${build.dir}/war" />	<property name="build.wars.dir" location="${build.dir}/wars" />	<property name="ext.dir" location="ext" />	<property name="webapp.jasig.name" value="webssoclientjasigexample" />	<property name="webapp.acegi.name" value="webssoclientacegiexample" />	<property name="webcontent.dir" location="webcontent" />	<property name="ext.lib.dir" location="${ext.dir}/dependencies/jars" />	<property name="ext.properties.dir" location="${ext.dir}/dependencies-properties/properties" />	<property name="ext.xml.resources.dir" location="${ext.dir}/dependencies-xml-resources/xmls" />	<property name="endorsed.lib.dir" location="${ext.dir}/dependencies/endorsed/jars" />	<target name="defineClasspaths">		<path id="build.classpath">			<fileset dir="${ext.lib.dir}">				<include name="*.jar" />			</fileset>			<fileset dir="${env.GLOBUS_LOCATION}/lib">				<include name="**/*.jar" />			</fileset>		</path>	</target>	<path id="taskdef.cp">		<fileset dir="${tools.lib.dir}">			<include name="xmltask-v1.14.jar" />			<include name="ant-contrib*.jar" />		</fileset>	</path>	<target name="defineAntTask">		<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="taskdef.cp" />		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="taskdef.cp" />	</target>	<target name="compile" depends="clean,defineClasspaths">		<mkdir dir="${build.classes.dir}" />		<javac srcdir="${src.java.dir}" destdir="${build.classes.dir}" classpathref="build.classpath" debug="true" />		<mkdir dir="${build.war.dir}/WEB-INF/lib" />		<jar destfile="${build.war.dir}/WEB-INF/lib/${ant.project.name}-core-${project.version}.jar" basedir="${build.classes.dir}" />	</target>	<target name="build-war">		<copy todir="${build.war.dir}/WEB-INF/lib"  overwrite="true">			<fileset dir="${env.GLOBUS_LOCATION}/lib">				<include name="axis.jar" />				<include name="wsrf_core_stubs.jar" />				<include name="jaxrpc.jar" />				<include name="addressing-1.0.jar" />				<include name="cog-axis.jar" />				<include name="saaj.jar" />				<include name="commons-discovery.jar" />				<include name="wsdl4j.jar" />				<include name="wsrf_core.jar" />				<include name="puretls.jar" />				<include name="cryptix.jar" />				<include name="cryptix32.jar" />				<include name="cryptix-asn1.jar" />				<include name="wss4j.jar" />				<include name="xalan.jar" />				<include name="jce-jdk13-125.jar" />			</fileset>			<fileset dir="${ext.lib.dir}">				<include name="*.jar" />			</fileset>		</copy>	</target>	<target name="copy-jasig-conf-properties">		<antcall target="deleteTemplateFiles">		</antcall>		<!-- template files to resolve tokens-->		<copy file="${ext.xml.resources.dir}/web-template-jasig-${project.version}.xml" tofile="${webcontent.dir}/WEB-INF/web-template.xml" overwrite="true"/>		<copy file="${ext.properties.dir}/cas-client-template-jasig-${project.version}.properties" tofile="${webcontent.dir}/WEB-INF/classes/cas-client-template.properties" overwrite="true"/>		<!--  template files to resolve tokens-->		<copy file="${ext.xml.resources.dir}/applicationContext-jasig-${project.version}.xml" tofile="${webcontent.dir}/WEB-INF/applicationContext.xml" overwrite="true"/>	</target>	<target name="copy-acegi-conf-properties">		<antcall target="deleteTemplateFiles">		</antcall>		<!-- template files to resolve tokens-->		<copy file="${ext.properties.dir}/cas-client-template-acegi-${project.version}.properties" tofile="${webcontent.dir}/WEB-INF/classes/cas-client-template.properties" overwrite="true"/>		<!-- template files to resolve tokens-->				<copy file="${ext.xml.resources.dir}/web-acegi-${project.version}.xml" tofile="${webcontent.dir}/WEB-INF/web.xml" overwrite="true"/>		<copy file="${ext.xml.resources.dir}/applicationContext-acegi-${project.version}.xml" tofile="${webcontent.dir}/WEB-INF/applicationContext.xml" overwrite="true"/>	</target>	<!--  resolving of template files for websso-client and webss-client-acegi are done in same directory. making sure they are deleted -->	<target name="deleteTemplateFiles">		<delete>			<fileset dir="${webcontent.dir}/WEB-INF" includes="**/*template.*" />		</delete>	</target>	<target name="configure-websso-client-acegi" depends="copy-acegi-conf-properties,-template-input-configuration" description="configuration of WebSSO Client Acegi template properties">		<antcall target="-replace-token-contents">		</antcall>		<antcall target="deleteTemplateFiles">		</antcall>	</target>	<target name="configure-websso-client-jasig" depends="copy-jasig-conf-properties,-template-input-configuration" description="configuration of WebSSO Client Jasig template properties">		<antcall target="-replace-token-contents">		</antcall>		<antcall target="deleteTemplateFiles">		</antcall>	</target>	<target name="-template-input-configuration">		<input message="Enter the location of the websso client host certificate (PEM format):" addproperty="websso.client.host.certificate" />		<input message="Enter the location of the websso client host key (PEM format):" addproperty="websso.client.host.key" />		<input message="Enter websso client host name:" addproperty="websso.client.host.name" />		<input message="Enter websso client http port:" addproperty="websso.client.http.port" />		<input message="Enter websso client https port:" addproperty="websso.client.https.port" />		<input message="Enter websso server host name:" addproperty="websso.server.host.name" />		<input message="Enter websso server https port:" addproperty="websso.server.host.https.port" />	</target>	<target name="-resolve-template-tokens" depends="defineAntTask">		<filterset id="CAS_CLIENT_PROPERTIES" begintoken="@" endtoken="@">			<filter token="WEBSSO.SERVER" value="${websso.server.host.name}" />			<filter token="WEBSSO.SERVER.HTTPS.PORT" value="${websso.server.host.https.port}" />			<filter token="WEBSSO.CLIENT.SERVER" value="${websso.client.host.name}" />			<filter token="WEBSSO.CLIENT.HTTP.PORT" value="${websso.client.http.port}" />			<filter token="WEBSSO.CLIENT.HTTPS.PORT" value="${websso.client.https.port}" />			<filter token="WEBSSO.CLIENT.HOST.CERTIFICATE" value="${websso.client.host.certificate}" />			<filter token="WEBSSO.CLIENT.HOST.KEY" value="${websso.client.host.key}" />		</filterset>	</target>	<target name="-replace-token-contents" depends="-resolve-template-tokens">		<copy todir="${webcontent.dir}" filtering="true">			<fileset dir="${webcontent.dir}" />			<globmapper from="*-template.properties" to="*.properties" />			<filterset refid="CAS_CLIENT_PROPERTIES" />		</copy>		<copy todir="${webcontent.dir}" filtering="true">			<fileset dir="${webcontent.dir}" />			<globmapper from="*-template.xml" to="*.xml" />			<filterset refid="CAS_CLIENT_PROPERTIES" />		</copy>		<outofdate>			<sourcefiles>				<fileset dir="${webcontent.dir}" includes="**/*-template.properties" />				<fileset dir="${webcontent.dir}" includes="**/*-template.xml" />			</sourcefiles>			<targetfiles>				<fileset dir="${webcontent.dir}" includes="**/*.properties" />				<fileset dir="${webcontent.dir}" includes="**/*.xml" />			</targetfiles>			<sequential>				<copy todir="${webcontent.dir}" overwrite="true">					<fileset dir="${webcontent.dir}" />					<globmapper from="*-template.properties" to="*.properties" />					<filterset refid="CAS_CLIENT_PROPERTIES" />				</copy>				<copy todir="${webcontent.dir}" overwrite="true">					<fileset dir="${webcontent.dir}" />					<globmapper from="*-template.xml" to="*.xml" />					<filterset refid="CAS_CLIENT_PROPERTIES" />				</copy>			</sequential>		</outofdate>	</target>	<target name="websso-acegi-client-war" depends="compile,build-war">		<mkdir dir="${build.wars.dir}/acegi-war" />		<copy file="${webcontent.dir}/index-acegi.jsp" tofile="${webcontent.dir}/index.jsp" overwrite="true"/>		<copy file="${webcontent.dir}/protected/index-acegi.jsp" tofile="${webcontent.dir}/protected/index.jsp" overwrite="true"/>		<copy file="${webcontent.dir}/protected/usercredentials-acegi.jsp" tofile="${webcontent.dir}/protected/usercredentials.jsp" overwrite="true"/>		<war destfile="${build.wars.dir}/acegi-war/${webapp.acegi.name}-${project.version}.war" webxml="${webcontent.dir}/WEB-INF/web.xml">			<fileset dir="${webcontent.dir}" >				<exclude name="**/protected/index-*.jsp" />				<exclude name="**/protected/usercredentials-*.jsp" />				<exclude name="**/index-*.jsp" />			</fileset>			<lib dir="${build.war.dir}/WEB-INF/lib" />		</war>	</target>	<target name="websso-jasig-client-war" depends="compile,build-war">		<mkdir dir="${build.wars.dir}/jasig-war" />		<copy file="${webcontent.dir}/index-jasig.jsp" tofile="${webcontent.dir}/index.jsp" overwrite="true"/>		<copy file="${webcontent.dir}/protected/index-jasig.jsp" tofile="${webcontent.dir}/protected/index.jsp" overwrite="true"/>		<copy file="${webcontent.dir}/protected/usercredentials-jasig.jsp" tofile="${webcontent.dir}/protected/usercredentials.jsp" overwrite="true"/>		<war destfile="${build.wars.dir}/jasig-war/${webapp.jasig.name}-${project.version}.war" webxml="${webcontent.dir}/WEB-INF/web.xml">			<fileset dir="${webcontent.dir}" >				<exclude name="**/protected/index-*.jsp" />				<exclude name="**/protected/usercredentials-*.jsp" />				<exclude name="**/index-*.jsp" />			</fileset>			<lib dir="${build.war.dir}/WEB-INF/lib" />		</war>	</target>	<target name="all" />	<target name="deployTomcat" />	<target name="importWebSSOTrustStore" >		<echo message="Importing WebSSO server trust store into WebSSO-Client cacerts file" />		<copy file="${ext.dir}/dependencies-cert/cert/cacerts-${project.version}.cert" tofile="${tomcat.local}/conf/cacerts.cert" overwrite="true"/>		<java classname="org.cagrid.websso.common.InstallCert" fork="yes" failonerror="true">			<arg value="${websso.server.host.name}" />			<arg value="${websso.server.host.https.port}" />			<classpath>				<fileset dir="${ext.lib.dir}">					<include name="*.jar" />				</fileset>				<!-- path to find cacerts file -->				<pathelement path="${tomcat.local}/conf"/>			</classpath>		</java>	</target>	<target name="create-tomcat-keystore" description="Generates a Grid Trust Report.">		<java classname="org.cagrid.gaards.pki.tools.TomcatKeystoreCreator" fork="false" newenvironment="true" failonerror="true">			<classpath refid="build.classpath" />		</java>	</target>	<target name="insert-tomcat-secure-connector" depends="defineAntTask" description="target to modify server.xml add https connector">		<input message="Enter the location of the keystore:" addproperty="service.keystore.file"/>		<input message="Enter store password:" addproperty="service.key.pass" />		<input message="Enter tomcat https port number:" addproperty="tomcat.https.port" />		<echo message="modifying server.xml in tomcat home dir ${tomcat.home}">		</echo>		<xmltask source="${tomcat.home}/conf/server.xml" dest="${tomcat.home}/conf/server.xml">			<remove path="/Server/Service[@name='Catalina']/Connector[@scheme='https']" />			<insert path="/Server/Service[@name='Catalina']">				<![CDATA[				<Connector				 				  port="${tomcat.https.port}" maxHttpHeaderSize="8192" maxThreads="150" minSpareThreads="25" 				  maxSpareThreads="75" enableLookups="false" 				  disableUploadTimeout="true" acceptCount="100" scheme="https" 				  secure="true" clientAuth="false" sslProtocol="TLS" debug="0" 				  keystoreFile="${service.keystore.file}"				  keystorePass="${service.key.pass}"/>				]]>			</insert>		</xmltask>	</target>	<target name="deployTomcatJasigClient" depends="websso-jasig-client-war" description="deploys webssoclientjasigexample-${project.version}.war in Tomcat.  Make Sure WEBSSO server running">		<property name="tomcat.local" value="${tomcat.home}" />		<copy todir="${tomcat.local}/webapps/">			<fileset file="${build.wars.dir}/jasig-war/${webapp.jasig.name}-${project.version}.war" />		</copy>	</target>	<target name="deployTomcatAcegiClient" depends="websso-acegi-client-war" description="deploys webssoclientacegiexample-${project.version}.war in Tomcat. Make Sure WEBSSO server running">		<property name="tomcat.local" value="${tomcat.home}" />		<copy todir="${tomcat.local}/webapps/">			<fileset file="${build.wars.dir}/acegi-war/${webapp.acegi.name}-${project.version}.war" />		</copy>	</target>	<target name="deploySystemTestingTomcatJasigClient" description="deploys webssoclientjasigexample-${project.version}.war in Tomcat.Use this target only for System Testing.">		<property name="tomcat.local" value="${tomcat.home}" />		<antcall target="deleteTemplateFiles">		</antcall>		<copy file="${ext.xml.resources.dir}/web-template-jasig-${project.version}.xml" tofile="${webcontent.dir}/WEB-INF/web.xml" overwrite="true"/>		<copy file="${ext.properties.dir}/cas-client-template-jasig-${project.version}.properties" tofile="${webcontent.dir}/WEB-INF/classes/cas-client.properties" overwrite="true"/>		<copy file="${ext.xml.resources.dir}/applicationContext-jasig-${project.version}.xml" tofile="${webcontent.dir}/WEB-INF/applicationContext.xml" overwrite="true"/>		<!--  certificates from websso server are imported by test case -->		<copy file="${ext.dir}/dependencies-cert/cert/cacerts-${project.version}.cert" tofile="${tomcat.local}/conf/cacerts.cert" overwrite="true"/>		<antcall target="websso-jasig-client-war">		</antcall>		<copy todir="${tomcat.local}/webapps/">			<fileset file="${build.wars.dir}/jasig-war/${webapp.jasig.name}-${project.version}.war" />		</copy>	</target>	<target name="deploySystemTestingTomcatAcegiClient" description="deploys webssoclientacegiexample-${project.version}.war in Tomcat.Use this target only for System Testing.">		<property name="tomcat.local" value="${tomcat.home}" />		<antcall target="deleteTemplateFiles">		</antcall>		<copy file="${ext.properties.dir}/cas-client-template-acegi-${project.version}.properties" tofile="${webcontent.dir}/WEB-INF/classes/cas-client.properties" overwrite="true"/>		<copy file="${ext.xml.resources.dir}/web-acegi-${project.version}.xml" tofile="${webcontent.dir}/WEB-INF/web.xml" overwrite="true"/>		<copy file="${ext.xml.resources.dir}/applicationContext-acegi-${project.version}.xml" tofile="${webcontent.dir}/WEB-INF/applicationContext.xml" overwrite="true"/>		<copy file="${ext.dir}/dependencies-cert/cert/cacerts-${project.version}.cert" tofile="${tomcat.local}/conf/cacerts.cert" overwrite="true"/>		<antcall target="websso-acegi-client-war">		</antcall>		<copy todir="${tomcat.local}/webapps/">			<fileset file="${build.wars.dir}/acegi-war/${webapp.acegi.name}-${project.version}.war" />		</copy>	</target>	<target name="tomcat-start">		<java jar="${tomcat.home}/bin/bootstrap.jar" fork="true">			<jvmarg value="-Dcatalina.home=${tomcat.home}"/>		</java>	</target>	<target name="tomcat-stop">		<java jar="${tomcat.home}/bin/bootstrap.jar" fork="true">			<jvmarg value="-Dcatalina.home=${tomcat.home}"/>			<arg line="stop"/>		</java>	</target>	<target name="clean">		<echo description="deleting ${build.dir} "/>		<delete dir="${build.dir}" />	</target></project>