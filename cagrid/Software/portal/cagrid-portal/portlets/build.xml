<project name="cagrid-portal-portlets" basedir=".">

    <import file="${basedir}/../antfiles/build-common-test.xml"/>

    <property name="portlets.dir" value="${basedir}"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.jar.dir" value="${build.dir}/jars"/>
    <property name="build.xml.dir" value="${build.dir}/xmls"/>
    <property name="build.xsd.dir" value="${build.dir}/xsds"/>


    <property name="build.war.dir" value="${build.dir}/war"/>
    <property name="build.war.webinf.dir" value="${build.war.dir}/WEB-INF"/>
    <property name="build.war.build.classes.dir" value="${build.war.webinf.dir}/classes"/>

    <property name="javadocs.dest.dir" value="${build.dir}/javadocs"/>

    <property name="src.java.dir" value="${basedir}/src/java"/>
    <property name="src.war.dir" value="${basedir}/src/war"/>
    <property name="src.war.webinf.dir" value="${src.war.dir}/WEB-INF"/>
    <property name="src.war.webinf.context.dir" value="${src.war.webinf.dir}/context"/>

    <property name="build.wars.dir" value="${build.dir}/wars"/>
    <property name="cagrid.portlets.war.file" value="${build.wars.dir}/cagridportlets.war"/>
    <property name="portlets.context.name" value="${portlets.context.name}"/>

    <property name="ext.dir" value="${basedir}/ext"/>
    <property name="ext.compile.lib.dir" value="${ext.dir}/compile/jars"/>
    <property name="ext.lib.dir" value="${ext.dir}/default/jars"/>
    <property name="ext.xml.dir" value="${ext.dir}/default/xmls"/>
    <property name="ext.xsd.dir" value="${ext.dir}/default/xsds"/>
    <property name="ext.test.lib.dir" value="${ext.dir}/test/jars"/>
    <property name="ext.test.xml.dir" value="${ext.dir}/test/xml"/>
    <property name="ext.test.xsd.dir" value="${ext.dir}/test/xsd"/>

    <property name="portlets.debug" value="${javac.debug.flag}"/>

    <path id="compile.cp">
        <pathelement location="${basedir}../build"/>
        <fileset dir="${ext.compile.lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.compile.cp">
        <pathelement location="${build.classes.dir}"/>
        <fileset dir="${ext.test.lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>


    <path id="test.run.cp">
        <pathelement location="${test.build.classes.dir}"/>
        <path refid="test.compile.cp"/>
        <pathelement location="${ext.test.xml.dir}"/>
        <pathelement location="${ext.test.xsd.dir}"/>
        <pathelement location="${build.classes.dir}"/>
        <pathelement location="${build.war.build.classes.dir}"/>
        <pathelement location="${build.war.dir}"/>
        <path path="${test.etc.dir}"/>
        <pathelement location="${build.war.webinf.dir}/context"/>
    </path>

    <target name="build-war-dir" depends="jar">

        <mkdir dir="${build.war.webinf.dir}/lib"/>
        <mkdir dir="${build.war.build.classes.dir}"/>

        <copy todir="${build.war.dir}" overwrite="true" filtering="false">
            <fileset dir="${src.war.dir}"/>
        </copy>

        <copy todir="${build.war.dir}" overwrite="true" filtering="true">
            <fileset dir="${src.war.dir}">
                <include name="WEB-INF/classes/messages.properties"/>
            </fileset>
            <filterset>
                <filter token="CSRF_TOKEN_NAME" value="${cagrid.portal.csrfTokenName}"/>
            </filterset>
        </copy>


        <copy todir="${build.war.dir}" overwrite="true" filtering="true">
            <fileset dir="${src.war.dir}">
                <include name="WEB-INF/classes/cagridportlets.properties"/>
            </fileset>
            <filterset>

                <filter token="IMPROMPTU_MIN_MILLIS" value="${cagrid.portal.impromptu.min.milliseconds.between.submissions}"/>
            	<filter token="IMPROMPTU_MAX_CACHED" value="${cagrid.portal.imprompty.max.cached.queries.count}"/>

            	<filter token="GSS_MIN_MILLIS" value="${cagrid.portal.gss.min.milliseconds.between.runs}"/>
            	<filter token="GSS_PERIOD_SECONDS" value="${cagrid.portal.gss.seconds.between.auto.runs}"/>
                <filter token="GSS_MAX_HISTORY" value="${cagrid.portal.gss.max.history.count}"/>

            </filterset>
        </copy>
    	
        <copy todir="${build.war.webinf.dir}/lib" overwrite="true" flatten="true">
            <fileset dir="${ext.lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${build.jar.dir}">
                <include name="*.jar"/>
                <exclude name="*-test.jar"/>
            </fileset>
        </copy>

        <copy todir="${build.war.build.classes.dir}" overwrite="true">
            <fileset dir="${ext.xml.dir}">
                <include name="*.xml"/>
            </fileset>
            <fileset dir="${ext.xsd.dir}">
                <include name="*.xsd"/>
                <exclude name="*Results*.xsd"/>
            </fileset>
        </copy>

        <!--Copy properties-->
        <antcall target="create-cagridportal-properties" inheritall="false">
            <param name="target.dir" value="${build.war.build.classes.dir}"/>
        </antcall>

    </target>

    <target name="compile">
        <mkdir dir="${build.classes.dir}"/>


        <javac srcdir="${src.java.dir}" destdir="${build.classes.dir}"
               debug="${portlets.debug}"
               fork="true"
               memoryinitialsize="256m"
               memorymaximumsize="512m">
            <classpath refid="compile.cp"/>
        </javac>


    </target>

    <target name="jar" depends="compile-test">
        <mkdir dir="${build.jar.dir}"/>
        <mkdir dir="${build.xml.dir}"/>
        <mkdir dir="${build.xsd.dir}"/>

        <jar basedir="${build.classes.dir}" destfile="${build.jar.dir}/caGrid-portal-portlets.jar"/>
        <copy todir="${build.xml.dir}">
            <fileset dir="${src.war.webinf.context.dir}">
                <include name="*.xml"/>
            </fileset>
        </copy>


        <copy todir="${build.xsd.dir}">
            <fileset dir="${src.war.webinf.dir}/classes">
                <include name="*.xsd"/>
            </fileset>
        </copy>

        <jar basedir="${test.build.classes.dir}"
             destfile="${build.jar.dir}/caGrid-portal-portlets-test.jar"
             includes="**/*.class"/>
    </target>


    <target name="deploy-portlets" depends="war" description="Will deploy pre-built caGrid Portlets war">
        <copy file="${cagrid.portlets.war.file}" tofile="${target.deploy.dir}/cagridportlets.war"
              overwrite="true"/>
    </target>

    <target name="javadoc"
            description="Generate javadocs for this project. To be called from main build.">

        <javadoc packagenames="*" destdir="${javadocs.dest.dir}" author="true" version="true"
                 use="true" windowtitle="caGrid Portal API">
            <sourcepath>
                <pathelement location="${src.java.dir}"/>
            </sourcepath>

            <classpath>
                <pathelement location="${build.classes.dir}"/>
                <path refid="compile.cp"/>
            </classpath>

            <tag name="todo" scope="all" description="To do:"/>
            <tag name="created" scope="all" description="Created On:"/>

        </javadoc>
    </target>

    <target name="war" depends="build-war-dir" description="Will create a deployable war file">
        <mkdir dir="${build.wars.dir}"/>
        <jar destfile="${cagrid.portlets.war.file}" basedir="${build.war.dir}"/>
    </target>


    <target name="trust-websso" depends="prepare-test">
        <input message="Enter webSSO server URL: host[:port]" addproperty="websso.server.url"/>
        <input message="Enter passphrase" addproperty="websso.server.pass" defaultvalue="changeit"/>

        <java classname="gov.nih.nci.cagrid.portal.portlet.InstallCert" classpathref="test.run.cp">
            <arg value="${websso.server.url}"/>
            <arg value="${websso.server.pass}"/>
        </java>
    </target>


    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${test.build.dir}"/>
    </target>

    <!--all called from main build. Will build tests-->
    <target name="all" depends="clean,war"/>

</project>
