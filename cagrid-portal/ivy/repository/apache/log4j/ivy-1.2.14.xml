<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="http://ivyrep.jayasoft.org/ivy-doc.xsl"?>
<ivy-module version="1.0">
	<info organisation="apache" module="log4j" revision="1.2.14" status="release" publication="20040821215500">
		<license name="Apache" url="http://www.apache.org/licenses/LICENSE-2.0.txt"/>

		<description homepage="http://logging.apache.org/log4j/"> Inserting log statements into your
			code is a low-tech method for debugging it. It may also be the only way because
			debuggers are not always available or applicable. This is often the case for distributed
			applications. On the other hand, some people argue that log statements pollute source
			code and decrease legibility. (We believe that the contrary is true). In the Java
			language where a preprocessor is not available, log statements increase the size of the
			code and reduce its speed, even when logging is turned off. Given that a reasonably
			sized application may contain thousands of log statements, speed is of particular
			importance. With log4j it is possible to enable logging at runtime without modifying the
			application binary. The log4j package is designed so that these statements can remain in
			shipped code without incurring a heavy performance cost. Logging behavior can be
			controlled by editing a configuration file, without touching the application binary.
			Logging equips the developer with detailed context for application failures. On the
			other hand, testing provides quality assurance and confidence in the application.
			Logging and testing should not be confused. They are complementary. When logging is
			wisely used, it can prove to be an essential tool. One of the distinctive features of
			log4j is the notion of inheritance in loggers. Using a logger hierarchy it is possible
			to control which log statements are output at arbitrarily fine granularity but also
			great ease. This helps reduce the volume of logged output and minimize the cost of
			logging. The target of the log output can be a file, an OutputStream, a java.io.Writer,
			a remote log4j server, a remote Unix Syslog daemon, or many other output targets. On an
			AMD Duron clocked at 800Mhz running JDK 1.3.1, it costs about 5 nanoseconds to determine
			if a logging statement should be logged or not. Actual logging is also quite fast,
			ranging from 21 microseconds using the SimpleLayout, 37 microseconds using the
			TTCCLayout. The performance of the PatternLayout is almost as good as the dedicated
			layouts, except that it is much more flexible. The package is being constantly improved
			thanks to input from users and code contributed by authors in the community.
		</description>
	</info>
</ivy-module>
